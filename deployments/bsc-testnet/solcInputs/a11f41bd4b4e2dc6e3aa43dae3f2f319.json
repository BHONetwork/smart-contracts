{
  "language": "Solidity",
  "sources": {
    "contracts/token/TokenTimeLockByAmount.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./BEP20/IBEP20.sol\";\nimport \"./BEP20/SafeBEP20.sol\";\nimport \"../math/SafeMathX.sol\";\n\ncontract TokenTimeLockByAmount is Initializable {\n    using SafeBEP20 for IBEP20;\n    using SafeMathX for uint256;\n\n    /// Release amounts of each phase\n    uint256[] private _releaseAmounts;\n\n    /// Total locked tokens\n    uint256 private _amount;\n\n    /// Total released amount to user\n    uint256 private _releasedAmount;\n\n    /// Beneficiary\n    address private _user;\n\n    /// Token address\n    address private _token;\n\n    /// Factory address\n    address private _factory;\n\n    /// Release date that user initiates a release of each phase\n    uint64[] private _releaseDates;\n\n    /// Start date of the lock\n    uint64 private _startDate;\n\n    /// Lock duration (in seconds) of each phase\n    uint32[] private _lockDurations;\n\n    /// Next release phase\n    uint32 private _nextReleaseIdx;\n\n    event Released(\n        uint256 phaseReleasedAmount,\n        uint256 totalReleasedAmount,\n        uint32 fromIdx,\n        uint32 toIdx,\n        uint64 date\n    );\n\n    event SafetyReleaseActivated(uint256 amount, address to, uint64 date);\n\n    function token() public view returns (IBEP20) {\n        return IBEP20(_token);\n    }\n\n    function beneficiary() public view returns (address) {\n        return _user;\n    }\n\n    function amount() public view returns (uint256) {\n        return _amount;\n    }\n\n    function releasedAmount() public view returns (uint256) {\n        return _releasedAmount;\n    }\n\n    function startDate() public view returns (uint64) {\n        return _startDate;\n    }\n\n    function lockDurations() public view returns (uint32[] memory) {\n        return _lockDurations;\n    }\n\n    function releaseAmounts() public view returns (uint256[] memory) {\n        return _releaseAmounts;\n    }\n\n    function releaseDates() public view returns (uint64[] memory) {\n        return _releaseDates;\n    }\n\n    function nextReleaseIdx() public view returns (uint32) {\n        return _nextReleaseIdx;\n    }\n\n    function factory() public view returns (address) {\n        return _factory;\n    }\n\n    function lockData()\n        public\n        view\n        returns (\n            address user,\n            address token_,\n            uint256 amount_,\n            uint256 releasedAmount_,\n            uint64 startDate_,\n            uint32[] memory lockDurations_,\n            uint256[] memory releaseAmounts_,\n            uint64[] memory releaseDates_,\n            uint32 nextReleaseIdx_,\n            address factory_\n        )\n    {\n        return (\n            beneficiary(),\n            address(token()),\n            amount(),\n            releasedAmount(),\n            startDate(),\n            lockDurations(),\n            releaseAmounts(),\n            releaseDates(),\n            nextReleaseIdx(),\n            factory()\n        );\n    }\n\n    /// @notice Register a new lock for a user\n    /// Reverts in the following cases:\n    /// - Duplicated lock id for a user.\n    /// - `lockDurations` and `releaseAmounts` length don't match.\n    function initialize(\n        address factory_,\n        address user_,\n        address token_,\n        uint32[] calldata lockDurations_,\n        uint256[] calldata releaseAmounts_,\n        uint64 startDate_\n    ) public initializer returns (bool) {\n        require(\n            lockDurations_.length == releaseAmounts_.length,\n            \"TokenTimeLockByAmount: unlock length not match\"\n        );\n\n        uint256 _sum = 0;\n        for (uint256 i = 0; i < releaseAmounts_.length; ++i) {\n            _sum += releaseAmounts_[i];\n        }\n\n        require(\n            user_ != address(0),\n            \"TokenTimeLockByAmount: user address is zero\"\n        );\n\n        require(\n            token_ != address(0),\n            \"TokenTimeLockByAmount: token address is zero\"\n        );\n\n        require(\n            factory_ != address(0),\n            \"TokenTimeLockByAmount: factory address is zero\"\n        );\n\n        _factory = factory_;\n        _user = user_;\n        _token = token_;\n        _startDate = startDate_;\n        _lockDurations = lockDurations_;\n        _releaseAmounts = releaseAmounts_;\n        _amount = _sum;\n        _releasedAmount = 0;\n        _nextReleaseIdx = 0;\n        _releaseDates = new uint64[](_lockDurations.length);\n\n        return true;\n    }\n\n    /// @notice Release unlocked tokens to user.\n    /// @dev User (sender) can release unlocked tokens by calling this function.\n    /// This function will release locked tokens from multiple lock phases that meets unlock requirements\n    /// Reverts in the following cases:\n    /// - No tokens to be withdrawn including:\n    ///     + All lock phases are already released\n    ///     + Do not meet next unlock requirements\n    /// - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\n    /// @return Return `true` if succeeds, otherwise `false`\n    function release() public returns (bool) {\n        uint256 numOfPhases = _lockDurations.length;\n\n        require(\n            _nextReleaseIdx < numOfPhases,\n            \"TokenTimeLockByAmount: all phases are released\"\n        );\n        require(\n            block.timestamp >=\n                _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds,\n            \"TokenTimeLockByAmount: next phase unavailable\"\n        );\n\n        uint256 prevReleaseIdx = _nextReleaseIdx;\n\n        uint256 availableReleaseAmount = 0;\n        while (\n            _nextReleaseIdx < numOfPhases &&\n            block.timestamp >=\n            _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds\n        ) {\n            uint256 stepReleaseAmount = 0;\n            stepReleaseAmount = _releaseAmounts[_nextReleaseIdx];\n\n            availableReleaseAmount += stepReleaseAmount;\n            _nextReleaseIdx++;\n        }\n\n        uint256 balance = token().balanceOf(address(this));\n        require(\n            balance >= availableReleaseAmount,\n            \"TokenTimeLockByAmount: insufficient balance\"\n        );\n        _releasedAmount += availableReleaseAmount;\n        token().safeTransfer(beneficiary(), availableReleaseAmount);\n\n        uint64 releaseDate = uint64(block.timestamp);\n\n        for (uint256 i = prevReleaseIdx; i < _nextReleaseIdx; ++i) {\n            _releaseDates[i] = releaseDate;\n        }\n\n        emit Released(\n            availableReleaseAmount,\n            _releasedAmount,\n            uint32(prevReleaseIdx),\n            _nextReleaseIdx - 1,\n            releaseDate\n        );\n\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/token/BEP20/IBEP20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "contracts/token/BEP20/SafeBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IBEP20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeBEP20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeBEP20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeBEP20: BEP20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/math/SafeMathX.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nlibrary SafeMathX {\n    // Calculate x * y / scale rounding down.\n    function mulScale(\n        uint256 x,\n        uint256 y,\n        uint128 scale\n    ) internal pure returns (uint256) {\n        uint256 a = x / scale;\n        uint256 b = x % scale;\n        uint256 c = y / scale;\n        uint256 d = y % scale;\n\n        return a * c * scale + a * d + b * c + (b * d) / scale;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/token/TokenTimeLockByAmountProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./TokenTimeLockByAmount.sol\";\n\ncontract TokenTimeLockByAmountProxyFactory {\n    event ProxyCreated(\n        address proxy,\n        address implementation,\n        address proxyOwner\n    );\n\n    function createProxy(\n        address owner_,\n        address lock,\n        address user_,\n        address token_,\n        uint32[] calldata lockDurations_,\n        uint256[] calldata releaseAmounts_,\n        uint64 startDate_\n    ) public returns (address) {\n        address proxy = Clones.clone(lock);\n        bool setupResult = TokenTimeLockByAmount(proxy).initialize(\n            owner_,\n            user_,\n            token_,\n            lockDurations_,\n            releaseAmounts_,\n            startDate_\n        );\n        require(setupResult, \"TokenTimeLockByAmountProxy: can't setup\");\n\n        emit ProxyCreated(proxy, lock, owner_);\n\n        return proxy;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/token/TokenTimeLockProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./TokenTimeLock.sol\";\n\ncontract TokenTimeLockProxyFactory {\n    event ProxyCreated(address proxy, address implementation, address factory);\n\n    function createProxy(\n        address lock,\n        address user_,\n        address token_,\n        uint256 amount_,\n        uint32[] calldata lockDurations_,\n        uint32[] calldata releasePercents_,\n        uint64 startDate_\n    ) public returns (address) {\n        address proxy = Clones.clone(lock);\n        bool setupResult = TokenTimeLock(proxy).initialize(\n            address(this),\n            user_,\n            token_,\n            amount_,\n            lockDurations_,\n            releasePercents_,\n            startDate_\n        );\n        require(setupResult, \"TokenTimeLockProxy: can't setup\");\n\n        emit ProxyCreated(proxy, lock, address(this));\n\n        return proxy;\n    }\n}\n"
    },
    "contracts/token/TokenTimeLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./BEP20/IBEP20.sol\";\nimport \"./BEP20/SafeBEP20.sol\";\nimport \"../math/SafeMathX.sol\";\n\ncontract TokenTimeLock is Initializable {\n    using SafeBEP20 for IBEP20;\n    using SafeMathX for uint256;\n\n    /// Total locked tokens\n    uint256 private _amount;\n\n    /// Total released amount to user\n    uint256 private _releasedAmount;\n\n    /// Version\n    string private _version;\n\n    /// Beneficiary\n    address private _user;\n\n    /// Token address\n    address private _token;\n\n    /// Factory address\n    address private _factory;\n\n    /// Start date of the lock\n    uint64 private _startDate;\n\n    /// Release date that user initiates a release of each phase\n    uint64[] private _releaseDates;\n\n    /// Lock duration (in seconds) of each phase\n    uint32[] private _lockDurations;\n\n    /// Release percent of each phase\n    uint32[] private _releasePercents;\n\n    /// Next release phase\n    uint32 private _nextReleaseIdx;\n\n    event Released(\n        uint256 phaseReleasedAmount,\n        uint256 totalReleasedAmount,\n        uint32 fromIdx,\n        uint32 toIdx,\n        uint64 date\n    );\n\n    event SafetyReleaseActivated(uint256 amount, address to, uint64 date);\n\n    function token() public view returns (IBEP20) {\n        return IBEP20(_token);\n    }\n\n    function beneficiary() public view returns (address) {\n        return _user;\n    }\n\n    function amount() public view returns (uint256) {\n        return _amount;\n    }\n\n    function releasedAmount() public view returns (uint256) {\n        return _releasedAmount;\n    }\n\n    function startDate() public view returns (uint64) {\n        return _startDate;\n    }\n\n    function lockDurations() public view returns (uint32[] memory) {\n        return _lockDurations;\n    }\n\n    function releasePercents() public view returns (uint32[] memory) {\n        return _releasePercents;\n    }\n\n    function releaseDates() public view returns (uint64[] memory) {\n        return _releaseDates;\n    }\n\n    function nextReleaseIdx() public view returns (uint32) {\n        return _nextReleaseIdx;\n    }\n\n    function factory() public view returns (address) {\n        return _factory;\n    }\n\n    function lockData()\n        public\n        view\n        returns (\n            address user,\n            address token_,\n            uint256 amount_,\n            uint256 releasedAmount_,\n            uint64 startDate_,\n            uint32[] memory lockDurations_,\n            uint32[] memory releasePercents_,\n            uint64[] memory releaseDates_,\n            uint32 nextReleaseIdx_,\n            address factory_\n        )\n    {\n        return (\n            beneficiary(),\n            address(token()),\n            amount(),\n            releasedAmount(),\n            startDate(),\n            lockDurations(),\n            releasePercents(),\n            releaseDates(),\n            nextReleaseIdx(),\n            factory()\n        );\n    }\n\n    /// @notice Register a new lock for a user\n    /// Reverts in the following cases:\n    /// - Duplicated lock id for a user.\n    /// - `lockDurations` and `unlockPercents` length don't match.\n    /// - `unlockPercents` sum is not equal to 100 (100%).\n    function initialize(\n        address factory_,\n        address user_,\n        address token_,\n        uint256 amount_,\n        uint32[] calldata lockDurations_,\n        uint32[] calldata releasePercents_,\n        uint64 startDate_\n    ) public initializer returns (bool) {\n        require(\n            lockDurations_.length == releasePercents_.length,\n            \"TokenTimeLock: unlock length not match\"\n        );\n\n        uint256 _sum;\n        for (uint256 i = 0; i < releasePercents_.length; ++i) {\n            _sum += releasePercents_[i];\n        }\n\n        require(_sum == 100, \"TokenTimeLock: unlock percent not match 100\");\n\n        require(user_ != address(0), \"TokenTimeLock: user address is zero\");\n\n        require(token_ != address(0), \"TokenTimeLock: token address is zero\");\n\n        require(\n            factory_ != address(0),\n            \"TokenTimeLock: factory address is zero\"\n        );\n\n        require(amount_ > 0, \"TokenTimeLock: amount must greater than zero\");\n\n        _factory = factory_;\n        _user = user_;\n        _token = token_;\n        _startDate = startDate_;\n        _lockDurations = lockDurations_;\n        _releasePercents = releasePercents_;\n        _amount = amount_;\n        _releasedAmount = 0;\n        _nextReleaseIdx = 0;\n        _releaseDates = new uint64[](_lockDurations.length);\n\n        return true;\n    }\n\n    /// @notice Release unlocked tokens to user.\n    /// @dev User (sender) can release unlocked tokens by calling this function.\n    /// This function will release locked tokens from multiple lock phases that meets unlock requirements\n    /// Reverts in the following cases:\n    /// - No tokens to be withdrawn including:\n    ///     + All lock phases are already released\n    ///     + Do not meet next unlock requirements\n    /// - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\n    /// @return Return `true` if succeeds, otherwise `false`\n    function release() public returns (bool) {\n        uint256 numOfPhases = _lockDurations.length;\n\n        require(\n            _nextReleaseIdx < numOfPhases,\n            \"TokenTimeLock: all phases are released\"\n        );\n        require(\n            block.timestamp >=\n                _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds,\n            \"TokenTimeLock: next phase unavailable\"\n        );\n\n        uint256 prevReleaseIdx = _nextReleaseIdx;\n\n        uint256 availableReleaseAmount;\n        while (\n            _nextReleaseIdx < numOfPhases &&\n            block.timestamp >=\n            _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds\n        ) {\n            uint256 stepReleaseAmount;\n            if (_nextReleaseIdx == numOfPhases - 1) {\n                stepReleaseAmount =\n                    _amount -\n                    _releasedAmount -\n                    availableReleaseAmount;\n            } else {\n                stepReleaseAmount = _amount.mulScale(\n                    _releasePercents[_nextReleaseIdx],\n                    100\n                );\n            }\n\n            availableReleaseAmount += stepReleaseAmount;\n            _nextReleaseIdx++;\n        }\n\n        uint256 balance = token().balanceOf(address(this));\n        require(\n            balance >= availableReleaseAmount,\n            \"TokenTimeLock: insufficient balance\"\n        );\n        _releasedAmount += availableReleaseAmount;\n        token().safeTransfer(beneficiary(), availableReleaseAmount);\n\n        uint64 releaseDate = uint64(block.timestamp);\n\n        for (uint256 i = prevReleaseIdx; i < _nextReleaseIdx; ++i) {\n            _releaseDates[i] = releaseDate;\n        }\n\n        emit Released(\n            availableReleaseAmount,\n            _releasedAmount,\n            uint32(prevReleaseIdx),\n            _nextReleaseIdx - 1,\n            releaseDate\n        );\n\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}