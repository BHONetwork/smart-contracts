{
  "address": "0x96Da81c839ce2bA53Ba7689b241fc3d1984CF968",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "phaseReleasedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReleasedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fromIdx",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "toIdx",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "date",
          "type": "uint64"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint32[]",
          "name": "lockDurations_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "releasePercents_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint64",
          "name": "startDate_",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockData",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releasedAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startDate_",
          "type": "uint64"
        },
        {
          "internalType": "uint32[]",
          "name": "lockDurations_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "releasePercents_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint64[]",
          "name": "releaseDates_",
          "type": "uint64[]"
        },
        {
          "internalType": "uint32",
          "name": "nextReleaseIdx_",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDurations",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextReleaseIdx",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseDates",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releasePercents",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startDate",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c19c86076ebf3d16592c2c4df9be1e1d9880c4b8382c5e601fa16187c88330b",
  "receipt": {
    "to": null,
    "from": "0x08687a0b65F5d33C374C98aBaC17010d1640C7FD",
    "contractAddress": "0x96Da81c839ce2bA53Ba7689b241fc3d1984CF968",
    "transactionIndex": 2,
    "gasUsed": "2283315",
    "logsBloom": "0x
    "blockHash": "0x2f6058055e25364e1e5281234c08764c5a20ac943c0154ac3dc6c14e2b58d670",
    "transactionHash": "0x1c19c86076ebf3d16592c2c4df9be1e1d9880c4b8382c5e601fa16187c88330b",
    "logs": [],
    "blockNumber": 12979552,
    "cumulativeGasUsed": "2459761",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fe733fa7331b76caeafd76981298a34d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseReleasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReleasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fromIdx\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"toIdx\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"lockDurations_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"releasePercents_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint64\",\"name\":\"startDate_\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate_\",\"type\":\"uint64\"},{\"internalType\":\"uint32[]\",\"name\":\"lockDurations_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"releasePercents_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"releaseDates_\",\"type\":\"uint64[]\"},{\"internalType\":\"uint32\",\"name\":\"nextReleaseIdx_\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDurations\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReleaseIdx\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseDates\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasePercents\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"release()\":{\"details\":\"User (sender) can release unlocked tokens by calling this function. This function will release locked tokens from multiple lock phases that meets unlock requirements Reverts in the following cases: - No tokens to be withdrawn including:     + All lock phases are already released     + Do not meet next unlock requirements - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\",\"returns\":{\"_0\":\"Return `true` if succeeds, otherwise `false`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address,uint256,uint32[],uint32[],uint64)\":{\"notice\":\"Register a new lock for a user Reverts in the following cases: - Duplicated lock id for a user. - `lockDurations` and `unlockPercents` length don't match. - `unlockPercents` sum is not equal to 100 (100%).\"},\"release()\":{\"notice\":\"Release unlocked tokens to user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TokenTimeLock.sol\":\"TokenTimeLock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/math/SafeMathX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary SafeMathX {\\n    // Calculate x * y / scale rounding down.\\n    function mulScale(\\n        uint256 x,\\n        uint256 y,\\n        uint128 scale\\n    ) internal pure returns (uint256) {\\n        uint256 a = x / scale;\\n        uint256 b = x % scale;\\n        uint256 c = y / scale;\\n        uint256 d = y % scale;\\n\\n        return a * c * scale + a * d + b * c + (b * d) / scale;\\n    }\\n}\\n\",\"keccak256\":\"0x077baccbb8cca0ce4027c9f212fcefede74b89a2d6990d06b54ba4b59d2f12a1\",\"license\":\"MIT\"},\"contracts/token/BEP20/IBEP20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x36d3e404bfb1e4f60fb1f40f639661c3f036b2d17eca85a4d47d256b6c468fb6\",\"license\":\"MIT\"},\"contracts/token/BEP20/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeBEP20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeBEP20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ac96e6e883a038e6488b6ea5b651ced32b786b53a6964de629b6fca98630428\",\"license\":\"MIT\"},\"contracts/token/TokenTimeLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./BEP20/IBEP20.sol\\\";\\nimport \\\"./BEP20/SafeBEP20.sol\\\";\\nimport \\\"../math/SafeMathX.sol\\\";\\n\\ncontract TokenTimeLock is Initializable {\\n    using SafeBEP20 for IBEP20;\\n    using SafeMathX for uint256;\\n\\n    /// Total locked tokens\\n    uint256 private _amount;\\n\\n    /// Total released amount to user\\n    uint256 private _releasedAmount;\\n\\n    /// Version\\n    string private _version;\\n\\n    /// Beneficiary\\n    address private _user;\\n\\n    /// Token address\\n    address private _token;\\n\\n    /// Factory address\\n    address private _factory;\\n\\n    /// Start date of the lock\\n    uint64 private _startDate;\\n\\n    /// Release date that user initiates a release of each phase\\n    uint64[] private _releaseDates;\\n\\n    /// Lock duration (in seconds) of each phase\\n    uint32[] private _lockDurations;\\n\\n    /// Release percent of each phase\\n    uint32[] private _releasePercents;\\n\\n    /// Next release phase\\n    uint32 private _nextReleaseIdx;\\n\\n    event Released(\\n        uint256 phaseReleasedAmount,\\n        uint256 totalReleasedAmount,\\n        uint32 fromIdx,\\n        uint32 toIdx,\\n        uint64 date\\n    );\\n\\n    function token() public view returns (IBEP20) {\\n        return IBEP20(_token);\\n    }\\n\\n    function beneficiary() public view returns (address) {\\n        return _user;\\n    }\\n\\n    function amount() public view returns (uint256) {\\n        return _amount;\\n    }\\n\\n    function releasedAmount() public view returns (uint256) {\\n        return _releasedAmount;\\n    }\\n\\n    function startDate() public view returns (uint64) {\\n        return _startDate;\\n    }\\n\\n    function lockDurations() public view returns (uint32[] memory) {\\n        return _lockDurations;\\n    }\\n\\n    function releasePercents() public view returns (uint32[] memory) {\\n        return _releasePercents;\\n    }\\n\\n    function releaseDates() public view returns (uint64[] memory) {\\n        return _releaseDates;\\n    }\\n\\n    function nextReleaseIdx() public view returns (uint32) {\\n        return _nextReleaseIdx;\\n    }\\n\\n    function factory() public view returns (address) {\\n        return _factory;\\n    }\\n\\n    function lockData()\\n        public\\n        view\\n        returns (\\n            address user,\\n            address token_,\\n            uint256 amount_,\\n            uint256 releasedAmount_,\\n            uint64 startDate_,\\n            uint32[] memory lockDurations_,\\n            uint32[] memory releasePercents_,\\n            uint64[] memory releaseDates_,\\n            uint32 nextReleaseIdx_,\\n            address factory_\\n        )\\n    {\\n        return (\\n            beneficiary(),\\n            address(token()),\\n            amount(),\\n            releasedAmount(),\\n            startDate(),\\n            lockDurations(),\\n            releasePercents(),\\n            releaseDates(),\\n            nextReleaseIdx(),\\n            factory()\\n        );\\n    }\\n\\n    /// @notice Register a new lock for a user\\n    /// Reverts in the following cases:\\n    /// - Duplicated lock id for a user.\\n    /// - `lockDurations` and `unlockPercents` length don't match.\\n    /// - `unlockPercents` sum is not equal to 100 (100%).\\n    function initialize(\\n        address factory_,\\n        address user_,\\n        address token_,\\n        uint256 amount_,\\n        uint32[] calldata lockDurations_,\\n        uint32[] calldata releasePercents_,\\n        uint64 startDate_\\n    ) public initializer returns (bool) {\\n        require(\\n            lockDurations_.length == releasePercents_.length,\\n            \\\"TokenTimeLock: unlock length not match\\\"\\n        );\\n\\n        uint256 _sum;\\n        for (uint256 i = 0; i < releasePercents_.length; ++i) {\\n            _sum += releasePercents_[i];\\n        }\\n\\n        require(_sum == 100, \\\"TokenTimeLock: unlock percent not match 100\\\");\\n\\n        require(user_ != address(0), \\\"TokenTimeLock: user address is zero\\\");\\n\\n        require(token_ != address(0), \\\"TokenTimeLock: token address is zero\\\");\\n\\n        require(\\n            factory_ != address(0),\\n            \\\"TokenTimeLock: factory address is zero\\\"\\n        );\\n\\n        require(amount_ > 0, \\\"TokenTimeLock: amount must greater than zero\\\");\\n\\n        _factory = factory_;\\n        _user = user_;\\n        _token = token_;\\n        _startDate = startDate_;\\n        _lockDurations = lockDurations_;\\n        _releasePercents = releasePercents_;\\n        _amount = amount_;\\n        _releasedAmount = 0;\\n        _nextReleaseIdx = 0;\\n        _releaseDates = new uint64[](_lockDurations.length);\\n\\n        return true;\\n    }\\n\\n    /// @notice Release unlocked tokens to user.\\n    /// @dev User (sender) can release unlocked tokens by calling this function.\\n    /// This function will release locked tokens from multiple lock phases that meets unlock requirements\\n    /// Reverts in the following cases:\\n    /// - No tokens to be withdrawn including:\\n    ///     + All lock phases are already released\\n    ///     + Do not meet next unlock requirements\\n    /// - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\\n    /// @return Return `true` if succeeds, otherwise `false`\\n    function release() public returns (bool) {\\n        uint256 numOfPhases = _lockDurations.length;\\n\\n        require(\\n            _nextReleaseIdx < numOfPhases,\\n            \\\"TokenTimeLock: all phases are released\\\"\\n        );\\n        require(\\n            block.timestamp >=\\n                _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds,\\n            \\\"TokenTimeLock: next phase unavailable\\\"\\n        );\\n\\n        uint256 prevReleaseIdx = _nextReleaseIdx;\\n\\n        uint256 availableReleaseAmount;\\n        while (\\n            _nextReleaseIdx < numOfPhases &&\\n            block.timestamp >=\\n            _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds\\n        ) {\\n            uint256 stepReleaseAmount;\\n            if (_nextReleaseIdx == numOfPhases - 1) {\\n                stepReleaseAmount =\\n                    _amount -\\n                    _releasedAmount -\\n                    availableReleaseAmount;\\n            } else {\\n                stepReleaseAmount = _amount.mulScale(\\n                    _releasePercents[_nextReleaseIdx],\\n                    100\\n                );\\n            }\\n\\n            availableReleaseAmount += stepReleaseAmount;\\n            _nextReleaseIdx++;\\n        }\\n\\n        uint256 balance = token().balanceOf(address(this));\\n        require(\\n            balance >= availableReleaseAmount,\\n            \\\"TokenTimeLock: insufficient balance\\\"\\n        );\\n        _releasedAmount += availableReleaseAmount;\\n        token().safeTransfer(beneficiary(), availableReleaseAmount);\\n\\n        uint64 releaseDate = uint64(block.timestamp);\\n\\n        for (uint256 i = prevReleaseIdx; i < _nextReleaseIdx; ++i) {\\n            _releaseDates[i] = releaseDate;\\n        }\\n\\n        emit Released(\\n            availableReleaseAmount,\\n            _releasedAmount,\\n            uint32(prevReleaseIdx),\\n            _nextReleaseIdx - 1,\\n            releaseDate\\n        );\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x06974a73847cf95161dbaf7ecc1822e13373a12e74fbd6017f57b48fef0bb464\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061288e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063aa8c217c1161008c578063d6ec527011610066578063d6ec5270146101f4578063e090008014610212578063f8fcd15614610230578063fc0c546a14610257576100cf565b8063aa8c217c1461019a578063c00de5fc146101b8578063c45a0155146101d6576100cf565b80630b32dc5b146100d45780630b97bc86146101045780632a62a4b21461012257806338af3eed1461014057806345d30a171461015e57806386d1a69f1461017c575b600080fd5b6100ee60048036038101906100e991906116f4565b610275565b6040516100fb9190611d2a565b60405180910390f35b61010c6107ce565b6040516101199190611fab565b60405180910390f35b61012a6107ec565b6040516101379190611ce6565b60405180910390f35b610148610870565b6040516101559190611bf1565b60405180910390f35b61016661089a565b6040516101739190611f22565b60405180910390f35b6101846108a4565b6040516101919190611d2a565b60405180910390f35b6101a2610e84565b6040516101af9190611f22565b60405180910390f35b6101c0610e8e565b6040516101cd9190611d08565b60405180910390f35b6101de610f1a565b6040516101eb9190611bf1565b60405180910390f35b6101fc610f44565b6040516102099190611f90565b60405180910390f35b61021a610f5e565b6040516102279190611ce6565b60405180910390f35b610238610fe2565b60405161024e9a99989796959493929190611c0c565b60405180910390f35b61025f611062565b60405161026c9190611d45565b60405180910390f35b60008060019054906101000a900460ff168061029c575060008054906101000a900460ff16155b6102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d290611e22565b60405180910390fd5b60008060019054906101000a900460ff16159050801561032b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b848490508787905014610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a90611e42565b60405180910390fd5b600080600090505b868690508110156103f8578686828181106103bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103d4919061181c565b63ffffffff16826103e5919061206a565b9150806103f1906122f2565b905061037b565b506064811461043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043390611e62565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614156104ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a390611e02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141561051c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051390611f02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16141561058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058390611ec2565b60405180910390fd5b600089116105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c690611da2565b60405180910390fd5b8b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508787600891906106cc92919061149d565b508585600991906106de92919061149d565b508860018190555060006002819055506000600a60006101000a81548163ffffffff021916908363ffffffff16021790555060088054905067ffffffffffffffff811115610755577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107835781602001602082028036833780820191505090505b5060079080519060200190610799929190611553565b50600192505080156107c05760008060016101000a81548160ff0219169083151502179055505b509998505050505050505050565b6000600660149054906101000a900467ffffffffffffffff16905090565b6060600980548060200260200160405190810160405280929190818152602001828054801561086657602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116108295790505b5050505050905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600254905090565b600080600880549050905080600a60009054906101000a900463ffffffff1663ffffffff1610610909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090090611d82565b60405180910390fd5b60016008600a60009054906101000a900463ffffffff1663ffffffff168154811061095d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661098d9190612189565b63ffffffff16600660149054906101000a900467ffffffffffffffff166109b491906120c0565b67ffffffffffffffff16421015610a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f790611e82565b60405180910390fd5b6000600a60009054906101000a900463ffffffff1663ffffffff16905060005b82600a60009054906101000a900463ffffffff1663ffffffff16108015610afb575060016008600a60009054906101000a900463ffffffff1663ffffffff1681548110610a96577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16610ac69190612189565b63ffffffff16600660149054906101000a900467ffffffffffffffff16610aed91906120c0565b67ffffffffffffffff164210155b15610c3d576000600184610b0f91906121c7565b600a60009054906101000a900463ffffffff1663ffffffff161415610b505781600254600154610b3f91906121c7565b610b4991906121c7565b9050610be8565b610be56009600a60009054906101000a900463ffffffff1663ffffffff1681548110610ba5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16606460015461108c9092919063ffffffff16565b90505b8082610bf4919061206a565b9150600a600081819054906101000a900463ffffffff1680929190610c189061233b565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050610a20565b6000610c47611062565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c7f9190611bf1565b60206040518083038186803b158015610c9757600080fd5b505afa158015610cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccf91906117f3565b905081811015610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b90611ea2565b60405180910390fd5b8160026000828254610d26919061206a565b92505081905550610d66610d38610870565b83610d41611062565b73ffffffffffffffffffffffffffffffffffffffff166111aa9092919063ffffffff16565b600042905060008490505b600a60009054906101000a900463ffffffff1663ffffffff16811015610e18578160078281548110610dcc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080610e11906122f2565b9050610d71565b507f76264100b4b20aa06c294636c2e40aaf398c3490112488330659f4577010713f83600254866001600a60009054906101000a900463ffffffff16610e5e91906121fb565b85604051610e70959493929190611f3d565b60405180910390a160019550505050505090565b6000600154905090565b60606007805480602002602001604051908101604052809291908181526020018280548015610f1057602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610ecb5790505b5050505050905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60009054906101000a900463ffffffff16905090565b60606008805480602002602001604051908101604052809291908181526020018280548015610fd857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610f9b5790505b5050505050905090565b60008060008060006060806060600080610ffa610870565b611002611062565b61100a610e84565b61101261089a565b61101a6107ce565b611022610f5e565b61102a6107ec565b611032610e8e565b61103a610f44565b611042610f1a565b995099509950995099509950995099509950995090919293949596979899565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080826fffffffffffffffffffffffffffffffff16856110ad91906120fe565b90506000836fffffffffffffffffffffffffffffffff16866110cf9190612368565b90506000846fffffffffffffffffffffffffffffffff16866110f191906120fe565b90506000856fffffffffffffffffffffffffffffffff16876111139190612368565b9050856fffffffffffffffffffffffffffffffff168184611134919061212f565b61113e91906120fe565b828461114a919061212f565b8286611156919061212f565b886fffffffffffffffffffffffffffffffff168588611175919061212f565b61117f919061212f565b611189919061206a565b611193919061206a565b61119d919061206a565b9450505050509392505050565b61122b8363a9059cbb60e01b84846040516024016111c9929190611cbd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611230565b505050565b6000611292826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112f79092919063ffffffff16565b90506000815111156112f257808060200190518101906112b291906117ca565b6112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e890611dc2565b60405180910390fd5b5b505050565b6060611306848460008561130f565b90509392505050565b606082471015611354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134b90611de2565b60405180910390fd5b61135d85611423565b61139c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139390611ee2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516113c59190611bda565b60006040518083038185875af1925050503d8060008114611402576040519150601f19603f3d011682016040523d82523d6000602084013e611407565b606091505b5091509150611417828286611436565b92505050949350505050565b600080823b905060008111915050919050565b6060831561144657829050611496565b6000835111156114595782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148d9190611d60565b60405180910390fd5b9392505050565b828054828255906000526020600020906007016008900481019282156115425791602002820160005b8382111561151057833563ffffffff1683826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026114c6565b80156115405782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611510565b505b50905061154f919061160f565b5090565b828054828255906000526020600020906003016004900481019282156115fe5791602002820160005b838211156115c857835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550926020019260080160208160070104928301926001030261157c565b80156115fc5782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026115c8565b505b50905061160b919061160f565b5090565b5b80821115611628576000816000905550600101611610565b5090565b60008135905061163b816127e5565b92915050565b60008083601f84011261165357600080fd5b8235905067ffffffffffffffff81111561166c57600080fd5b60208301915083602082028301111561168457600080fd5b9250929050565b60008151905061169a816127fc565b92915050565b6000813590506116af81612813565b92915050565b6000815190506116c481612813565b92915050565b6000813590506116d98161282a565b92915050565b6000813590506116ee81612841565b92915050565b600080600080600080600080600060e08a8c03121561171257600080fd5b60006117208c828d0161162c565b99505060206117318c828d0161162c565b98505060406117428c828d0161162c565b97505060606117538c828d016116a0565b96505060808a013567ffffffffffffffff81111561177057600080fd5b61177c8c828d01611641565b955095505060a08a013567ffffffffffffffff81111561179b57600080fd5b6117a78c828d01611641565b935093505060c06117ba8c828d016116df565b9150509295985092959850929598565b6000602082840312156117dc57600080fd5b60006117ea8482850161168b565b91505092915050565b60006020828403121561180557600080fd5b6000611813848285016116b5565b91505092915050565b60006020828403121561182e57600080fd5b600061183c848285016116ca565b91505092915050565b60006118518383611b9e565b60208301905092915050565b60006118698383611bbc565b60208301905092915050565b61187e8161222f565b82525050565b600061188f82611fe6565b611899818561202c565b93506118a483611fc6565b8060005b838110156118d55781516118bc8882611845565b97506118c783612012565b9250506001810190506118a8565b5085935050505092915050565b60006118ed82611ff1565b6118f7818561203d565b935061190283611fd6565b8060005b8381101561193357815161191a888261185d565b97506119258361201f565b925050600181019050611906565b5085935050505092915050565b61194981612241565b82525050565b600061195a82611ffc565b611964818561204e565b93506119748185602086016122bf565b80840191505092915050565b6119898161229b565b82525050565b600061199a82612007565b6119a48185612059565b93506119b48185602086016122bf565b6119bd816123f7565b840191505092915050565b60006119d5602683612059565b91506119e082612408565b604082019050919050565b60006119f8602c83612059565b9150611a0382612457565b604082019050919050565b6000611a1b602a83612059565b9150611a26826124a6565b604082019050919050565b6000611a3e602683612059565b9150611a49826124f5565b604082019050919050565b6000611a61602383612059565b9150611a6c82612544565b604082019050919050565b6000611a84602e83612059565b9150611a8f82612593565b604082019050919050565b6000611aa7602683612059565b9150611ab2826125e2565b604082019050919050565b6000611aca602b83612059565b9150611ad582612631565b604082019050919050565b6000611aed602583612059565b9150611af882612680565b604082019050919050565b6000611b10602383612059565b9150611b1b826126cf565b604082019050919050565b6000611b33602683612059565b9150611b3e8261271e565b604082019050919050565b6000611b56601d83612059565b9150611b618261276d565b602082019050919050565b6000611b79602483612059565b9150611b8482612796565b604082019050919050565b611b988161226d565b82525050565b611ba781612277565b82525050565b611bb681612277565b82525050565b611bc581612287565b82525050565b611bd481612287565b82525050565b6000611be6828461194f565b915081905092915050565b6000602082019050611c066000830184611875565b92915050565b600061014082019050611c22600083018d611875565b611c2f602083018c611875565b611c3c604083018b611b8f565b611c49606083018a611b8f565b611c566080830189611bcb565b81810360a0830152611c688188611884565b905081810360c0830152611c7c8187611884565b905081810360e0830152611c9081866118e2565b9050611ca0610100830185611bad565b611cae610120830184611875565b9b9a5050505050505050505050565b6000604082019050611cd26000830185611875565b611cdf6020830184611b8f565b9392505050565b60006020820190508181036000830152611d008184611884565b905092915050565b60006020820190508181036000830152611d2281846118e2565b905092915050565b6000602082019050611d3f6000830184611940565b92915050565b6000602082019050611d5a6000830184611980565b92915050565b60006020820190508181036000830152611d7a818461198f565b905092915050565b60006020820190508181036000830152611d9b816119c8565b9050919050565b60006020820190508181036000830152611dbb816119eb565b9050919050565b60006020820190508181036000830152611ddb81611a0e565b9050919050565b60006020820190508181036000830152611dfb81611a31565b9050919050565b60006020820190508181036000830152611e1b81611a54565b9050919050565b60006020820190508181036000830152611e3b81611a77565b9050919050565b60006020820190508181036000830152611e5b81611a9a565b9050919050565b60006020820190508181036000830152611e7b81611abd565b9050919050565b60006020820190508181036000830152611e9b81611ae0565b9050919050565b60006020820190508181036000830152611ebb81611b03565b9050919050565b60006020820190508181036000830152611edb81611b26565b9050919050565b60006020820190508181036000830152611efb81611b49565b9050919050565b60006020820190508181036000830152611f1b81611b6c565b9050919050565b6000602082019050611f376000830184611b8f565b92915050565b600060a082019050611f526000830188611b8f565b611f5f6020830187611b8f565b611f6c6040830186611bad565b611f796060830185611bad565b611f866080830184611bcb565b9695505050505050565b6000602082019050611fa56000830184611bad565b92915050565b6000602082019050611fc06000830184611bcb565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006120758261226d565b91506120808361226d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120b5576120b4612399565b5b828201905092915050565b60006120cb82612287565b91506120d683612287565b92508267ffffffffffffffff038211156120f3576120f2612399565b5b828201905092915050565b60006121098261226d565b91506121148361226d565b925082612124576121236123c8565b5b828204905092915050565b600061213a8261226d565b91506121458361226d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561217e5761217d612399565b5b828202905092915050565b600061219482612277565b915061219f83612277565b92508163ffffffff04831182151516156121bc576121bb612399565b5b828202905092915050565b60006121d28261226d565b91506121dd8361226d565b9250828210156121f0576121ef612399565b5b828203905092915050565b600061220682612277565b915061221183612277565b92508282101561222457612223612399565b5b828203905092915050565b600061223a8261224d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006122a6826122ad565b9050919050565b60006122b88261224d565b9050919050565b60005b838110156122dd5780820151818401526020810190506122c2565b838111156122ec576000848401525b50505050565b60006122fd8261226d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156123305761232f612399565b5b600182019050919050565b600061234682612277565b915063ffffffff82141561235d5761235c612399565b5b600182019050919050565b60006123738261226d565b915061237e8361226d565b92508261238e5761238d6123c8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f546f6b656e54696d654c6f636b3a20616c6c207068617365732061726520726560008201527f6c65617365640000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20616d6f756e74206d75737420677265617460008201527f6572207468616e207a65726f0000000000000000000000000000000000000000602082015250565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20757365722061646472657373206973207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20756e6c6f636b206c656e677468206e6f7460008201527f206d617463680000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20756e6c6f636b2070657263656e74206e6f60008201527f74206d6174636820313030000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a206e65787420706861736520756e6176616960008201527f6c61626c65000000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20696e73756666696369656e742062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20666163746f72792061646472657373206960008201527f73207a65726f0000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f546f6b656e54696d654c6f636b3a20746f6b656e20616464726573732069732060008201527f7a65726f00000000000000000000000000000000000000000000000000000000602082015250565b6127ee8161222f565b81146127f957600080fd5b50565b61280581612241565b811461281057600080fd5b50565b61281c8161226d565b811461282757600080fd5b50565b61283381612277565b811461283e57600080fd5b50565b61284a81612287565b811461285557600080fd5b5056fea26469706673582212208155a936272f0cb78467548c31069afffb768028da4218a1943062717d82fe2764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063aa8c217c1161008c578063d6ec527011610066578063d6ec5270146101f4578063e090008014610212578063f8fcd15614610230578063fc0c546a14610257576100cf565b8063aa8c217c1461019a578063c00de5fc146101b8578063c45a0155146101d6576100cf565b80630b32dc5b146100d45780630b97bc86146101045780632a62a4b21461012257806338af3eed1461014057806345d30a171461015e57806386d1a69f1461017c575b600080fd5b6100ee60048036038101906100e991906116f4565b610275565b6040516100fb9190611d2a565b60405180910390f35b61010c6107ce565b6040516101199190611fab565b60405180910390f35b61012a6107ec565b6040516101379190611ce6565b60405180910390f35b610148610870565b6040516101559190611bf1565b60405180910390f35b61016661089a565b6040516101739190611f22565b60405180910390f35b6101846108a4565b6040516101919190611d2a565b60405180910390f35b6101a2610e84565b6040516101af9190611f22565b60405180910390f35b6101c0610e8e565b6040516101cd9190611d08565b60405180910390f35b6101de610f1a565b6040516101eb9190611bf1565b60405180910390f35b6101fc610f44565b6040516102099190611f90565b60405180910390f35b61021a610f5e565b6040516102279190611ce6565b60405180910390f35b610238610fe2565b60405161024e9a99989796959493929190611c0c565b60405180910390f35b61025f611062565b60405161026c9190611d45565b60405180910390f35b60008060019054906101000a900460ff168061029c575060008054906101000a900460ff16155b6102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d290611e22565b60405180910390fd5b60008060019054906101000a900460ff16159050801561032b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b848490508787905014610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a90611e42565b60405180910390fd5b600080600090505b868690508110156103f8578686828181106103bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103d4919061181c565b63ffffffff16826103e5919061206a565b9150806103f1906122f2565b905061037b565b506064811461043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043390611e62565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614156104ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a390611e02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16141561051c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051390611f02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16141561058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058390611ec2565b60405180910390fd5b600089116105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c690611da2565b60405180910390fd5b8b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600660146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508787600891906106cc92919061149d565b508585600991906106de92919061149d565b508860018190555060006002819055506000600a60006101000a81548163ffffffff021916908363ffffffff16021790555060088054905067ffffffffffffffff811115610755577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107835781602001602082028036833780820191505090505b5060079080519060200190610799929190611553565b50600192505080156107c05760008060016101000a81548160ff0219169083151502179055505b509998505050505050505050565b6000600660149054906101000a900467ffffffffffffffff16905090565b6060600980548060200260200160405190810160405280929190818152602001828054801561086657602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116108295790505b5050505050905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600254905090565b600080600880549050905080600a60009054906101000a900463ffffffff1663ffffffff1610610909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090090611d82565b60405180910390fd5b60016008600a60009054906101000a900463ffffffff1663ffffffff168154811061095d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661098d9190612189565b63ffffffff16600660149054906101000a900467ffffffffffffffff166109b491906120c0565b67ffffffffffffffff16421015610a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f790611e82565b60405180910390fd5b6000600a60009054906101000a900463ffffffff1663ffffffff16905060005b82600a60009054906101000a900463ffffffff1663ffffffff16108015610afb575060016008600a60009054906101000a900463ffffffff1663ffffffff1681548110610a96577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16610ac69190612189565b63ffffffff16600660149054906101000a900467ffffffffffffffff16610aed91906120c0565b67ffffffffffffffff164210155b15610c3d576000600184610b0f91906121c7565b600a60009054906101000a900463ffffffff1663ffffffff161415610b505781600254600154610b3f91906121c7565b610b4991906121c7565b9050610be8565b610be56009600a60009054906101000a900463ffffffff1663ffffffff1681548110610ba5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16606460015461108c9092919063ffffffff16565b90505b8082610bf4919061206a565b9150600a600081819054906101000a900463ffffffff1680929190610c189061233b565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050610a20565b6000610c47611062565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c7f9190611bf1565b60206040518083038186803b158015610c9757600080fd5b505afa158015610cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccf91906117f3565b905081811015610d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0b90611ea2565b60405180910390fd5b8160026000828254610d26919061206a565b92505081905550610d66610d38610870565b83610d41611062565b73ffffffffffffffffffffffffffffffffffffffff166111aa9092919063ffffffff16565b600042905060008490505b600a60009054906101000a900463ffffffff1663ffffffff16811015610e18578160078281548110610dcc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080610e11906122f2565b9050610d71565b507f76264100b4b20aa06c294636c2e40aaf398c3490112488330659f4577010713f83600254866001600a60009054906101000a900463ffffffff16610e5e91906121fb565b85604051610e70959493929190611f3d565b60405180910390a160019550505050505090565b6000600154905090565b60606007805480602002602001604051908101604052809291908181526020018280548015610f1057602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610ecb5790505b5050505050905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60009054906101000a900463ffffffff16905090565b60606008805480602002602001604051908101604052809291908181526020018280548015610fd857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610f9b5790505b5050505050905090565b60008060008060006060806060600080610ffa610870565b611002611062565b61100a610e84565b61101261089a565b61101a6107ce565b611022610f5e565b61102a6107ec565b611032610e8e565b61103a610f44565b611042610f1a565b995099509950995099509950995099509950995090919293949596979899565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080826fffffffffffffffffffffffffffffffff16856110ad91906120fe565b90506000836fffffffffffffffffffffffffffffffff16866110cf9190612368565b90506000846fffffffffffffffffffffffffffffffff16866110f191906120fe565b90506000856fffffffffffffffffffffffffffffffff16876111139190612368565b9050856fffffffffffffffffffffffffffffffff168184611134919061212f565b61113e91906120fe565b828461114a919061212f565b8286611156919061212f565b886fffffffffffffffffffffffffffffffff168588611175919061212f565b61117f919061212f565b611189919061206a565b611193919061206a565b61119d919061206a565b9450505050509392505050565b61122b8363a9059cbb60e01b84846040516024016111c9929190611cbd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611230565b505050565b6000611292826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112f79092919063ffffffff16565b90506000815111156112f257808060200190518101906112b291906117ca565b6112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e890611dc2565b60405180910390fd5b5b505050565b6060611306848460008561130f565b90509392505050565b606082471015611354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134b90611de2565b60405180910390fd5b61135d85611423565b61139c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139390611ee2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516113c59190611bda565b60006040518083038185875af1925050503d8060008114611402576040519150601f19603f3d011682016040523d82523d6000602084013e611407565b606091505b5091509150611417828286611436565b92505050949350505050565b600080823b905060008111915050919050565b6060831561144657829050611496565b6000835111156114595782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148d9190611d60565b60405180910390fd5b9392505050565b828054828255906000526020600020906007016008900481019282156115425791602002820160005b8382111561151057833563ffffffff1683826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026114c6565b80156115405782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611510565b505b50905061154f919061160f565b5090565b828054828255906000526020600020906003016004900481019282156115fe5791602002820160005b838211156115c857835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550926020019260080160208160070104928301926001030261157c565b80156115fc5782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026115c8565b505b50905061160b919061160f565b5090565b5b80821115611628576000816000905550600101611610565b5090565b60008135905061163b816127e5565b92915050565b60008083601f84011261165357600080fd5b8235905067ffffffffffffffff81111561166c57600080fd5b60208301915083602082028301111561168457600080fd5b9250929050565b60008151905061169a816127fc565b92915050565b6000813590506116af81612813565b92915050565b6000815190506116c481612813565b92915050565b6000813590506116d98161282a565b92915050565b6000813590506116ee81612841565b92915050565b600080600080600080600080600060e08a8c03121561171257600080fd5b60006117208c828d0161162c565b99505060206117318c828d0161162c565b98505060406117428c828d0161162c565b97505060606117538c828d016116a0565b96505060808a013567ffffffffffffffff81111561177057600080fd5b61177c8c828d01611641565b955095505060a08a013567ffffffffffffffff81111561179b57600080fd5b6117a78c828d01611641565b935093505060c06117ba8c828d016116df565b9150509295985092959850929598565b6000602082840312156117dc57600080fd5b60006117ea8482850161168b565b91505092915050565b60006020828403121561180557600080fd5b6000611813848285016116b5565b91505092915050565b60006020828403121561182e57600080fd5b600061183c848285016116ca565b91505092915050565b60006118518383611b9e565b60208301905092915050565b60006118698383611bbc565b60208301905092915050565b61187e8161222f565b82525050565b600061188f82611fe6565b611899818561202c565b93506118a483611fc6565b8060005b838110156118d55781516118bc8882611845565b97506118c783612012565b9250506001810190506118a8565b5085935050505092915050565b60006118ed82611ff1565b6118f7818561203d565b935061190283611fd6565b8060005b8381101561193357815161191a888261185d565b97506119258361201f565b925050600181019050611906565b5085935050505092915050565b61194981612241565b82525050565b600061195a82611ffc565b611964818561204e565b93506119748185602086016122bf565b80840191505092915050565b6119898161229b565b82525050565b600061199a82612007565b6119a48185612059565b93506119b48185602086016122bf565b6119bd816123f7565b840191505092915050565b60006119d5602683612059565b91506119e082612408565b604082019050919050565b60006119f8602c83612059565b9150611a0382612457565b604082019050919050565b6000611a1b602a83612059565b9150611a26826124a6565b604082019050919050565b6000611a3e602683612059565b9150611a49826124f5565b604082019050919050565b6000611a61602383612059565b9150611a6c82612544565b604082019050919050565b6000611a84602e83612059565b9150611a8f82612593565b604082019050919050565b6000611aa7602683612059565b9150611ab2826125e2565b604082019050919050565b6000611aca602b83612059565b9150611ad582612631565b604082019050919050565b6000611aed602583612059565b9150611af882612680565b604082019050919050565b6000611b10602383612059565b9150611b1b826126cf565b604082019050919050565b6000611b33602683612059565b9150611b3e8261271e565b604082019050919050565b6000611b56601d83612059565b9150611b618261276d565b602082019050919050565b6000611b79602483612059565b9150611b8482612796565b604082019050919050565b611b988161226d565b82525050565b611ba781612277565b82525050565b611bb681612277565b82525050565b611bc581612287565b82525050565b611bd481612287565b82525050565b6000611be6828461194f565b915081905092915050565b6000602082019050611c066000830184611875565b92915050565b600061014082019050611c22600083018d611875565b611c2f602083018c611875565b611c3c604083018b611b8f565b611c49606083018a611b8f565b611c566080830189611bcb565b81810360a0830152611c688188611884565b905081810360c0830152611c7c8187611884565b905081810360e0830152611c9081866118e2565b9050611ca0610100830185611bad565b611cae610120830184611875565b9b9a5050505050505050505050565b6000604082019050611cd26000830185611875565b611cdf6020830184611b8f565b9392505050565b60006020820190508181036000830152611d008184611884565b905092915050565b60006020820190508181036000830152611d2281846118e2565b905092915050565b6000602082019050611d3f6000830184611940565b92915050565b6000602082019050611d5a6000830184611980565b92915050565b60006020820190508181036000830152611d7a818461198f565b905092915050565b60006020820190508181036000830152611d9b816119c8565b9050919050565b60006020820190508181036000830152611dbb816119eb565b9050919050565b60006020820190508181036000830152611ddb81611a0e565b9050919050565b60006020820190508181036000830152611dfb81611a31565b9050919050565b60006020820190508181036000830152611e1b81611a54565b9050919050565b60006020820190508181036000830152611e3b81611a77565b9050919050565b60006020820190508181036000830152611e5b81611a9a565b9050919050565b60006020820190508181036000830152611e7b81611abd565b9050919050565b60006020820190508181036000830152611e9b81611ae0565b9050919050565b60006020820190508181036000830152611ebb81611b03565b9050919050565b60006020820190508181036000830152611edb81611b26565b9050919050565b60006020820190508181036000830152611efb81611b49565b9050919050565b60006020820190508181036000830152611f1b81611b6c565b9050919050565b6000602082019050611f376000830184611b8f565b92915050565b600060a082019050611f526000830188611b8f565b611f5f6020830187611b8f565b611f6c6040830186611bad565b611f796060830185611bad565b611f866080830184611bcb565b9695505050505050565b6000602082019050611fa56000830184611bad565b92915050565b6000602082019050611fc06000830184611bcb565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006120758261226d565b91506120808361226d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120b5576120b4612399565b5b828201905092915050565b60006120cb82612287565b91506120d683612287565b92508267ffffffffffffffff038211156120f3576120f2612399565b5b828201905092915050565b60006121098261226d565b91506121148361226d565b925082612124576121236123c8565b5b828204905092915050565b600061213a8261226d565b91506121458361226d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561217e5761217d612399565b5b828202905092915050565b600061219482612277565b915061219f83612277565b92508163ffffffff04831182151516156121bc576121bb612399565b5b828202905092915050565b60006121d28261226d565b91506121dd8361226d565b9250828210156121f0576121ef612399565b5b828203905092915050565b600061220682612277565b915061221183612277565b92508282101561222457612223612399565b5b828203905092915050565b600061223a8261224d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006122a6826122ad565b9050919050565b60006122b88261224d565b9050919050565b60005b838110156122dd5780820151818401526020810190506122c2565b838111156122ec576000848401525b50505050565b60006122fd8261226d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156123305761232f612399565b5b600182019050919050565b600061234682612277565b915063ffffffff82141561235d5761235c612399565b5b600182019050919050565b60006123738261226d565b915061237e8361226d565b92508261238e5761238d6123c8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f546f6b656e54696d654c6f636b3a20616c6c207068617365732061726520726560008201527f6c65617365640000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20616d6f756e74206d75737420677265617460008201527f6572207468616e207a65726f0000000000000000000000000000000000000000602082015250565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20757365722061646472657373206973207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20756e6c6f636b206c656e677468206e6f7460008201527f206d617463680000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20756e6c6f636b2070657263656e74206e6f60008201527f74206d6174636820313030000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a206e65787420706861736520756e6176616960008201527f6c61626c65000000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20696e73756666696369656e742062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b3a20666163746f72792061646472657373206960008201527f73207a65726f0000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f546f6b656e54696d654c6f636b3a20746f6b656e20616464726573732069732060008201527f7a65726f00000000000000000000000000000000000000000000000000000000602082015250565b6127ee8161222f565b81146127f957600080fd5b50565b61280581612241565b811461281057600080fd5b50565b61281c8161226d565b811461282757600080fd5b50565b61283381612277565b811461283e57600080fd5b50565b61284a81612287565b811461285557600080fd5b5056fea26469706673582212208155a936272f0cb78467548c31069afffb768028da4218a1943062717d82fe2764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "release()": {
        "details": "User (sender) can release unlocked tokens by calling this function. This function will release locked tokens from multiple lock phases that meets unlock requirements Reverts in the following cases: - No tokens to be withdrawn including:     + All lock phases are already released     + Do not meet next unlock requirements - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.",
        "returns": {
          "_0": "Return `true` if succeeds, otherwise `false`"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address,uint256,uint32[],uint32[],uint64)": {
        "notice": "Register a new lock for a user Reverts in the following cases: - Duplicated lock id for a user. - `lockDurations` and `unlockPercents` length don't match. - `unlockPercents` sum is not equal to 100 (100%)."
      },
      "release()": {
        "notice": "Release unlocked tokens to user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 824,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_amount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 827,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_releasedAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 830,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_version",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 833,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_user",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 836,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_token",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 839,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_factory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 842,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_startDate",
        "offset": 20,
        "slot": "6",
        "type": "t_uint64"
      },
      {
        "astId": 846,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_releaseDates",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 850,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_lockDurations",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 854,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_releasePercents",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 857,
        "contract": "contracts/token/TokenTimeLock.sol:TokenTimeLock",
        "label": "_nextReleaseIdx",
        "offset": 0,
        "slot": "10",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}