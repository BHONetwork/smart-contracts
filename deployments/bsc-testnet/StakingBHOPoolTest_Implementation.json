{
  "address": "0x65a0736a5E323cB8C731973f464372bB66Ee57ec",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "stakingId",
          "type": "uint64"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "stakingId",
          "type": "uint64"
        }
      ],
      "name": "EnterStaking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "stakingId",
          "type": "uint64"
        }
      ],
      "name": "LeaveStaking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "programId",
          "type": "uint64"
        }
      ],
      "name": "RegisterProgram",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APY_PROGRAM_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APY_PROGRAM_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECEMBER_INTEREST_DATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMERGENCY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NOVEMBER_INTEREST_DATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OCTOBER_INTEREST_DATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROGRAM_AUTHOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMAINDER_COLLECT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEPTEMBER_INTEREST_DATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "stakingId",
          "type": "uint64"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "programId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "enterStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "stakingId",
          "type": "uint32"
        }
      ],
      "name": "leaveStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextProgramId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "nextStakingId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "programId",
          "type": "uint64"
        }
      ],
      "name": "programInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "interestDates",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "apy",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isExist",
              "type": "bool"
            }
          ],
          "internalType": "struct StakingBHOPoolTest.ProgramInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "apy",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "interestDates",
          "type": "uint256[]"
        }
      ],
      "name": "registerProgram",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "stakingId",
          "type": "uint64"
        }
      ],
      "name": "stakingInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "programId",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isWithdrawn",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isExist",
              "type": "bool"
            }
          ],
          "internalType": "struct StakingBHOPoolTest.StakingInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRemainingTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3d74a644b75bb23802e34bedd36b3e136097e202dd3ebd752d11988580dee3e",
  "receipt": {
    "to": null,
    "from": "0x08687a0b65F5d33C374C98aBaC17010d1640C7FD",
    "contractAddress": "0x65a0736a5E323cB8C731973f464372bB66Ee57ec",
    "transactionIndex": 1,
    "gasUsed": "3430979",
    "logsBloom": "0x
    "blockHash": "0x63c49ae53a40c8874bef4e910a6d53a3549b0ece5bd3dee3ae260b3c6b657330",
    "transactionHash": "0xa3d74a644b75bb23802e34bedd36b3e136097e202dd3ebd752d11988580dee3e",
    "logs": [],
    "blockNumber": 12439883,
    "cumulativeGasUsed": "3451979",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e91b4b40dbacabc64903e3b11684360b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"stakingId\",\"type\":\"uint64\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"stakingId\",\"type\":\"uint64\"}],\"name\":\"EnterStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"stakingId\",\"type\":\"uint64\"}],\"name\":\"LeaveStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"programId\",\"type\":\"uint64\"}],\"name\":\"RegisterProgram\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY_PROGRAM_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APY_PROGRAM_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECEMBER_INTEREST_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOVEMBER_INTEREST_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OCTOBER_INTEREST_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROGRAM_AUTHOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMAINDER_COLLECT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEPTEMBER_INTEREST_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"stakingId\",\"type\":\"uint64\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"programId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"stakingId\",\"type\":\"uint32\"}],\"name\":\"leaveStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProgramId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"nextStakingId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"programId\",\"type\":\"uint64\"}],\"name\":\"programInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"interestDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"internalType\":\"struct StakingBHOPoolTest.ProgramInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"interestDates\",\"type\":\"uint256[]\"}],\"name\":\"registerProgram\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"stakingId\",\"type\":\"uint64\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"programId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"internalType\":\"struct StakingBHOPoolTest.StakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainingTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyWithdraw(address,uint64)\":{\"details\":\"Withdraw staked amount to users. This is only for emergency, i.e when mistakes happen. And only address that has EMERGENCY_ROLE can withdraw\",\"params\":{\"staker\":\"staker\",\"stakingId\":\"staking identifier\"}},\"enterStaking(uint32,uint256)\":{\"details\":\"Users can become a staker to earn interest using this function. Before entering staking, users must `approve` this staking contract to transfer their tokens to this contract for lockup.\",\"params\":{\"amount\":\"Amount of tokens users want to stake\",\"programId\":\"Staking program described by BHOLDUS. Must either 1 or 2\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address)\":{\"details\":\"Since this staking contract is deployed with proxy approach, this is its constructor\",\"params\":{\"admin\":\"address with admin rights. This address has highest power\",\"feeCollector\":\"address that collects fee when users leave staking and withdraw interests\",\"token\":\"token contract\"}},\"leaveStaking(uint32)\":{\"details\":\"Users can withdraw staked amount and reward using this function. Users can only withdraw if interest date is sastisfied\",\"params\":{\"stakingId\":\"Staking identifiier\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawRemainingTokens()\":{\"details\":\"Withdraw remaining tokens to sender. This is used when staking programs are all over, and devs want to withdraw remaining tokens. Only sender with REMAINDER_COLLECT_ROLE can proceed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/StakingBHOPoolTest.sol\":\"StakingBHOPoolTest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\n                    \\\"upgradeTo(address)\\\",\\n                    oldImplementation\\n                )\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _setImplementation(newImplementation);\\n            emit Upgraded(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(\\n            AddressUpgradeable.isContract(newBeacon),\\n            \\\"ERC1967: new beacon is not a contract\\\"\\n        );\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /*\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xda94a85ba0a26d49cd327cc63b8b54fa5dde8f5d1c5f3c942237096ef896eff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Base contract for building openzeppelin-upgrades compatible implementations for the {ERC1967Proxy}. It includes\\n * publicly available upgrade functions that are called by the plugin and by the secure upgrade mechanism to verify\\n * continuation of the upgradability.\\n *\\n * The {_authorizeUpgrade} function MUST be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6014667ab9e057c1810fcb7ef844123c581a34eb8dafc1aaa15f4e0f704620b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/token/BEP20/IBEP20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x360996a6c627727743f162951aab28f043b86897f22164c33ac174550beb90ef\",\"license\":\"MIT\"},\"contracts/token/CoinBHO.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./BEP20/IBEP20.sol\\\";\\n\\ncontract CoinBHO is OwnableUpgradeable, UUPSUpgradeable, IBEP20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    uint8 private _decimals;\\n    string private _symbol;\\n    string private _name;\\n\\n    function initialize() public initializer returns (bool) {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        _name = \\\"Bholdus Token\\\";\\n        _symbol = \\\"BHO\\\";\\n        _decimals = 18;\\n        _totalSupply = 10000000000 * (10**_decimals);\\n        _balances[msg.sender] = _totalSupply;\\n\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view override returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-totalSupply}.\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyOwner\\n    {}\\n\\n    /**\\n     * @dev See {BEP20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {BEP20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"BEP20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"BEP20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\n     * the total supply.\\n     *\\n     * Requirements\\n     *\\n     * - `msg.sender` must be the token owner\\n     */\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\n        _mint(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burn `amount` tokens\\n     *\\n     * Requirements\\n     * - `msg.sender` must have a balance of at least `amount`\\n     */\\n    function burn(uint256 amount) public returns (bool) {\\n        _burn(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burn `amount` tokens of `account` from allowed sender\\n     */\\n    function burnFrom(address account, uint256 amount) public returns (bool) {\\n        _burnFrom(account, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"BEP20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"BEP20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(\\n            account,\\n            _msgSender(),\\n            _allowances[account][_msgSender()].sub(\\n                amount,\\n                \\\"BEP20: burn amount exceeds allowance\\\"\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x580f85cfcdae1853648b77404f87ce98de16b8a442c3550681913640c770c4b2\",\"license\":\"MIT\"},\"contracts/token/StakingBHOPoolTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./CoinBHO.sol\\\";\\n\\ncontract StakingBHOPoolTest is\\n    Initializable,\\n    ContextUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    struct StakingInfo {\\n        uint256 amount;\\n        uint256 startDate;\\n        uint32 programId;\\n        bool isWithdrawn;\\n        bool isExist;\\n    }\\n\\n    struct ProgramInfo {\\n        uint256[] interestDates;\\n        uint256 apy;\\n        bool isExist;\\n    }\\n\\n    mapping(address => uint64) private _nextStakingIds;\\n    mapping(address => mapping(uint64 => StakingInfo)) private _stakingInfos;\\n    mapping(uint64 => ProgramInfo) private _programInfos;\\n    uint64 private _nextProgramId;\\n    address private _feeCollector;\\n    CoinBHO private _token;\\n\\n    event RegisterProgram(address indexed who, uint64 indexed programId);\\n    event EnterStaking(\\n        address indexed who,\\n        uint256 amount,\\n        uint64 indexed stakingId\\n    );\\n    event LeaveStaking(\\n        address indexed who,\\n        uint256 reward,\\n        uint256 totalAmount,\\n        uint64 indexed stakingId\\n    );\\n    event EmergencyWithdraw(\\n        address indexed admin,\\n        address indexed who,\\n        uint256 amount,\\n        uint64 indexed stakingId\\n    );\\n\\n    // Interest date at the end of september\\n    uint256 public constant SEPTEMBER_INTEREST_DATE = 1633046400;\\n    // Interest date at the end of october\\n    uint256 public constant OCTOBER_INTEREST_DATE = 1635724800;\\n    // Interest date at the end of november\\n    uint256 public constant NOVEMBER_INTEREST_DATE = 1638316800;\\n    // Interest date at the end of december\\n    uint256 public constant DECEMBER_INTEREST_DATE = 1640995200;\\n\\n    // APY of Program 1 in basis points\\n    uint256 public constant APY_PROGRAM_1 = 5000;\\n    // APY of Program 2 in basis points\\n    uint256 public constant APY_PROGRAM_2 = 3000;\\n\\n    // Useful constants\\n    uint256 private constant SECONDS_PER_DAY = 60;\\n\\n    // Access Control roles\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n    bytes32 public constant PROGRAM_AUTHOR_ROLE =\\n        keccak256(\\\"PROGRAM_AUTHOR_ROLE\\\");\\n    bytes32 public constant REMAINDER_COLLECT_ROLE =\\n        keccak256(\\\"REMAINDER_COLLECT_ROLE\\\");\\n\\n    function nextStakingId(address staker) public view returns (uint64) {\\n        return _nextStakingIds[staker];\\n    }\\n\\n    function stakingInfo(address staker, uint64 stakingId)\\n        public\\n        view\\n        returns (StakingInfo memory)\\n    {\\n        return _stakingInfos[staker][stakingId];\\n    }\\n\\n    function nextProgramId() public view returns (uint64) {\\n        return _nextProgramId;\\n    }\\n\\n    function programInfo(uint64 programId)\\n        public\\n        view\\n        returns (ProgramInfo memory)\\n    {\\n        return _programInfos[programId];\\n    }\\n\\n    /**\\n     * @dev Since this staking contract is deployed with proxy approach,\\n     * this is its constructor\\n     *\\n     * @param admin address with admin rights. This address has highest power\\n     * @param token token contract\\n     * @param feeCollector address that collects fee when users leave staking and withdraw interests\\n     */\\n    function initialize(\\n        address admin,\\n        address token,\\n        address feeCollector\\n    ) public initializer returns (bool) {\\n        ContextUpgradeable.__Context_init_unchained();\\n        AccessControlUpgradeable.__AccessControl_init_unchained();\\n\\n        AccessControlUpgradeable._setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        AccessControlUpgradeable._setupRole(EMERGENCY_ROLE, admin);\\n        AccessControlUpgradeable._setupRole(PROGRAM_AUTHOR_ROLE, admin);\\n        AccessControlUpgradeable._setupRole(REMAINDER_COLLECT_ROLE, admin);\\n\\n        _feeCollector = feeCollector;\\n        _token = CoinBHO(token);\\n\\n        // Two default staking programs\\n        uint256[] memory interestDates1 = new uint256[](1);\\n        interestDates1[0] = DECEMBER_INTEREST_DATE;\\n        _programInfos[0] = ProgramInfo({\\n            apy: APY_PROGRAM_1,\\n            interestDates: interestDates1,\\n            isExist: true\\n        });\\n\\n        uint256[] memory interestDates2 = new uint256[](4);\\n        interestDates2[0] = SEPTEMBER_INTEREST_DATE;\\n        interestDates2[1] = OCTOBER_INTEREST_DATE;\\n        interestDates2[2] = NOVEMBER_INTEREST_DATE;\\n        interestDates2[3] = DECEMBER_INTEREST_DATE;\\n        _programInfos[1] = ProgramInfo({\\n            apy: APY_PROGRAM_2,\\n            interestDates: interestDates2,\\n            isExist: true\\n        });\\n        _nextProgramId = 2;\\n        return true;\\n    }\\n\\n    function registerProgram(uint256 apy, uint256[] memory interestDates)\\n        public\\n        returns (bool)\\n    {\\n        require(\\n            hasRole(PROGRAM_AUTHOR_ROLE, _msgSender()),\\n            \\\"Staking: program author role required\\\"\\n        );\\n        require(\\n            interestDates.length > 0,\\n            \\\"Staking: invalid program interest dates\\\"\\n        );\\n\\n        uint64 programId = _nextProgramId;\\n        _programInfos[programId] = ProgramInfo({\\n            apy: apy,\\n            interestDates: interestDates,\\n            isExist: true\\n        });\\n        _nextProgramId++;\\n\\n        emit RegisterProgram(_msgSender(), programId);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal utility function to calculate reward.\\n     *\\n     * @param amount staked amount\\n     * @param startDate date that users start staking\\n     * @param interestDate date that users can withdraw their interest along with staked amount\\n     * @param apy Annual percentage yield\\n     */\\n    function _calculateReward(\\n        uint256 amount,\\n        uint256 startDate,\\n        uint256 interestDate,\\n        uint256 withdrawDate,\\n        uint256 apy\\n    ) private pure returns (uint256) {\\n        require(startDate < interestDate, \\\"Staking: invalid start date\\\");\\n        require(withdrawDate >= interestDate, \\\"Staking: invalid withdraw date\\\");\\n\\n        uint256 reward;\\n        uint256 stakingDurationInDays = (interestDate - startDate) /\\n            SECONDS_PER_DAY;\\n        if (stakingDurationInDays < 1) {\\n            // Users that stake at the day before interest date\\n            if ((withdrawDate - startDate) / SECONDS_PER_DAY < 1) {\\n                // Users must wait for 24 hours to receive 1-day interest\\n                revert(\\\"Staking: withrawal required 24 hours\\\");\\n            } else {\\n                reward = (amount * apy * 1) / (365 * 10_000);\\n            }\\n        } else {\\n            reward = (amount * apy * stakingDurationInDays) / (365 * 10_000);\\n        }\\n\\n        return reward;\\n    }\\n\\n    /**\\n     * @dev Users can become a staker to earn interest using this function.\\n     * Before entering staking, users must `approve` this staking contract to transfer their tokens to this contract for lockup.\\n     *\\n     * @param programId Staking program described by BHOLDUS. Must either 1 or 2\\n     * @param amount Amount of tokens users want to stake\\n     */\\n    function enterStaking(uint32 programId, uint256 amount)\\n        public\\n        returns (bool)\\n    {\\n        ProgramInfo memory _programInfo = _programInfos[programId];\\n        require(_programInfo.isExist, \\\"Staking: program not exists\\\");\\n        require(\\n            block.timestamp <\\n                _programInfo.interestDates[\\n                    _programInfo.interestDates.length - 1\\n                ],\\n            \\\"Staking: program is over\\\"\\n        );\\n\\n        _token.transferFrom(_msgSender(), address(this), amount);\\n\\n        uint64 stakingId = _nextStakingIds[_msgSender()];\\n        _stakingInfos[_msgSender()][stakingId] = StakingInfo({\\n            amount: amount,\\n            startDate: block.timestamp,\\n            programId: programId,\\n            isExist: true,\\n            isWithdrawn: false\\n        });\\n\\n        _nextStakingIds[_msgSender()]++;\\n\\n        emit EnterStaking(_msgSender(), amount, stakingId);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Users can withdraw staked amount and reward using this function.\\n     * Users can only withdraw if interest date is sastisfied\\n     *\\n     * @param stakingId Staking identifiier\\n     */\\n    function leaveStaking(uint32 stakingId) public returns (bool) {\\n        StakingInfo storage _stakingInfo = _stakingInfos[_msgSender()][\\n            stakingId\\n        ];\\n        require(_stakingInfo.isExist, \\\"Staking: staking not exists\\\");\\n        require(!_stakingInfo.isWithdrawn, \\\"Staking: already withdrawn\\\");\\n\\n        uint256 reward;\\n        uint256 interestDate;\\n        ProgramInfo memory _programInfo = _programInfos[_stakingInfo.programId];\\n\\n        for (uint256 i = 0; i < _programInfo.interestDates.length; ++i) {\\n            if (_stakingInfo.startDate < _programInfo.interestDates[i]) {\\n                interestDate = _programInfo.interestDates[i];\\n                break;\\n            }\\n        }\\n\\n        reward = _calculateReward(\\n            _stakingInfo.amount,\\n            _stakingInfo.startDate,\\n            interestDate,\\n            block.timestamp,\\n            _programInfo.apy\\n        );\\n\\n        _token.transfer(_feeCollector, reward / 10);\\n        _token.transfer(_msgSender(), _stakingInfo.amount + reward);\\n        _stakingInfo.isWithdrawn = true;\\n\\n        emit LeaveStaking(\\n            _msgSender(),\\n            reward,\\n            _stakingInfo.amount + reward,\\n            stakingId\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Withdraw staked amount to users.\\n     * This is only for emergency, i.e when mistakes happen.\\n     * And only address that has EMERGENCY_ROLE can withdraw\\n     *\\n     * @param staker staker\\n     * @param stakingId staking identifier\\n     */\\n    function emergencyWithdraw(address staker, uint64 stakingId)\\n        public\\n        returns (bool)\\n    {\\n        require(\\n            hasRole(EMERGENCY_ROLE, _msgSender()),\\n            \\\"Staking: emergency role required\\\"\\n        );\\n        StakingInfo storage _stakingInfo = _stakingInfos[staker][stakingId];\\n        require(_stakingInfo.isExist, \\\"Staking: staking not exists\\\");\\n        require(!_stakingInfo.isWithdrawn, \\\"Staking: already withdrawn\\\");\\n\\n        _token.transfer(staker, _stakingInfo.amount);\\n\\n        _stakingInfo.isWithdrawn = true;\\n\\n        emit EmergencyWithdraw(\\n            _msgSender(),\\n            staker,\\n            _stakingInfo.amount,\\n            stakingId\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Withdraw remaining tokens to sender.\\n     * This is used when staking programs are all over, and devs want to withdraw remaining tokens.\\n     * Only sender with REMAINDER_COLLECT_ROLE can proceed.\\n     */\\n    function withdrawRemainingTokens() public returns (bool) {\\n        require(\\n            hasRole(REMAINDER_COLLECT_ROLE, _msgSender()),\\n            \\\"Staking: remainder collect role required\\\"\\n        );\\n\\n        _token.transfer(_msgSender(), _token.balanceOf(address(this)));\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x38e367b19c308938ca5dae99a54d3461f50b9e810962602b3530e4b617fd1c24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613d6d806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063717f24c6116100de578063a217fddf11610097578063c414dc7111610071578063c414dc71146104c5578063ce7cb3cf146104f5578063d547741f14610525578063fc7be740146105415761018e565b8063a217fddf14610459578063ba71b33014610477578063c0c53b8b146104955761018e565b8063717f24c6146103815780637be83350146103b157806385b3bb70146103cf5780638afbf669146103ed57806391d148541461040b5780639bb318001461043b5761018e565b80632f2ff15d1161014b578063329f798911610125578063329f7989146102e757806336568abe146103175780634944d8361461033357806368dd20d1146103635761018e565b80632f2ff15d1461028f578063313134f5146102ab57806331d925e5146102c95761018e565b806301ffc9a7146101935780630d6a3634146101c357806320df4359146101e1578063248a9ca3146101ff57806329de65331461022f5780632dd99f061461025f575b600080fd5b6101ad60048036038101906101a89190612c37565b61055f565b6040516101ba9190613260565b60405180910390f35b6101cb6105d9565b6040516101d891906134b5565b60405180910390f35b6101e96105df565b6040516101f6919061327b565b60405180910390f35b61021960048036038101906102149190612bd2565b610603565b604051610226919061327b565b60405180910390f35b61024960048036038101906102449190612cdd565b610623565b6040516102569190613260565b60405180910390f35b61027960048036038101906102749190612b6d565b610b0c565b604051610286919061349a565b60405180910390f35b6102a960048036038101906102a49190612bfb565b610bfb565b005b6102b3610c24565b6040516102c091906134b5565b60405180910390f35b6102d1610c2c565b6040516102de919061327b565b60405180910390f35b61030160048036038101906102fc9190612d06565b610c50565b60405161030e9190613260565b60405180910390f35b610331600480360381019061032c9190612bfb565b61110c565b005b61034d60048036038101906103489190612c89565b61118f565b60405161035a9190613260565b60405180910390f35b61036b61139c565b60405161037891906134b5565b60405180910390f35b61039b60048036038101906103969190612b6d565b6113a2565b6040516103a89190613260565b60405180910390f35b6103b9611676565b6040516103c691906134b5565b60405180910390f35b6103d761167e565b6040516103e491906134b5565b60405180910390f35b6103f5611686565b6040516104029190613260565b60405180910390f35b61042560048036038101906104209190612bfb565b611860565b6040516104329190613260565b60405180910390f35b6104436118cb565b60405161045091906134b5565b60405180910390f35b6104616118d3565b60405161046e919061327b565b60405180910390f35b61047f6118da565b60405161048c91906134f9565b60405180910390f35b6104af60048036038101906104aa9190612b1e565b6118f8565b6040516104bc9190613260565b60405180910390f35b6104df60048036038101906104da9190612af5565b611e92565b6040516104ec91906134f9565b60405180910390f35b61050f600480360381019061050a9190612d42565b611eef565b60405161051c9190613478565b60405180910390f35b61053f600480360381019061053a9190612bfb565b611fad565b005b610549611fd6565b604051610556919061327b565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d257506105d182611ffa565b5b9050919050565b61138881565b7fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b2681565b600060656000838152602001908152602001600020600101549050919050565b60008060986000610632612064565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1667ffffffffffffffff16815260200190815260200160002090508060020160059054906101000a900460ff166106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d7906133f8565b60405180910390fd5b8060020160049054906101000a900460ff1615610732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072990613358565b60405180910390fd5b6000806000609960008560020160009054906101000a900463ffffffff1663ffffffff1667ffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054806020026020016040519081016040528092919081815260200182805480156107c857602002820191906000526020600020905b8154815260200190600101908083116107b4575b50505050508152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905060005b8160000151518110156108b55781600001518181518110610845577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151856001015410156108a45781600001518181518110610895577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015192506108b5565b806108ae9061380a565b90506107fb565b506108cf846000015485600101548442856020015161206c565b9250609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609a60089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8661093f919061361b565b6040518363ffffffff1660e01b815260040161095c929190613237565b602060405180830381600087803b15801561097657600080fd5b505af115801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae9190612ba9565b50609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6109f5612064565b858760000154610a0591906135c5565b6040518363ffffffff1660e01b8152600401610a22929190613237565b602060405180830381600087803b158015610a3c57600080fd5b505af1158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a749190612ba9565b5060018460020160046101000a81548160ff0219169083151502179055508563ffffffff16610aa1612064565b73ffffffffffffffffffffffffffffffffffffffff167fb2c178054742cda76a927f7bb8569dc58843851423dc2cf2c6f96b8696f59ccc85868860000154610ae991906135c5565b604051610af79291906134d0565b60405180910390a36001945050505050919050565b610b146128f1565b609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900460ff161515151581526020016002820160059054906101000a900460ff161515151581525050905092915050565b610c0482610603565b610c1581610c10612064565b6121d7565b610c1f8383612274565b505050565b63617f2e0081565b7fdc484f3f9843e4bdd5b3c0124f7e4faa7a7a7c643906a9d119793b07afadbabc81565b600080609960008563ffffffff1667ffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610cd057602002820191906000526020600020905b815481526020019060010190808311610cbc575b50505050508152602001600182015481526020016002820160009054906101000a900460ff16151515158152505090508060400151610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b90613458565b60405180910390fd5b80600001516001826000015151610d5b91906136a6565b81518110610d92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101514210610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd290613338565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd610e21612064565b30866040518463ffffffff1660e01b8152600401610e4193929190613200565b602060405180830381600087803b158015610e5b57600080fd5b505af1158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190612ba9565b50600060976000610ea2612064565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1690506040518060a001604052808581526020014281526020018663ffffffff1681526020016000151581526020016001151581525060986000610f32612064565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160046101000a81548160ff02191690831515021790555060808201518160020160056101000a81548160ff0219169083151502179055509050506097600061101b612064565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff168092919061107990613853565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550508067ffffffffffffffff166110b3612064565b73ffffffffffffffffffffffffffffffffffffffff167f05f25f069643b90644393551a3680aeafacaad4bb1288736d4160fb658911993866040516110f891906134b5565b60405180910390a360019250505092915050565b611114612064565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117890613438565b60405180910390fd5b61118b8282612355565b5050565b60006111c27fdc484f3f9843e4bdd5b3c0124f7e4faa7a7a7c643906a9d119793b07afadbabc6111bd612064565b611860565b611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f890613398565b60405180910390fd5b6000825111611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c90613418565b60405180910390fd5b6000609a60009054906101000a900467ffffffffffffffff169050604051806060016040528084815260200185815260200160011515815250609960008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906112c192919061292a565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050609a600081819054906101000a900467ffffffffffffffff168092919061131590613853565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550508067ffffffffffffffff1661134f612064565b73ffffffffffffffffffffffffffffffffffffffff167fa68210e0f22afdeeddcb6bceece4ccdaea118e8af32ed63f3072d79da309c16360405160405180910390a3600191505092915050565b610bb881565b60006113d57fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b266113d0612064565b611860565b611414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140b906133d8565b60405180910390fd5b6000609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508060020160059054906101000a900460ff166114cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c4906133f8565b60405180910390fd5b8060020160049054906101000a900460ff161561151f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151690613358565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8583600001546040518363ffffffff1660e01b8152600401611580929190613237565b602060405180830381600087803b15801561159a57600080fd5b505af11580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d29190612ba9565b5060018160020160046101000a81548160ff0219169083151502179055508267ffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1661161a612064565b73ffffffffffffffffffffffffffffffffffffffff167f735f115f9f8b052af379e3379b54c6244b521a3b664a1bda8ac5cd18d4da5fd5846000015460405161166391906134b5565b60405180910390a4600191505092915050565b6361cf998081565b6361564f8081565b60006116b97f7bb251fcb069bccde7e1a4d41266677c9dc51f3b2665dbaa6f8dca5a22fc446c6116b4612064565b611860565b6116f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ef906132d8565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61173e612064565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161179991906131e5565b60206040518083038186803b1580156117b157600080fd5b505afa1580156117c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e99190612c60565b6040518363ffffffff1660e01b8152600401611806929190613237565b602060405180830381600087803b15801561182057600080fd5b505af1158015611834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118589190612ba9565b506001905090565b60006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6361a6bb0081565b6000801b81565b6000609a60009054906101000a900467ffffffffffffffff16905090565b60008060019054906101000a900460ff168061191f575060008054906101000a900460ff16155b61195e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195590613378565b60405180910390fd5b60008060019054906101000a900460ff1615905080156119ae576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6119b6612437565b6119be612510565b6119cb6000801b866125e9565b6119f57fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26866125e9565b611a1f7fdc484f3f9843e4bdd5b3c0124f7e4faa7a7a7c643906a9d119793b07afadbabc866125e9565b611a497f7bb251fcb069bccde7e1a4d41266677c9dc51f3b2665dbaa6f8dca5a22fc446c866125e9565b82609a60086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600167ffffffffffffffff811115611b0e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611b3c5781602001602082028036833780820191505090505b5090506361cf998081600081518110611b7e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506040518060600160405280828152602001611388815260200160011515815250609960008067ffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611be392919061292a565b506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050506000600467ffffffffffffffff811115611c54577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c825781602001602082028036833780820191505090505b5090506361564f8081600081518110611cc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505063617f2e0081600181518110611d0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506361a6bb0081600281518110611d5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506361cf998081600381518110611da5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506040518060600160405280828152602001610bb881526020016001151581525060996000600167ffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611e0b92919061292a565b506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050506002609a60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001935050508015611e8a5760008060016101000a81548160ff0219169083151502179055505b509392505050565b6000609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff169050919050565b611ef7612977565b609960008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805480602002602001604051908101604052809291908181526020018280548015611f7857602002820191906000526020600020905b815481526020019060010190808311611f64575b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b611fb682610603565b611fc781611fc2612064565b6121d7565b611fd18383612355565b505050565b7f7bb251fcb069bccde7e1a4d41266677c9dc51f3b2665dbaa6f8dca5a22fc446c81565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60008385106120b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a7906132f8565b60405180910390fd5b838310156120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea906133b8565b60405180910390fd5b600080603c878761210491906136a6565b61210e919061361b565b905060018110156121a1576001603c888761212991906136a6565b612133919061361b565b1015612174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216b90613318565b60405180910390fd5b6237b1d06001858a612186919061364c565b612190919061364c565b61219a919061361b565b91506121c9565b6237b1d081858a6121b2919061364c565b6121bc919061364c565b6121c6919061361b565b91505b819250505095945050505050565b6121e18282611860565b612270576122068173ffffffffffffffffffffffffffffffffffffffff1660146125f7565b6122148360001c60206125f7565b6040516020016122259291906131ab565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122679190613296565b60405180910390fd5b5050565b61227e8282611860565b6123515760016065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506122f6612064565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61235f8282611860565b156124335760006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506123d8612064565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600060019054906101000a900460ff168061245d575060008054906101000a900460ff16155b61249c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249390613378565b60405180910390fd5b60008060019054906101000a900460ff1615905080156124ec576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561250d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612536575060008054906101000a900460ff16155b612575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256c90613378565b60405180910390fd5b60008060019054906101000a900460ff1615905080156125c5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156125e65760008060016101000a81548160ff0219169083151502179055505b50565b6125f38282612274565b5050565b60606000600283600261260a919061364c565b61261491906135c5565b67ffffffffffffffff811115612653577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156126855781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106126e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061276d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026127ad919061364c565b6127b791906135c5565b90505b60018111156128a3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061281f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061285c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061289c906137af565b90506127ba565b50600084146128e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128de906132b8565b60405180910390fd5b8091505092915050565b6040518060a001604052806000815260200160008152602001600063ffffffff1681526020016000151581526020016000151581525090565b828054828255906000526020600020908101928215612966579160200282015b8281111561296557825182559160200191906001019061294a565b5b509050612973919061299a565b5090565b604051806060016040528060608152602001600081526020016000151581525090565b5b808211156129b357600081600090555060010161299b565b5090565b60006129ca6129c584613539565b613514565b905080838252602082019050828560208602820111156129e957600080fd5b60005b85811015612a1957816129ff8882612aa1565b8452602084019350602083019250506001810190506129ec565b5050509392505050565b600081359050612a3281613c96565b92915050565b600082601f830112612a4957600080fd5b8135612a598482602086016129b7565b91505092915050565b600081519050612a7181613cad565b92915050565b600081359050612a8681613cc4565b92915050565b600081359050612a9b81613cdb565b92915050565b600081359050612ab081613cf2565b92915050565b600081519050612ac581613cf2565b92915050565b600081359050612ada81613d09565b92915050565b600081359050612aef81613d20565b92915050565b600060208284031215612b0757600080fd5b6000612b1584828501612a23565b91505092915050565b600080600060608486031215612b3357600080fd5b6000612b4186828701612a23565b9350506020612b5286828701612a23565b9250506040612b6386828701612a23565b9150509250925092565b60008060408385031215612b8057600080fd5b6000612b8e85828601612a23565b9250506020612b9f85828601612ae0565b9150509250929050565b600060208284031215612bbb57600080fd5b6000612bc984828501612a62565b91505092915050565b600060208284031215612be457600080fd5b6000612bf284828501612a77565b91505092915050565b60008060408385031215612c0e57600080fd5b6000612c1c85828601612a77565b9250506020612c2d85828601612a23565b9150509250929050565b600060208284031215612c4957600080fd5b6000612c5784828501612a8c565b91505092915050565b600060208284031215612c7257600080fd5b6000612c8084828501612ab6565b91505092915050565b60008060408385031215612c9c57600080fd5b6000612caa85828601612aa1565b925050602083013567ffffffffffffffff811115612cc757600080fd5b612cd385828601612a38565b9150509250929050565b600060208284031215612cef57600080fd5b6000612cfd84828501612acb565b91505092915050565b60008060408385031215612d1957600080fd5b6000612d2785828601612acb565b9250506020612d3885828601612aa1565b9150509250929050565b600060208284031215612d5457600080fd5b6000612d6284828501612ae0565b91505092915050565b6000612d77838361316f565b60208301905092915050565b612d8c816136da565b82525050565b6000612d9d82613575565b612da78185613598565b9350612db283613565565b8060005b83811015612de3578151612dca8882612d6b565b9750612dd58361358b565b925050600181019050612db6565b5085935050505092915050565b612df9816136ec565b82525050565b612e08816136ec565b82525050565b612e17816136f8565b82525050565b6000612e2882613580565b612e3281856135a9565b9350612e4281856020860161377c565b612e4b81613911565b840191505092915050565b6000612e6182613580565b612e6b81856135ba565b9350612e7b81856020860161377c565b80840191505092915050565b6000612e946020836135a9565b9150612e9f82613922565b602082019050919050565b6000612eb76028836135a9565b9150612ec28261394b565b604082019050919050565b6000612eda601b836135a9565b9150612ee58261399a565b602082019050919050565b6000612efd6024836135a9565b9150612f08826139c3565b604082019050919050565b6000612f206018836135a9565b9150612f2b82613a12565b602082019050919050565b6000612f43601a836135a9565b9150612f4e82613a3b565b602082019050919050565b6000612f66602e836135a9565b9150612f7182613a64565b604082019050919050565b6000612f896025836135a9565b9150612f9482613ab3565b604082019050919050565b6000612fac601e836135a9565b9150612fb782613b02565b602082019050919050565b6000612fcf6020836135a9565b9150612fda82613b2b565b602082019050919050565b6000612ff2601b836135a9565b9150612ffd82613b54565b602082019050919050565b60006130156027836135a9565b915061302082613b7d565b604082019050919050565b60006130386017836135ba565b915061304382613bcc565b601782019050919050565b600061305b6011836135ba565b915061306682613bf5565b601182019050919050565b600061307e602f836135a9565b915061308982613c1e565b604082019050919050565b60006130a1601b836135a9565b91506130ac82613c6d565b602082019050919050565b600060608301600083015184820360008601526130d48282612d92565b91505060208301516130e9602086018261316f565b5060408301516130fc6040860182612df0565b508091505092915050565b60a08201600082015161311d600085018261316f565b506020820151613130602085018261316f565b506040820151613143604085018261318d565b5060608201516131566060850182612df0565b5060808201516131696080850182612df0565b50505050565b6131788161374e565b82525050565b6131878161374e565b82525050565b61319681613758565b82525050565b6131a581613768565b82525050565b60006131b68261302b565b91506131c28285612e56565b91506131cd8261304e565b91506131d98284612e56565b91508190509392505050565b60006020820190506131fa6000830184612d83565b92915050565b60006060820190506132156000830186612d83565b6132226020830185612d83565b61322f604083018461317e565b949350505050565b600060408201905061324c6000830185612d83565b613259602083018461317e565b9392505050565b60006020820190506132756000830184612dff565b92915050565b60006020820190506132906000830184612e0e565b92915050565b600060208201905081810360008301526132b08184612e1d565b905092915050565b600060208201905081810360008301526132d181612e87565b9050919050565b600060208201905081810360008301526132f181612eaa565b9050919050565b6000602082019050818103600083015261331181612ecd565b9050919050565b6000602082019050818103600083015261333181612ef0565b9050919050565b6000602082019050818103600083015261335181612f13565b9050919050565b6000602082019050818103600083015261337181612f36565b9050919050565b6000602082019050818103600083015261339181612f59565b9050919050565b600060208201905081810360008301526133b181612f7c565b9050919050565b600060208201905081810360008301526133d181612f9f565b9050919050565b600060208201905081810360008301526133f181612fc2565b9050919050565b6000602082019050818103600083015261341181612fe5565b9050919050565b6000602082019050818103600083015261343181613008565b9050919050565b6000602082019050818103600083015261345181613071565b9050919050565b6000602082019050818103600083015261347181613094565b9050919050565b6000602082019050818103600083015261349281846130b7565b905092915050565b600060a0820190506134af6000830184613107565b92915050565b60006020820190506134ca600083018461317e565b92915050565b60006040820190506134e5600083018561317e565b6134f2602083018461317e565b9392505050565b600060208201905061350e600083018461319c565b92915050565b600061351e61352f565b905061352a82826137d9565b919050565b6000604051905090565b600067ffffffffffffffff821115613554576135536138e2565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006135d08261374e565b91506135db8361374e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136105761360f613884565b5b828201905092915050565b60006136268261374e565b91506136318361374e565b925082613641576136406138b3565b5b828204905092915050565b60006136578261374e565b91506136628361374e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561369b5761369a613884565b5b828202905092915050565b60006136b18261374e565b91506136bc8361374e565b9250828210156136cf576136ce613884565b5b828203905092915050565b60006136e58261372e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60005b8381101561379a57808201518184015260208101905061377f565b838111156137a9576000848401525b50505050565b60006137ba8261374e565b915060008214156137ce576137cd613884565b5b600182039050919050565b6137e282613911565b810181811067ffffffffffffffff82111715613801576138006138e2565b5b80604052505050565b60006138158261374e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561384857613847613884565b5b600182019050919050565b600061385e82613768565b915067ffffffffffffffff82141561387957613878613884565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5374616b696e673a2072656d61696e64657220636f6c6c65637420726f6c652060008201527f7265717569726564000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a20696e76616c696420737461727420646174650000000000600082015250565b7f5374616b696e673a2077697468726177616c207265717569726564203234206860008201527f6f75727300000000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a2070726f6772616d206973206f7665720000000000000000600082015250565b7f5374616b696e673a20616c72656164792077697468647261776e000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f5374616b696e673a2070726f6772616d20617574686f7220726f6c652072657160008201527f7569726564000000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a20696e76616c696420776974686472617720646174650000600082015250565b7f5374616b696e673a20656d657267656e637920726f6c65207265717569726564600082015250565b7f5374616b696e673a207374616b696e67206e6f74206578697374730000000000600082015250565b7f5374616b696e673a20696e76616c69642070726f6772616d20696e746572657360008201527f7420646174657300000000000000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b7f5374616b696e673a2070726f6772616d206e6f74206578697374730000000000600082015250565b613c9f816136da565b8114613caa57600080fd5b50565b613cb6816136ec565b8114613cc157600080fd5b50565b613ccd816136f8565b8114613cd857600080fd5b50565b613ce481613702565b8114613cef57600080fd5b50565b613cfb8161374e565b8114613d0657600080fd5b50565b613d1281613758565b8114613d1d57600080fd5b50565b613d2981613768565b8114613d3457600080fd5b5056fea264697066735822122048e8c2414175e4ec153d41aa60df5e7dde8678eb1f7c4a038f7c41ab876b5e0b64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063717f24c6116100de578063a217fddf11610097578063c414dc7111610071578063c414dc71146104c5578063ce7cb3cf146104f5578063d547741f14610525578063fc7be740146105415761018e565b8063a217fddf14610459578063ba71b33014610477578063c0c53b8b146104955761018e565b8063717f24c6146103815780637be83350146103b157806385b3bb70146103cf5780638afbf669146103ed57806391d148541461040b5780639bb318001461043b5761018e565b80632f2ff15d1161014b578063329f798911610125578063329f7989146102e757806336568abe146103175780634944d8361461033357806368dd20d1146103635761018e565b80632f2ff15d1461028f578063313134f5146102ab57806331d925e5146102c95761018e565b806301ffc9a7146101935780630d6a3634146101c357806320df4359146101e1578063248a9ca3146101ff57806329de65331461022f5780632dd99f061461025f575b600080fd5b6101ad60048036038101906101a89190612c37565b61055f565b6040516101ba9190613260565b60405180910390f35b6101cb6105d9565b6040516101d891906134b5565b60405180910390f35b6101e96105df565b6040516101f6919061327b565b60405180910390f35b61021960048036038101906102149190612bd2565b610603565b604051610226919061327b565b60405180910390f35b61024960048036038101906102449190612cdd565b610623565b6040516102569190613260565b60405180910390f35b61027960048036038101906102749190612b6d565b610b0c565b604051610286919061349a565b60405180910390f35b6102a960048036038101906102a49190612bfb565b610bfb565b005b6102b3610c24565b6040516102c091906134b5565b60405180910390f35b6102d1610c2c565b6040516102de919061327b565b60405180910390f35b61030160048036038101906102fc9190612d06565b610c50565b60405161030e9190613260565b60405180910390f35b610331600480360381019061032c9190612bfb565b61110c565b005b61034d60048036038101906103489190612c89565b61118f565b60405161035a9190613260565b60405180910390f35b61036b61139c565b60405161037891906134b5565b60405180910390f35b61039b60048036038101906103969190612b6d565b6113a2565b6040516103a89190613260565b60405180910390f35b6103b9611676565b6040516103c691906134b5565b60405180910390f35b6103d761167e565b6040516103e491906134b5565b60405180910390f35b6103f5611686565b6040516104029190613260565b60405180910390f35b61042560048036038101906104209190612bfb565b611860565b6040516104329190613260565b60405180910390f35b6104436118cb565b60405161045091906134b5565b60405180910390f35b6104616118d3565b60405161046e919061327b565b60405180910390f35b61047f6118da565b60405161048c91906134f9565b60405180910390f35b6104af60048036038101906104aa9190612b1e565b6118f8565b6040516104bc9190613260565b60405180910390f35b6104df60048036038101906104da9190612af5565b611e92565b6040516104ec91906134f9565b60405180910390f35b61050f600480360381019061050a9190612d42565b611eef565b60405161051c9190613478565b60405180910390f35b61053f600480360381019061053a9190612bfb565b611fad565b005b610549611fd6565b604051610556919061327b565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d257506105d182611ffa565b5b9050919050565b61138881565b7fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b2681565b600060656000838152602001908152602001600020600101549050919050565b60008060986000610632612064565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1667ffffffffffffffff16815260200190815260200160002090508060020160059054906101000a900460ff166106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d7906133f8565b60405180910390fd5b8060020160049054906101000a900460ff1615610732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072990613358565b60405180910390fd5b6000806000609960008560020160009054906101000a900463ffffffff1663ffffffff1667ffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054806020026020016040519081016040528092919081815260200182805480156107c857602002820191906000526020600020905b8154815260200190600101908083116107b4575b50505050508152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905060005b8160000151518110156108b55781600001518181518110610845577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151856001015410156108a45781600001518181518110610895577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015192506108b5565b806108ae9061380a565b90506107fb565b506108cf846000015485600101548442856020015161206c565b9250609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609a60089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8661093f919061361b565b6040518363ffffffff1660e01b815260040161095c929190613237565b602060405180830381600087803b15801561097657600080fd5b505af115801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae9190612ba9565b50609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6109f5612064565b858760000154610a0591906135c5565b6040518363ffffffff1660e01b8152600401610a22929190613237565b602060405180830381600087803b158015610a3c57600080fd5b505af1158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a749190612ba9565b5060018460020160046101000a81548160ff0219169083151502179055508563ffffffff16610aa1612064565b73ffffffffffffffffffffffffffffffffffffffff167fb2c178054742cda76a927f7bb8569dc58843851423dc2cf2c6f96b8696f59ccc85868860000154610ae991906135c5565b604051610af79291906134d0565b60405180910390a36001945050505050919050565b610b146128f1565b609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900460ff161515151581526020016002820160059054906101000a900460ff161515151581525050905092915050565b610c0482610603565b610c1581610c10612064565b6121d7565b610c1f8383612274565b505050565b63617f2e0081565b7fdc484f3f9843e4bdd5b3c0124f7e4faa7a7a7c643906a9d119793b07afadbabc81565b600080609960008563ffffffff1667ffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610cd057602002820191906000526020600020905b815481526020019060010190808311610cbc575b50505050508152602001600182015481526020016002820160009054906101000a900460ff16151515158152505090508060400151610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b90613458565b60405180910390fd5b80600001516001826000015151610d5b91906136a6565b81518110610d92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101514210610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd290613338565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd610e21612064565b30866040518463ffffffff1660e01b8152600401610e4193929190613200565b602060405180830381600087803b158015610e5b57600080fd5b505af1158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190612ba9565b50600060976000610ea2612064565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1690506040518060a001604052808581526020014281526020018663ffffffff1681526020016000151581526020016001151581525060986000610f32612064565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160046101000a81548160ff02191690831515021790555060808201518160020160056101000a81548160ff0219169083151502179055509050506097600061101b612064565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff168092919061107990613853565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550508067ffffffffffffffff166110b3612064565b73ffffffffffffffffffffffffffffffffffffffff167f05f25f069643b90644393551a3680aeafacaad4bb1288736d4160fb658911993866040516110f891906134b5565b60405180910390a360019250505092915050565b611114612064565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117890613438565b60405180910390fd5b61118b8282612355565b5050565b60006111c27fdc484f3f9843e4bdd5b3c0124f7e4faa7a7a7c643906a9d119793b07afadbabc6111bd612064565b611860565b611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f890613398565b60405180910390fd5b6000825111611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c90613418565b60405180910390fd5b6000609a60009054906101000a900467ffffffffffffffff169050604051806060016040528084815260200185815260200160011515815250609960008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906112c192919061292a565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050609a600081819054906101000a900467ffffffffffffffff168092919061131590613853565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550508067ffffffffffffffff1661134f612064565b73ffffffffffffffffffffffffffffffffffffffff167fa68210e0f22afdeeddcb6bceece4ccdaea118e8af32ed63f3072d79da309c16360405160405180910390a3600191505092915050565b610bb881565b60006113d57fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b266113d0612064565b611860565b611414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140b906133d8565b60405180910390fd5b6000609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090508060020160059054906101000a900460ff166114cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c4906133f8565b60405180910390fd5b8060020160049054906101000a900460ff161561151f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151690613358565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8583600001546040518363ffffffff1660e01b8152600401611580929190613237565b602060405180830381600087803b15801561159a57600080fd5b505af11580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d29190612ba9565b5060018160020160046101000a81548160ff0219169083151502179055508267ffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1661161a612064565b73ffffffffffffffffffffffffffffffffffffffff167f735f115f9f8b052af379e3379b54c6244b521a3b664a1bda8ac5cd18d4da5fd5846000015460405161166391906134b5565b60405180910390a4600191505092915050565b6361cf998081565b6361564f8081565b60006116b97f7bb251fcb069bccde7e1a4d41266677c9dc51f3b2665dbaa6f8dca5a22fc446c6116b4612064565b611860565b6116f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ef906132d8565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61173e612064565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161179991906131e5565b60206040518083038186803b1580156117b157600080fd5b505afa1580156117c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e99190612c60565b6040518363ffffffff1660e01b8152600401611806929190613237565b602060405180830381600087803b15801561182057600080fd5b505af1158015611834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118589190612ba9565b506001905090565b60006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6361a6bb0081565b6000801b81565b6000609a60009054906101000a900467ffffffffffffffff16905090565b60008060019054906101000a900460ff168061191f575060008054906101000a900460ff16155b61195e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195590613378565b60405180910390fd5b60008060019054906101000a900460ff1615905080156119ae576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6119b6612437565b6119be612510565b6119cb6000801b866125e9565b6119f57fbf233dd2aafeb4d50879c4aa5c81e96d92f6e6945c906a58f9f2d1c1631b4b26866125e9565b611a1f7fdc484f3f9843e4bdd5b3c0124f7e4faa7a7a7c643906a9d119793b07afadbabc866125e9565b611a497f7bb251fcb069bccde7e1a4d41266677c9dc51f3b2665dbaa6f8dca5a22fc446c866125e9565b82609a60086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600167ffffffffffffffff811115611b0e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611b3c5781602001602082028036833780820191505090505b5090506361cf998081600081518110611b7e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506040518060600160405280828152602001611388815260200160011515815250609960008067ffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611be392919061292a565b506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050506000600467ffffffffffffffff811115611c54577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c825781602001602082028036833780820191505090505b5090506361564f8081600081518110611cc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505063617f2e0081600181518110611d0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506361a6bb0081600281518110611d5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506361cf998081600381518110611da5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506040518060600160405280828152602001610bb881526020016001151581525060996000600167ffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611e0b92919061292a565b506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050506002609a60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001935050508015611e8a5760008060016101000a81548160ff0219169083151502179055505b509392505050565b6000609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff169050919050565b611ef7612977565b609960008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805480602002602001604051908101604052809291908181526020018280548015611f7857602002820191906000526020600020905b815481526020019060010190808311611f64575b50505050508152602001600182015481526020016002820160009054906101000a900460ff1615151515815250509050919050565b611fb682610603565b611fc781611fc2612064565b6121d7565b611fd18383612355565b505050565b7f7bb251fcb069bccde7e1a4d41266677c9dc51f3b2665dbaa6f8dca5a22fc446c81565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60008385106120b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a7906132f8565b60405180910390fd5b838310156120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea906133b8565b60405180910390fd5b600080603c878761210491906136a6565b61210e919061361b565b905060018110156121a1576001603c888761212991906136a6565b612133919061361b565b1015612174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216b90613318565b60405180910390fd5b6237b1d06001858a612186919061364c565b612190919061364c565b61219a919061361b565b91506121c9565b6237b1d081858a6121b2919061364c565b6121bc919061364c565b6121c6919061361b565b91505b819250505095945050505050565b6121e18282611860565b612270576122068173ffffffffffffffffffffffffffffffffffffffff1660146125f7565b6122148360001c60206125f7565b6040516020016122259291906131ab565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122679190613296565b60405180910390fd5b5050565b61227e8282611860565b6123515760016065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506122f6612064565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61235f8282611860565b156124335760006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506123d8612064565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600060019054906101000a900460ff168061245d575060008054906101000a900460ff16155b61249c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249390613378565b60405180910390fd5b60008060019054906101000a900460ff1615905080156124ec576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561250d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612536575060008054906101000a900460ff16155b612575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256c90613378565b60405180910390fd5b60008060019054906101000a900460ff1615905080156125c5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156125e65760008060016101000a81548160ff0219169083151502179055505b50565b6125f38282612274565b5050565b60606000600283600261260a919061364c565b61261491906135c5565b67ffffffffffffffff811115612653577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156126855781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106126e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061276d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026127ad919061364c565b6127b791906135c5565b90505b60018111156128a3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061281f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061285c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061289c906137af565b90506127ba565b50600084146128e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128de906132b8565b60405180910390fd5b8091505092915050565b6040518060a001604052806000815260200160008152602001600063ffffffff1681526020016000151581526020016000151581525090565b828054828255906000526020600020908101928215612966579160200282015b8281111561296557825182559160200191906001019061294a565b5b509050612973919061299a565b5090565b604051806060016040528060608152602001600081526020016000151581525090565b5b808211156129b357600081600090555060010161299b565b5090565b60006129ca6129c584613539565b613514565b905080838252602082019050828560208602820111156129e957600080fd5b60005b85811015612a1957816129ff8882612aa1565b8452602084019350602083019250506001810190506129ec565b5050509392505050565b600081359050612a3281613c96565b92915050565b600082601f830112612a4957600080fd5b8135612a598482602086016129b7565b91505092915050565b600081519050612a7181613cad565b92915050565b600081359050612a8681613cc4565b92915050565b600081359050612a9b81613cdb565b92915050565b600081359050612ab081613cf2565b92915050565b600081519050612ac581613cf2565b92915050565b600081359050612ada81613d09565b92915050565b600081359050612aef81613d20565b92915050565b600060208284031215612b0757600080fd5b6000612b1584828501612a23565b91505092915050565b600080600060608486031215612b3357600080fd5b6000612b4186828701612a23565b9350506020612b5286828701612a23565b9250506040612b6386828701612a23565b9150509250925092565b60008060408385031215612b8057600080fd5b6000612b8e85828601612a23565b9250506020612b9f85828601612ae0565b9150509250929050565b600060208284031215612bbb57600080fd5b6000612bc984828501612a62565b91505092915050565b600060208284031215612be457600080fd5b6000612bf284828501612a77565b91505092915050565b60008060408385031215612c0e57600080fd5b6000612c1c85828601612a77565b9250506020612c2d85828601612a23565b9150509250929050565b600060208284031215612c4957600080fd5b6000612c5784828501612a8c565b91505092915050565b600060208284031215612c7257600080fd5b6000612c8084828501612ab6565b91505092915050565b60008060408385031215612c9c57600080fd5b6000612caa85828601612aa1565b925050602083013567ffffffffffffffff811115612cc757600080fd5b612cd385828601612a38565b9150509250929050565b600060208284031215612cef57600080fd5b6000612cfd84828501612acb565b91505092915050565b60008060408385031215612d1957600080fd5b6000612d2785828601612acb565b9250506020612d3885828601612aa1565b9150509250929050565b600060208284031215612d5457600080fd5b6000612d6284828501612ae0565b91505092915050565b6000612d77838361316f565b60208301905092915050565b612d8c816136da565b82525050565b6000612d9d82613575565b612da78185613598565b9350612db283613565565b8060005b83811015612de3578151612dca8882612d6b565b9750612dd58361358b565b925050600181019050612db6565b5085935050505092915050565b612df9816136ec565b82525050565b612e08816136ec565b82525050565b612e17816136f8565b82525050565b6000612e2882613580565b612e3281856135a9565b9350612e4281856020860161377c565b612e4b81613911565b840191505092915050565b6000612e6182613580565b612e6b81856135ba565b9350612e7b81856020860161377c565b80840191505092915050565b6000612e946020836135a9565b9150612e9f82613922565b602082019050919050565b6000612eb76028836135a9565b9150612ec28261394b565b604082019050919050565b6000612eda601b836135a9565b9150612ee58261399a565b602082019050919050565b6000612efd6024836135a9565b9150612f08826139c3565b604082019050919050565b6000612f206018836135a9565b9150612f2b82613a12565b602082019050919050565b6000612f43601a836135a9565b9150612f4e82613a3b565b602082019050919050565b6000612f66602e836135a9565b9150612f7182613a64565b604082019050919050565b6000612f896025836135a9565b9150612f9482613ab3565b604082019050919050565b6000612fac601e836135a9565b9150612fb782613b02565b602082019050919050565b6000612fcf6020836135a9565b9150612fda82613b2b565b602082019050919050565b6000612ff2601b836135a9565b9150612ffd82613b54565b602082019050919050565b60006130156027836135a9565b915061302082613b7d565b604082019050919050565b60006130386017836135ba565b915061304382613bcc565b601782019050919050565b600061305b6011836135ba565b915061306682613bf5565b601182019050919050565b600061307e602f836135a9565b915061308982613c1e565b604082019050919050565b60006130a1601b836135a9565b91506130ac82613c6d565b602082019050919050565b600060608301600083015184820360008601526130d48282612d92565b91505060208301516130e9602086018261316f565b5060408301516130fc6040860182612df0565b508091505092915050565b60a08201600082015161311d600085018261316f565b506020820151613130602085018261316f565b506040820151613143604085018261318d565b5060608201516131566060850182612df0565b5060808201516131696080850182612df0565b50505050565b6131788161374e565b82525050565b6131878161374e565b82525050565b61319681613758565b82525050565b6131a581613768565b82525050565b60006131b68261302b565b91506131c28285612e56565b91506131cd8261304e565b91506131d98284612e56565b91508190509392505050565b60006020820190506131fa6000830184612d83565b92915050565b60006060820190506132156000830186612d83565b6132226020830185612d83565b61322f604083018461317e565b949350505050565b600060408201905061324c6000830185612d83565b613259602083018461317e565b9392505050565b60006020820190506132756000830184612dff565b92915050565b60006020820190506132906000830184612e0e565b92915050565b600060208201905081810360008301526132b08184612e1d565b905092915050565b600060208201905081810360008301526132d181612e87565b9050919050565b600060208201905081810360008301526132f181612eaa565b9050919050565b6000602082019050818103600083015261331181612ecd565b9050919050565b6000602082019050818103600083015261333181612ef0565b9050919050565b6000602082019050818103600083015261335181612f13565b9050919050565b6000602082019050818103600083015261337181612f36565b9050919050565b6000602082019050818103600083015261339181612f59565b9050919050565b600060208201905081810360008301526133b181612f7c565b9050919050565b600060208201905081810360008301526133d181612f9f565b9050919050565b600060208201905081810360008301526133f181612fc2565b9050919050565b6000602082019050818103600083015261341181612fe5565b9050919050565b6000602082019050818103600083015261343181613008565b9050919050565b6000602082019050818103600083015261345181613071565b9050919050565b6000602082019050818103600083015261347181613094565b9050919050565b6000602082019050818103600083015261349281846130b7565b905092915050565b600060a0820190506134af6000830184613107565b92915050565b60006020820190506134ca600083018461317e565b92915050565b60006040820190506134e5600083018561317e565b6134f2602083018461317e565b9392505050565b600060208201905061350e600083018461319c565b92915050565b600061351e61352f565b905061352a82826137d9565b919050565b6000604051905090565b600067ffffffffffffffff821115613554576135536138e2565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006135d08261374e565b91506135db8361374e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136105761360f613884565b5b828201905092915050565b60006136268261374e565b91506136318361374e565b925082613641576136406138b3565b5b828204905092915050565b60006136578261374e565b91506136628361374e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561369b5761369a613884565b5b828202905092915050565b60006136b18261374e565b91506136bc8361374e565b9250828210156136cf576136ce613884565b5b828203905092915050565b60006136e58261372e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60005b8381101561379a57808201518184015260208101905061377f565b838111156137a9576000848401525b50505050565b60006137ba8261374e565b915060008214156137ce576137cd613884565b5b600182039050919050565b6137e282613911565b810181811067ffffffffffffffff82111715613801576138006138e2565b5b80604052505050565b60006138158261374e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561384857613847613884565b5b600182019050919050565b600061385e82613768565b915067ffffffffffffffff82141561387957613878613884565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5374616b696e673a2072656d61696e64657220636f6c6c65637420726f6c652060008201527f7265717569726564000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a20696e76616c696420737461727420646174650000000000600082015250565b7f5374616b696e673a2077697468726177616c207265717569726564203234206860008201527f6f75727300000000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a2070726f6772616d206973206f7665720000000000000000600082015250565b7f5374616b696e673a20616c72656164792077697468647261776e000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f5374616b696e673a2070726f6772616d20617574686f7220726f6c652072657160008201527f7569726564000000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e673a20696e76616c696420776974686472617720646174650000600082015250565b7f5374616b696e673a20656d657267656e637920726f6c65207265717569726564600082015250565b7f5374616b696e673a207374616b696e67206e6f74206578697374730000000000600082015250565b7f5374616b696e673a20696e76616c69642070726f6772616d20696e746572657360008201527f7420646174657300000000000000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b7f5374616b696e673a2070726f6772616d206e6f74206578697374730000000000600082015250565b613c9f816136da565b8114613caa57600080fd5b50565b613cb6816136ec565b8114613cc157600080fd5b50565b613ccd816136f8565b8114613cd857600080fd5b50565b613ce481613702565b8114613cef57600080fd5b50565b613cfb8161374e565b8114613d0657600080fd5b50565b613d1281613758565b8114613d1d57600080fd5b50565b613d2981613768565b8114613d3457600080fd5b5056fea264697066735822122048e8c2414175e4ec153d41aa60df5e7dde8678eb1f7c4a038f7c41ab876b5e0b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyWithdraw(address,uint64)": {
        "details": "Withdraw staked amount to users. This is only for emergency, i.e when mistakes happen. And only address that has EMERGENCY_ROLE can withdraw",
        "params": {
          "staker": "staker",
          "stakingId": "staking identifier"
        }
      },
      "enterStaking(uint32,uint256)": {
        "details": "Users can become a staker to earn interest using this function. Before entering staking, users must `approve` this staking contract to transfer their tokens to this contract for lockup.",
        "params": {
          "amount": "Amount of tokens users want to stake",
          "programId": "Staking program described by BHOLDUS. Must either 1 or 2"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address)": {
        "details": "Since this staking contract is deployed with proxy approach, this is its constructor",
        "params": {
          "admin": "address with admin rights. This address has highest power",
          "feeCollector": "address that collects fee when users leave staking and withdraw interests",
          "token": "token contract"
        }
      },
      "leaveStaking(uint32)": {
        "details": "Users can withdraw staked amount and reward using this function. Users can only withdraw if interest date is sastisfied",
        "params": {
          "stakingId": "Staking identifiier"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawRemainingTokens()": {
        "details": "Withdraw remaining tokens to sender. This is used when staking programs are all over, and devs want to withdraw remaining tokens. Only sender with REMAINDER_COLLECT_ROLE can proceed."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 976,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 979,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1378,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1687,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 86,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)81_storage)"
      },
      {
        "astId": 394,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2746,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_nextStakingIds",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 2753,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_stakingInfos",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_uint64,t_struct(StakingInfo)2734_storage))"
      },
      {
        "astId": 2758,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_programInfos",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint64,t_struct(ProgramInfo)2742_storage)"
      },
      {
        "astId": 2760,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_nextProgramId",
        "offset": 0,
        "slot": "154",
        "type": "t_uint64"
      },
      {
        "astId": 2762,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_feeCollector",
        "offset": 8,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 2765,
        "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
        "label": "_token",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(CoinBHO)2712"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CoinBHO)2712": {
        "encoding": "inplace",
        "label": "contract CoinBHO",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint64,t_struct(StakingInfo)2734_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint64 => struct StakingBHOPoolTest.StakingInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_struct(StakingInfo)2734_storage)"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)81_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)81_storage"
      },
      "t_mapping(t_uint64,t_struct(ProgramInfo)2742_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct StakingBHOPoolTest.ProgramInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ProgramInfo)2742_storage"
      },
      "t_mapping(t_uint64,t_struct(StakingInfo)2734_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct StakingBHOPoolTest.StakingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingInfo)2734_storage"
      },
      "t_struct(ProgramInfo)2742_storage": {
        "encoding": "inplace",
        "label": "struct StakingBHOPoolTest.ProgramInfo",
        "members": [
          {
            "astId": 2737,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "interestDates",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2739,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "apy",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2741,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "isExist",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)81_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 78,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 80,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakingInfo)2734_storage": {
        "encoding": "inplace",
        "label": "struct StakingBHOPoolTest.StakingInfo",
        "members": [
          {
            "astId": 2725,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2727,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "startDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2729,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "programId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2731,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "isWithdrawn",
            "offset": 4,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2733,
            "contract": "contracts/token/StakingBHOPoolTest.sol:StakingBHOPoolTest",
            "label": "isExist",
            "offset": 5,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}