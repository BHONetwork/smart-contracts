{
  "address": "0xcb0b860CeD2bcB466E77d67AB5DdEC400A642829",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxyOwner",
          "type": "address"
        }
      ],
      "name": "ProxyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "lockDurations_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64",
          "name": "startDate_",
          "type": "uint64"
        }
      ],
      "name": "createProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb15ed3e076b16fe2c4848a953e96237abeff88d6497aa54f7b0e8be14b537176",
  "receipt": {
    "to": null,
    "from": "0x08687a0b65F5d33C374C98aBaC17010d1640C7FD",
    "contractAddress": "0xcb0b860CeD2bcB466E77d67AB5DdEC400A642829",
    "transactionIndex": 2,
    "gasUsed": "798741",
    "logsBloom": "0x
    "blockHash": "0x05476132019b986e7bc731d2fd70aad4c3c280e1ac0a62007b5e9857f8317095",
    "transactionHash": "0xb15ed3e076b16fe2c4848a953e96237abeff88d6497aa54f7b0e8be14b537176",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 12500266,
        "transactionHash": "0xb15ed3e076b16fe2c4848a953e96237abeff88d6497aa54f7b0e8be14b537176",
        "address": "0xcb0b860CeD2bcB466E77d67AB5DdEC400A642829",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000008687a0b65f5d33c374c98abac17010d1640c7fd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x05476132019b986e7bc731d2fd70aad4c3c280e1ac0a62007b5e9857f8317095"
      }
    ],
    "blockNumber": 12500266,
    "cumulativeGasUsed": "864780",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "21422a61bdf860c534b2d8d3ca91a90f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"lockDurations_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"startDate_\",\"type\":\"uint64\"}],\"name\":\"createProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TokenTimeLockByAmountProxyFactory.sol\":\"TokenTimeLockByAmountProxyFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x90dec20805396efc780a82c62578626103e03278bc1f48b61bb3aba52a61617c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/math/SafeMathX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMathX {\\n    // Calculate x * y / scale rounding down.\\n    function mulScale(\\n        uint256 x,\\n        uint256 y,\\n        uint128 scale\\n    ) internal pure returns (uint256) {\\n        uint256 a = x / scale;\\n        uint256 b = x % scale;\\n        uint256 c = y / scale;\\n        uint256 d = y % scale;\\n\\n        return a * c * scale + a * d + b * c + (b * d) / scale;\\n    }\\n}\\n\",\"keccak256\":\"0x549d8f9d3d5e012a2cf42945137fad8c1a23d8d9e71c48d11c5b5c57cb78afc1\",\"license\":\"MIT\"},\"contracts/token/BEP20/IBEP20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x360996a6c627727743f162951aab28f043b86897f22164c33ac174550beb90ef\",\"license\":\"MIT\"},\"contracts/token/BEP20/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeBEP20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeBEP20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc56db3009eee62e8a98ef4d298183046d4627a933e459e3524f0ff6b490a8fa\",\"license\":\"MIT\"},\"contracts/token/TokenTimeLockByAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./BEP20/IBEP20.sol\\\";\\nimport \\\"./BEP20/SafeBEP20.sol\\\";\\nimport \\\"../math/SafeMathX.sol\\\";\\n\\ncontract TokenTimeLockByAmount is OwnableUpgradeable {\\n    using SafeBEP20 for IBEP20;\\n    using SafeMathX for uint256;\\n\\n    /// Release amounts of each phase\\n    uint256[] private _releaseAmounts;\\n\\n    /// Total locked tokens\\n    uint256 private _amount;\\n\\n    /// Total released amount to user\\n    uint256 private _releasedAmount;\\n\\n    /// Beneficiary\\n    address private _user;\\n\\n    /// Token address\\n    address private _token;\\n\\n    /// Release date that user initiates a release of each phase\\n    uint64[] private _releaseDates;\\n\\n    /// Start date of the lock\\n    uint64 private _startDate;\\n\\n    /// Lock duration (in seconds) of each phase\\n    uint32[] private _lockDurations;\\n\\n    /// Next release phase\\n    uint32 private _nextReleaseIdx;\\n\\n    event Released(\\n        uint256 phaseReleasedAmount,\\n        uint256 totalReleasedAmount,\\n        uint32 fromIdx,\\n        uint32 toIdx,\\n        uint64 date\\n    );\\n\\n    event SafetyReleaseActivated(uint256 amount, address to, uint64 date);\\n\\n    function token() public view returns (IBEP20) {\\n        return IBEP20(_token);\\n    }\\n\\n    function beneficiary() public view returns (address) {\\n        return _user;\\n    }\\n\\n    function amount() public view returns (uint256) {\\n        return _amount;\\n    }\\n\\n    function releasedAmount() public view returns (uint256) {\\n        return _releasedAmount;\\n    }\\n\\n    function startDate() public view returns (uint64) {\\n        return _startDate;\\n    }\\n\\n    function lockDurations() public view returns (uint32[] memory) {\\n        return _lockDurations;\\n    }\\n\\n    function releaseAmounts() public view returns (uint256[] memory) {\\n        return _releaseAmounts;\\n    }\\n\\n    function releaseDates() public view returns (uint64[] memory) {\\n        return _releaseDates;\\n    }\\n\\n    function nextReleaseIdx() public view returns (uint32) {\\n        return _nextReleaseIdx;\\n    }\\n\\n    function lockData()\\n        public\\n        view\\n        returns (\\n            address user,\\n            address token_,\\n            uint256 amount_,\\n            uint256 releasedAmount_,\\n            uint64 startDate_,\\n            uint32[] memory lockDurations_,\\n            uint256[] memory releaseAmounts_,\\n            uint64[] memory releaseDates_,\\n            uint32 nextReleaseIdx_\\n        )\\n    {\\n        return (\\n            beneficiary(),\\n            address(token()),\\n            amount(),\\n            releasedAmount(),\\n            startDate(),\\n            lockDurations(),\\n            releaseAmounts(),\\n            releaseDates(),\\n            nextReleaseIdx()\\n        );\\n    }\\n\\n    /// @notice Register a new lock for a user\\n    /// Reverts in the following cases:\\n    /// - Duplicated lock id for a user.\\n    /// - `lockDurations` and `releaseAmounts` length don't match.\\n    function initialize(\\n        address owner_,\\n        address user_,\\n        address token_,\\n        uint32[] calldata lockDurations_,\\n        uint256[] calldata releaseAmounts_,\\n        uint64 startDate_\\n    ) public initializer returns (bool) {\\n        __Ownable_init();\\n\\n        require(\\n            lockDurations_.length == releaseAmounts_.length,\\n            \\\"TokenTimeLockByAmount: unlock length not match\\\"\\n        );\\n\\n        uint256 _sum = 0;\\n        for (uint256 i = 0; i < releaseAmounts_.length; ++i) {\\n            _sum += releaseAmounts_[i];\\n        }\\n\\n        _user = user_;\\n        _token = token_;\\n        _startDate = startDate_;\\n        _lockDurations = lockDurations_;\\n        _releaseAmounts = releaseAmounts_;\\n        _amount = _sum;\\n        _releasedAmount = 0;\\n        _nextReleaseIdx = 0;\\n        _releaseDates = new uint64[](_lockDurations.length);\\n\\n        transferOwnership(owner_);\\n\\n        return true;\\n    }\\n\\n    /// @notice Release unlocked tokens to user.\\n    /// @dev User (sender) can release unlocked tokens by calling this function.\\n    /// This function will release locked tokens from multiple lock phases that meets unlock requirements\\n    /// Reverts in the following cases:\\n    /// - No tokens to be withdrawn including:\\n    ///     + All lock phases are already released\\n    ///     + Do not meet next unlock requirements\\n    /// - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\\n    /// @return Return `true` if succeeds, otherwise `false`\\n    function release() public returns (bool) {\\n        uint256 numOfPhases = _lockDurations.length;\\n\\n        require(\\n            _nextReleaseIdx < numOfPhases,\\n            \\\"TokenTimeLockByAmount: all phases are released\\\"\\n        );\\n        require(\\n            block.timestamp >=\\n                _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds,\\n            \\\"TokenTimeLockByAmount: next phase unavailable\\\"\\n        );\\n\\n        uint256 prevReleaseIdx = _nextReleaseIdx;\\n\\n        uint256 availableReleaseAmount = 0;\\n        while (\\n            _nextReleaseIdx < numOfPhases &&\\n            block.timestamp >=\\n            _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds\\n        ) {\\n            uint256 stepReleaseAmount = 0;\\n            stepReleaseAmount = _releaseAmounts[_nextReleaseIdx];\\n\\n            availableReleaseAmount += stepReleaseAmount;\\n            _nextReleaseIdx++;\\n        }\\n\\n        uint256 balance = token().balanceOf(address(this));\\n        require(\\n            balance >= availableReleaseAmount,\\n            \\\"TokenTimeLockByAmount: insufficient balance\\\"\\n        );\\n        _releasedAmount += availableReleaseAmount;\\n        token().safeTransfer(beneficiary(), availableReleaseAmount);\\n\\n        uint64 releaseDate = uint64(block.timestamp);\\n\\n        for (uint256 i = prevReleaseIdx; i < _nextReleaseIdx; ++i) {\\n            _releaseDates[i] = releaseDate;\\n        }\\n\\n        emit Released(\\n            availableReleaseAmount,\\n            _releasedAmount,\\n            uint32(prevReleaseIdx),\\n            _nextReleaseIdx - 1,\\n            releaseDate\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This is for safety.\\n    /// For example, when someone setup the contract with wrong data and accidentally transfer token to the lockup contract.\\n    /// The owner can get the token back by calling this function\\n    function safetyRelease() public onlyOwner returns (bool) {\\n        uint256 balance = token().balanceOf(address(this));\\n        token().safeTransfer(owner(), balance);\\n        emit SafetyReleaseActivated(balance, owner(), uint64(block.timestamp));\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x3b25e6d170b5038ed287a336b4cc71522af70768d2aa999af1d5ba6a20ef8ebd\",\"license\":\"MIT\"},\"contracts/token/TokenTimeLockByAmountProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./TokenTimeLockByAmount.sol\\\";\\n\\ncontract TokenTimeLockByAmountProxyFactory is Ownable {\\n    event ProxyCreated(\\n        address proxy,\\n        address implementation,\\n        address proxyOwner\\n    );\\n\\n    function createProxy(\\n        address owner_,\\n        address lock,\\n        address user_,\\n        address token_,\\n        uint32[] calldata lockDurations_,\\n        uint256[] calldata releaseAmounts_,\\n        uint64 startDate_\\n    ) public returns (address) {\\n        address proxy = Clones.clone(lock);\\n        bool setupResult = TokenTimeLockByAmount(proxy).initialize(\\n            owner_,\\n            user_,\\n            token_,\\n            lockDurations_,\\n            releaseAmounts_,\\n            startDate_\\n        );\\n        require(setupResult, \\\"TokenTimeLockByAmountProxy: can't setup\\\");\\n\\n        emit ProxyCreated(proxy, lock, owner_);\\n\\n        return proxy;\\n    }\\n}\\n\",\"keccak256\":\"0x0395a2e3685020614d4b3ecd9607c2e46a53fefba84fa1df7e5b3160f77d7e1c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b610d15806100db6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636300388914610051578063715018a6146100815780638da5cb5b1461008b578063f2fde38b146100a9575b600080fd5b61006b600480360381019061006691906106f7565b6100c5565b604051610078919061097c565b60405180910390f35b6100896101fd565b005b610093610337565b6040516100a0919061097c565b60405180910390f35b6100c360048036038101906100be91906106ce565b610360565b005b6000806100d18a610509565b905060008173ffffffffffffffffffffffffffffffffffffffff1663bf8626828d8c8c8c8c8c8c8c6040518963ffffffff1660e01b815260040161011c9897969594939291906109ce565b602060405180830381600087803b15801561013657600080fd5b505af115801561014a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016e91906107cd565b9050806101b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a790610aa1565b60405180910390fd5b7f5983cdcaa370320b76fe01a3a32a0430e6a13b9f47a55e806afb13b5aef95a12828c8e6040516101e393929190610997565b60405180910390a181925050509998505050505050505050565b6102056105de565b73ffffffffffffffffffffffffffffffffffffffff16610223610337565b73ffffffffffffffffffffffffffffffffffffffff1614610279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027090610a81565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103686105de565b73ffffffffffffffffffffffffffffffffffffffff16610386610337565b73ffffffffffffffffffffffffffffffffffffffff16146103dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d390610a81565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561044c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044390610a41565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610a61565b60405180910390fd5b919050565b600033905090565b6000813590506105f581610c83565b92915050565b60008083601f84011261060d57600080fd5b8235905067ffffffffffffffff81111561062657600080fd5b60208301915083602082028301111561063e57600080fd5b9250929050565b60008083601f84011261065757600080fd5b8235905067ffffffffffffffff81111561067057600080fd5b60208301915083602082028301111561068857600080fd5b9250929050565b60008151905061069e81610c9a565b92915050565b6000813590506106b381610cb1565b92915050565b6000813590506106c881610cc8565b92915050565b6000602082840312156106e057600080fd5b60006106ee848285016105e6565b91505092915050565b600080600080600080600080600060e08a8c03121561071557600080fd5b60006107238c828d016105e6565b99505060206107348c828d016105e6565b98505060406107458c828d016105e6565b97505060606107568c828d016105e6565b96505060808a013567ffffffffffffffff81111561077357600080fd5b61077f8c828d01610645565b955095505060a08a013567ffffffffffffffff81111561079e57600080fd5b6107aa8c828d016105fb565b935093505060c06107bd8c828d016106b9565b9150509295985092959850929598565b6000602082840312156107df57600080fd5b60006107ed8482850161068f565b91505092915050565b6000610802838361095e565b60208301905092915050565b61081781610b22565b82525050565b60006108298385610ad8565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561085857600080fd5b602083029250610869838584610b84565b82840190509392505050565b60006108818385610ae9565b935061088c82610ac1565b8060005b858110156108c5576108a28284610b0b565b6108ac88826107f6565b97506108b783610acb565b925050600181019050610890565b5085925050509392505050565b60006108df602683610afa565b91506108ea82610b93565b604082019050919050565b6000610902601683610afa565b915061090d82610be2565b602082019050919050565b6000610925602083610afa565b915061093082610c0b565b602082019050919050565b6000610948602783610afa565b915061095382610c34565b604082019050919050565b61096781610b60565b82525050565b61097681610b70565b82525050565b6000602082019050610991600083018461080e565b92915050565b60006060820190506109ac600083018661080e565b6109b9602083018561080e565b6109c6604083018461080e565b949350505050565b600060c0820190506109e3600083018b61080e565b6109f0602083018a61080e565b6109fd604083018961080e565b8181036060830152610a10818789610875565b90508181036080830152610a2581858761081d565b9050610a3460a083018461096d565b9998505050505050505050565b60006020820190508181036000830152610a5a816108d2565b9050919050565b60006020820190508181036000830152610a7a816108f5565b9050919050565b60006020820190508181036000830152610a9a81610918565b9050919050565b60006020820190508181036000830152610aba8161093b565b9050919050565b6000819050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610b1a60208401846106a4565b905092915050565b6000610b2d82610b40565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e7450726f78793a2063616e2760008201527f7420736574757000000000000000000000000000000000000000000000000000602082015250565b610c8c81610b22565b8114610c9757600080fd5b50565b610ca381610b34565b8114610cae57600080fd5b50565b610cba81610b60565b8114610cc557600080fd5b50565b610cd181610b70565b8114610cdc57600080fd5b5056fea2646970667358221220b41c4908f28fc1fb03f85d7b967365bce8347275c21eb2e2535e73b9b6f013ab64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80636300388914610051578063715018a6146100815780638da5cb5b1461008b578063f2fde38b146100a9575b600080fd5b61006b600480360381019061006691906106f7565b6100c5565b604051610078919061097c565b60405180910390f35b6100896101fd565b005b610093610337565b6040516100a0919061097c565b60405180910390f35b6100c360048036038101906100be91906106ce565b610360565b005b6000806100d18a610509565b905060008173ffffffffffffffffffffffffffffffffffffffff1663bf8626828d8c8c8c8c8c8c8c6040518963ffffffff1660e01b815260040161011c9897969594939291906109ce565b602060405180830381600087803b15801561013657600080fd5b505af115801561014a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016e91906107cd565b9050806101b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a790610aa1565b60405180910390fd5b7f5983cdcaa370320b76fe01a3a32a0430e6a13b9f47a55e806afb13b5aef95a12828c8e6040516101e393929190610997565b60405180910390a181925050509998505050505050505050565b6102056105de565b73ffffffffffffffffffffffffffffffffffffffff16610223610337565b73ffffffffffffffffffffffffffffffffffffffff1614610279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027090610a81565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103686105de565b73ffffffffffffffffffffffffffffffffffffffff16610386610337565b73ffffffffffffffffffffffffffffffffffffffff16146103dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d390610a81565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561044c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044390610a41565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610a61565b60405180910390fd5b919050565b600033905090565b6000813590506105f581610c83565b92915050565b60008083601f84011261060d57600080fd5b8235905067ffffffffffffffff81111561062657600080fd5b60208301915083602082028301111561063e57600080fd5b9250929050565b60008083601f84011261065757600080fd5b8235905067ffffffffffffffff81111561067057600080fd5b60208301915083602082028301111561068857600080fd5b9250929050565b60008151905061069e81610c9a565b92915050565b6000813590506106b381610cb1565b92915050565b6000813590506106c881610cc8565b92915050565b6000602082840312156106e057600080fd5b60006106ee848285016105e6565b91505092915050565b600080600080600080600080600060e08a8c03121561071557600080fd5b60006107238c828d016105e6565b99505060206107348c828d016105e6565b98505060406107458c828d016105e6565b97505060606107568c828d016105e6565b96505060808a013567ffffffffffffffff81111561077357600080fd5b61077f8c828d01610645565b955095505060a08a013567ffffffffffffffff81111561079e57600080fd5b6107aa8c828d016105fb565b935093505060c06107bd8c828d016106b9565b9150509295985092959850929598565b6000602082840312156107df57600080fd5b60006107ed8482850161068f565b91505092915050565b6000610802838361095e565b60208301905092915050565b61081781610b22565b82525050565b60006108298385610ad8565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561085857600080fd5b602083029250610869838584610b84565b82840190509392505050565b60006108818385610ae9565b935061088c82610ac1565b8060005b858110156108c5576108a28284610b0b565b6108ac88826107f6565b97506108b783610acb565b925050600181019050610890565b5085925050509392505050565b60006108df602683610afa565b91506108ea82610b93565b604082019050919050565b6000610902601683610afa565b915061090d82610be2565b602082019050919050565b6000610925602083610afa565b915061093082610c0b565b602082019050919050565b6000610948602783610afa565b915061095382610c34565b604082019050919050565b61096781610b60565b82525050565b61097681610b70565b82525050565b6000602082019050610991600083018461080e565b92915050565b60006060820190506109ac600083018661080e565b6109b9602083018561080e565b6109c6604083018461080e565b949350505050565b600060c0820190506109e3600083018b61080e565b6109f0602083018a61080e565b6109fd604083018961080e565b8181036060830152610a10818789610875565b90508181036080830152610a2581858761081d565b9050610a3460a083018461096d565b9998505050505050505050565b60006020820190508181036000830152610a5a816108d2565b9050919050565b60006020820190508181036000830152610a7a816108f5565b9050919050565b60006020820190508181036000830152610a9a81610918565b9050919050565b60006020820190508181036000830152610aba8161093b565b9050919050565b6000819050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610b1a60208401846106a4565b905092915050565b6000610b2d82610b40565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e7450726f78793a2063616e2760008201527f7420736574757000000000000000000000000000000000000000000000000000602082015250565b610c8c81610b22565b8114610c9757600080fd5b50565b610ca381610b34565b8114610cae57600080fd5b50565b610cba81610b60565b8114610cc557600080fd5b50565b610cd181610b70565b8114610cdc57600080fd5b5056fea2646970667358221220b41c4908f28fc1fb03f85d7b967365bce8347275c21eb2e2535e73b9b6f013ab64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 229,
        "contract": "contracts/token/TokenTimeLockByAmountProxyFactory.sol:TokenTimeLockByAmountProxyFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}