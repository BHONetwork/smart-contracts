{
  "address": "0xDEBF814B1d4D1C0F4CA7e3A5A693A251337dDEFc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transfer_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "from",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transfer_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "targetChain",
          "type": "uint16"
        }
      ],
      "name": "TransferInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bholdusToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transfer_id",
          "type": "uint256"
        }
      ],
      "name": "confirmTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceFreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chain",
          "type": "uint16"
        }
      ],
      "name": "forceRegisterChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "forceRegisterRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "forceRegisterToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "forceSetFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "forceSetMinDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceUnfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chain",
          "type": "uint16"
        }
      ],
      "name": "forceUnregisterChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "forceUnregisterRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "forceWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "forceWithdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDeposit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "targetChain",
          "type": "uint16"
        }
      ],
      "name": "initiateTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextConfirmOutboundTransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextInboundTransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOutboundTransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outboundTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "serviceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "targetChain",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "relayers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transfer_id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "from",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd67c916b5356d17981e639385ac9a7d65e224de2a1ef5f82a5c9f9ae515c9fa4",
  "receipt": {
    "to": null,
    "from": "0x08687a0b65F5d33C374C98aBaC17010d1640C7FD",
    "contractAddress": "0xDEBF814B1d4D1C0F4CA7e3A5A693A251337dDEFc",
    "transactionIndex": 6,
    "gasUsed": "3294053",
    "logsBloom": "0x
    "blockHash": "0x4ce0e46428efe2e162663c6bd22e835609f819628b5ee8472c122989168e6cc6",
    "transactionHash": "0xd67c916b5356d17981e639385ac9a7d65e224de2a1ef5f82a5c9f9ae515c9fa4",
    "logs": [],
    "blockNumber": 14648601,
    "cumulativeGasUsed": "4229235",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d88e567460db397e235afff343693813",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transfer_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transfer_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"TransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bholdusToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transfer_id\",\"type\":\"uint256\"}],\"name\":\"confirmTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"}],\"name\":\"forceRegisterChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"forceRegisterRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"forceRegisterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"forceSetFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forceSetMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUnfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"}],\"name\":\"forceUnregisterChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"forceUnregisterRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"forceWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"initiateTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextConfirmOutboundTransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextInboundTransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOutboundTransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outboundTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transfer_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6eecf5abec3cd10b2e9234936b80b6cb7c174e926542a2fe690a0186558deb40\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"contracts/bridge/Bridge.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../token/BEP20/IBEP20.sol\\\";\\n\\ncontract Bridge is OwnableUpgradeable, UUPSUpgradeable {\\n    struct TransferInfo {\\n        uint256 amount;\\n        uint256 serviceFee;\\n        address from;\\n        bytes32 to;\\n        uint16 targetChain;\\n        bool isExist;\\n    }\\n\\n    mapping(uint256 => TransferInfo) public outboundTransfers;\\n    mapping(address => bool) public relayers;\\n    mapping(uint16 => bool) public chains;\\n    uint256 public nextOutboundTransferId;\\n    uint256 public nextConfirmOutboundTransferId;\\n    uint256 public nextInboundTransferId;\\n    uint256 public serviceFee;\\n    uint256 public minDeposit;\\n    address public bholdusToken;\\n    bool public frozen;\\n\\n    event TransferInitiated(\\n        uint256 indexed transfer_id,\\n        address indexed from,\\n        bytes32 indexed to,\\n        uint256 amount,\\n        uint16 targetChain\\n    );\\n\\n    event TokensReleased(\\n        uint256 indexed transfer_id,\\n        bytes32 indexed from,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    function initialize(\\n        address _admin,\\n        address _token,\\n        uint256 _fee,\\n        uint256 _minDeposit\\n    ) public initializer returns (bool) {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        bholdusToken = _token;\\n        serviceFee = _fee;\\n        minDeposit = _minDeposit;\\n\\n        transferOwnership(_admin);\\n\\n        return true;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyOwner\\n    {}\\n\\n    function initiateTransfer(\\n        bytes32 to,\\n        uint256 amount,\\n        uint16 targetChain\\n    ) public payable {\\n        require(!frozen, \\\"Bridge is frozen by admin\\\");\\n        require(chains[targetChain], \\\"Unsupported chain\\\");\\n        require(msg.value == serviceFee, \\\"Missing service fee\\\");\\n        require(amount >= minDeposit, \\\"Minimum amount required\\\");\\n\\n        IBEP20(bholdusToken).transferFrom(msg.sender, address(this), amount);\\n\\n        //set transfer info\\n        TransferInfo memory transferInfo;\\n        transferInfo.serviceFee = msg.value;\\n        transferInfo.amount = amount;\\n        transferInfo.from = msg.sender;\\n        transferInfo.to = to;\\n        transferInfo.targetChain = targetChain;\\n        transferInfo.isExist = true;\\n        outboundTransfers[nextOutboundTransferId] = transferInfo;\\n\\n        emit TransferInitiated(\\n            nextOutboundTransferId,\\n            msg.sender,\\n            to,\\n            amount,\\n            targetChain\\n        );\\n        nextOutboundTransferId = nextOutboundTransferId + 1;\\n    }\\n\\n    function confirmTransfer(uint256 transfer_id) public onlyRelayer {\\n        require(!frozen, \\\"Bridge is frozen by admin\\\");\\n        require(\\n            nextConfirmOutboundTransferId < nextOutboundTransferId,\\n            \\\"All transfers are confirmed\\\"\\n        );\\n\\n        require(\\n            nextConfirmOutboundTransferId == transfer_id,\\n            \\\"Invalid transfer id\\\"\\n        );\\n\\n        TransferInfo memory transferInfo = outboundTransfers[transfer_id];\\n        payable(address(msg.sender)).transfer(transferInfo.serviceFee);\\n\\n        nextConfirmOutboundTransferId = nextConfirmOutboundTransferId + 1;\\n    }\\n\\n    function releaseToken(\\n        uint256 transfer_id,\\n        bytes32 from,\\n        address to,\\n        uint256 amount\\n    ) public onlyRelayer {\\n        require(!frozen, \\\"Bridge is frozen by admin\\\");\\n        require(transfer_id == nextInboundTransferId, \\\"Invalid transfer id\\\");\\n        IBEP20(bholdusToken).transfer(to, amount);\\n        nextInboundTransferId += 1;\\n        emit TokensReleased(transfer_id, from, to, amount);\\n    }\\n\\n    function getBalance(address addr) public view returns (uint256) {\\n        return addr.balance;\\n    }\\n\\n    function forceRegisterRelayer(address _relayer) public onlyOwner {\\n        relayers[_relayer] = true;\\n    }\\n\\n    function forceUnregisterRelayer(address _relayer) public onlyOwner {\\n        relayers[_relayer] = false;\\n    }\\n\\n    function forceRegisterToken(address _token) public onlyOwner {\\n        bholdusToken = _token;\\n    }\\n\\n    function forceSetFee(uint256 _fee) public onlyOwner {\\n        serviceFee = _fee;\\n    }\\n\\n    function forceWithdrawNative(address payable to) public onlyOwner {\\n        to.transfer(address(this).balance);\\n    }\\n\\n    function forceWithdraw(address to) public onlyOwner {\\n        IBEP20(bholdusToken).transfer(\\n            to,\\n            IBEP20(bholdusToken).balanceOf(address(this))\\n        );\\n    }\\n\\n    function forceRegisterChain(uint16 chain) public onlyOwner {\\n        chains[chain] = true;\\n    }\\n\\n    function forceUnregisterChain(uint16 chain) public onlyOwner {\\n        chains[chain] = false;\\n    }\\n\\n    function forceSetMinDeposit(uint256 amount) public onlyOwner {\\n        minDeposit = amount;\\n    }\\n\\n    function forceFreeze() public onlyOwner {\\n        frozen = true;\\n    }\\n\\n    function forceUnfreeze() public onlyOwner {\\n        frozen = false;\\n    }\\n\\n    modifier onlyRelayer() {\\n        require(\\n            relayers[msg.sender] == true,\\n            \\\"Caller is not the registered relayer\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x88c8286031638a541cce84db9781087f67329b2b5e535ed1b7b4b8c4d101cd7e\",\"license\":\"MIT\"},\"contracts/token/BEP20/IBEP20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x36d3e404bfb1e4f60fb1f40f639661c3f036b2d17eca85a4d47d256b6c468fb6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1660601b81525034801561004657600080fd5b5060805160601c613af861007a60003960008181610ccd01528181610d5c01528181610fe101526110700152613af86000f3fe6080604052600436106101d85760003560e01c8063609c951a11610102578063b6e5c6ca11610095578063eb9b93bc11610064578063eb9b93bc14610652578063f2fde38b1461066e578063f8b2cb4f14610697578063fed8c3a6146106d4576101d8565b8063b6e5c6ca146105ac578063b800f993146105d5578063d851f1f4146105ec578063eb990c5914610615576101d8565b8063882f3e16116100d1578063882f3e16146105045780638abdf5aa1461052d5780638da5cb5b1461055857806396d0a30314610583576101d8565b8063609c951a14610457578063715018a61461048057806372e39cc9146104975780637c033df7146104d9576101d8565b80633659cfe61161017a5780634f1ef286116101495780634f1ef286146103aa5780635300f841146103c65780635c385ba8146104035780635f8568cd1461042e576101d8565b80633659cfe6146103165780633c263d331461033f57806341b3d185146103565780634cd9bf5814610381576101d8565b80631a8fbf67116101b65780631a8fbf671461026e5780631e166f1c14610299578063215b1032146102c45780632c48e7db146102ed576101d8565b8063054f7d9c146101dd5780630e74015614610208578063116e354b14610231575b600080fd5b3480156101e957600080fd5b506101f26106fd565b6040516101ff9190613186565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a9190612dcf565b610710565b005b34801561023d57600080fd5b5061025860048036038101906102539190612d54565b610957565b6040516102659190613186565b60405180910390f35b34801561027a57600080fd5b50610283610977565b604051610290919061310b565b60405180910390f35b3480156102a557600080fd5b506102ae61099d565b6040516102bb91906133a3565b60405180910390f35b3480156102d057600080fd5b506102eb60048036038101906102e69190612d7d565b6109a3565b005b3480156102f957600080fd5b50610314600480360381019061030f9190612d7d565b610a29565b005b34801561032257600080fd5b5061033d60048036038101906103389190612bd3565b610ccb565b005b34801561034b57600080fd5b50610354610e7a565b005b34801561036257600080fd5b5061036b610f13565b60405161037891906133a3565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a39190612bfc565b610f19565b005b6103c460048036038101906103bf9190612c88565b610fdf565b005b3480156103d257600080fd5b506103ed60048036038101906103e89190612bd3565b61111c565b6040516103fa9190613186565b60405180910390f35b34801561040f57600080fd5b5061041861113c565b60405161042591906133a3565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190612bd3565b611142565b005b34801561046357600080fd5b5061047e60048036038101906104799190612d54565b611202565b005b34801561048c57600080fd5b506104956112b5565b005b3480156104a357600080fd5b506104be60048036038101906104b99190612d7d565b61133d565b6040516104d0969594939291906133e7565b60405180910390f35b3480156104e557600080fd5b506104ee6113b4565b6040516104fb91906133a3565b60405180910390f35b34801561051057600080fd5b5061052b60048036038101906105269190612bd3565b6113ba565b005b34801561053957600080fd5b50610542611593565b60405161054f91906133a3565b60405180910390f35b34801561056457600080fd5b5061056d611599565b60405161057a919061310b565b60405180910390f35b34801561058f57600080fd5b506105aa60048036038101906105a59190612d54565b6115c3565b005b3480156105b857600080fd5b506105d360048036038101906105ce9190612bd3565b611676565b005b3480156105e157600080fd5b506105ea61174d565b005b3480156105f857600080fd5b50610613600480360381019061060e9190612bd3565b6117e6565b005b34801561062157600080fd5b5061063c60048036038101906106379190612c25565b6118bd565b6040516106499190613186565b60405180910390f35b61066c60048036038101906106679190612d05565b611a09565b005b34801561067a57600080fd5b5061069560048036038101906106909190612bd3565b611daf565b005b3480156106a357600080fd5b506106be60048036038101906106b99190612bd3565b611ea7565b6040516106cb91906133a3565b60405180910390f35b3480156106e057600080fd5b506106fb60048036038101906106f69190612d7d565b611ec8565b005b60d160149054906101000a900460ff1681565b6001151560ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079a90613223565b60405180910390fd5b60d160149054906101000a900460ff16156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea90613363565b60405180910390fd5b60ce548414610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90613303565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161089492919061315d565b602060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190612cdc565b50600160ce60008282546108fa91906134d0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1683857f60c4bb98a247ace5183d5a5fa34a6cf34ce8101a7608d5edcd508cb5de5e222e8460405161094991906133a3565b60405180910390a450505050565b60cb6020528060005260406000206000915054906101000a900460ff1681565b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cc5481565b6109ab611f4e565b73ffffffffffffffffffffffffffffffffffffffff166109c9611599565b73ffffffffffffffffffffffffffffffffffffffff1614610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1690613343565b60405180910390fd5b8060cf8190555050565b6001151560ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390613223565b60405180910390fd5b60d160149054906101000a900460ff1615610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0390613363565b60405180910390fd5b60cc5460cd5410610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b49906132e3565b60405180910390fd5b8060cd5414610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d90613303565b60405180910390fd5b600060c960008381526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900461ffff1661ffff1661ffff1681526020016004820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff166108fc82602001519081150290604051600060405180830381858888f19350505050158015610cb1573d6000803e3d6000fd5b50600160cd54610cc191906134d0565b60cd819055505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610d5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5190613243565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d99611f56565b73ffffffffffffffffffffffffffffffffffffffff1614610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690613263565b60405180910390fd5b610df881611fad565b610e7781600067ffffffffffffffff811115610e3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610e6f5781602001600182028036833780820191505090505b50600061202c565b50565b610e82611f4e565b73ffffffffffffffffffffffffffffffffffffffff16610ea0611599565b73ffffffffffffffffffffffffffffffffffffffff1614610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed90613343565b60405180910390fd5b600060d160146101000a81548160ff021916908315150217905550565b60d05481565b610f21611f4e565b73ffffffffffffffffffffffffffffffffffffffff16610f3f611599565b73ffffffffffffffffffffffffffffffffffffffff1614610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c90613343565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610fdb573d6000803e3d6000fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590613243565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110ad611f56565b73ffffffffffffffffffffffffffffffffffffffff1614611103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fa90613263565b60405180910390fd5b61110c82611fad565b6111188282600161202c565b5050565b60ca6020528060005260406000206000915054906101000a900460ff1681565b60ce5481565b61114a611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611168611599565b73ffffffffffffffffffffffffffffffffffffffff16146111be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b590613343565b60405180910390fd5b8060d160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61120a611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611228611599565b73ffffffffffffffffffffffffffffffffffffffff161461127e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127590613343565b60405180910390fd5b600160cb60008361ffff1661ffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6112bd611f4e565b73ffffffffffffffffffffffffffffffffffffffff166112db611599565b73ffffffffffffffffffffffffffffffffffffffff1614611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132890613343565b60405180910390fd5b61133b60006121fd565b565b60c96020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900461ffff16908060040160029054906101000a900460ff16905086565b60cd5481565b6113c2611f4e565b73ffffffffffffffffffffffffffffffffffffffff166113e0611599565b73ffffffffffffffffffffffffffffffffffffffff1614611436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142d90613343565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114d0919061310b565b60206040518083038186803b1580156114e857600080fd5b505afa1580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190612da6565b6040518363ffffffff1660e01b815260040161153d92919061315d565b602060405180830381600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f9190612cdc565b5050565b60cf5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6115cb611f4e565b73ffffffffffffffffffffffffffffffffffffffff166115e9611599565b73ffffffffffffffffffffffffffffffffffffffff161461163f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163690613343565b60405180910390fd5b600060cb60008361ffff1661ffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61167e611f4e565b73ffffffffffffffffffffffffffffffffffffffff1661169c611599565b73ffffffffffffffffffffffffffffffffffffffff16146116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e990613343565b60405180910390fd5b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b611755611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611773611599565b73ffffffffffffffffffffffffffffffffffffffff16146117c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c090613343565b60405180910390fd5b600160d160146101000a81548160ff021916908315150217905550565b6117ee611f4e565b73ffffffffffffffffffffffffffffffffffffffff1661180c611599565b73ffffffffffffffffffffffffffffffffffffffff1614611862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185990613343565b60405180910390fd5b600160ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060019054906101000a900460ff16806118e4575060008054906101000a900460ff16155b611923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191a906132a3565b60405180910390fd5b60008060019054906101000a900460ff161590508015611973576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61197b6122c3565b6119836123ac565b8460d160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360cf819055508260d0819055506119db86611daf565b600191508015611a005760008060016101000a81548160ff0219169083151502179055505b50949350505050565b60d160149054906101000a900460ff1615611a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5090613363565b60405180910390fd5b60cb60008261ffff1661ffff16815260200190815260200160002060009054906101000a900460ff16611ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab8906131c3565b60405180910390fd5b60cf543414611b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afc90613283565b60405180910390fd5b60d054821015611b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b41906132c3565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611ba993929190613126565b602060405180830381600087803b158015611bc357600080fd5b505af1158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190612cdc565b50611c04612a83565b348160200181815250508281600001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381606001818152505081816080019061ffff16908161ffff168152505060018160a00190151590811515815250508060c9600060cc548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a81548160ff021916908315150217905550905050833373ffffffffffffffffffffffffffffffffffffffff1660cc547f6eda71a50ae771fd150241e0e84416fc65df5420a5513ddf916f82ed22eebaeb8686604051611d8c9291906133be565b60405180910390a4600160cc54611da391906134d0565b60cc8190555050505050565b611db7611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611dd5611599565b73ffffffffffffffffffffffffffffffffffffffff1614611e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2290613343565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9290613203565b60405180910390fd5b611ea4816121fd565b50565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b611ed0611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611eee611599565b73ffffffffffffffffffffffffffffffffffffffff1614611f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3b90613343565b60405180910390fd5b8060d08190555050565b600033905090565b6000611f847f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612495565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611fb5611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611fd3611599565b73ffffffffffffffffffffffffffffffffffffffff1614612029576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202090613343565b60405180910390fd5b50565b6000612036611f56565b90506120418461249f565b60008351118061204e5750815b1561205f5761205d8484612558565b505b600061208d7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b61263c565b90508060000160009054906101000a900460ff166121f65760018160000160006101000a81548160ff02191690831515021790555061215985836040516024016120d7919061310b565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612558565b5060008160000160006101000a81548160ff02191690831515021790555061217f611f56565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146121ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e3906131e3565b60405180910390fd5b6121f585612646565b5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16806122e9575060008054906101000a900460ff16155b612328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231f906132a3565b60405180910390fd5b60008060019054906101000a900460ff161590508015612378576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612380612695565b61238861276e565b80156123a95760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806123d2575060008054906101000a900460ff16155b612411576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612408906132a3565b60405180910390fd5b60008060019054906101000a900460ff161590508015612461576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612469612857565b612471612930565b80156124925760008060016101000a81548160ff0219169083151502179055505b50565b6000819050919050565b6124a881612a09565b6124e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124de90613323565b60405180910390fd5b806125147f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612495565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061256383612a09565b6125a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259990613383565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516125ca91906130f4565b600060405180830381855af49150503d8060008114612605576040519150601f19603f3d011682016040523d82523d6000602084013e61260a565b606091505b50915091506126328282604051806060016040528060278152602001613a9c60279139612a1c565b9250505092915050565b6000819050919050565b61264f8161249f565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff16806126bb575060008054906101000a900460ff16155b6126fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f1906132a3565b60405180910390fd5b60008060019054906101000a900460ff16159050801561274a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561276b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612794575060008054906101000a900460ff16155b6127d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ca906132a3565b60405180910390fd5b60008060019054906101000a900460ff161590508015612823576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61283361282e611f4e565b6121fd565b80156128545760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061287d575060008054906101000a900460ff16155b6128bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b3906132a3565b60405180910390fd5b60008060019054906101000a900460ff16159050801561290c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561292d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612956575060008054906101000a900460ff16155b612995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298c906132a3565b60405180910390fd5b60008060019054906101000a900460ff1615905080156129e5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612a065760008060016101000a81548160ff0219169083151502179055505b50565b600080823b905060008111915050919050565b60608315612a2c57829050612a7c565b600083511115612a3f5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7391906131a1565b60405180910390fd5b9392505050565b6040518060c001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001600061ffff1681526020016000151581525090565b6000612aeb612ae68461346d565b613448565b905082815260208101848484011115612b0357600080fd5b612b0e848285613598565b509392505050565b600081359050612b2581613a11565b92915050565b600081359050612b3a81613a28565b92915050565b600081519050612b4f81613a3f565b92915050565b600081359050612b6481613a56565b92915050565b600082601f830112612b7b57600080fd5b8135612b8b848260208601612ad8565b91505092915050565b600081359050612ba381613a6d565b92915050565b600081359050612bb881613a84565b92915050565b600081519050612bcd81613a84565b92915050565b600060208284031215612be557600080fd5b6000612bf384828501612b16565b91505092915050565b600060208284031215612c0e57600080fd5b6000612c1c84828501612b2b565b91505092915050565b60008060008060808587031215612c3b57600080fd5b6000612c4987828801612b16565b9450506020612c5a87828801612b16565b9350506040612c6b87828801612ba9565b9250506060612c7c87828801612ba9565b91505092959194509250565b60008060408385031215612c9b57600080fd5b6000612ca985828601612b16565b925050602083013567ffffffffffffffff811115612cc657600080fd5b612cd285828601612b6a565b9150509250929050565b600060208284031215612cee57600080fd5b6000612cfc84828501612b40565b91505092915050565b600080600060608486031215612d1a57600080fd5b6000612d2886828701612b55565b9350506020612d3986828701612ba9565b9250506040612d4a86828701612b94565b9150509250925092565b600060208284031215612d6657600080fd5b6000612d7484828501612b94565b91505092915050565b600060208284031215612d8f57600080fd5b6000612d9d84828501612ba9565b91505092915050565b600060208284031215612db857600080fd5b6000612dc684828501612bbe565b91505092915050565b60008060008060808587031215612de557600080fd5b6000612df387828801612ba9565b9450506020612e0487828801612b55565b9350506040612e1587828801612b16565b9250506060612e2687828801612ba9565b91505092959194509250565b612e3b81613526565b82525050565b612e4a8161354a565b82525050565b612e5981613556565b82525050565b6000612e6a8261349e565b612e7481856134b4565b9350612e848185602086016135a7565b80840191505092915050565b6000612e9b826134a9565b612ea581856134bf565b9350612eb58185602086016135a7565b612ebe81613669565b840191505092915050565b6000612ed66011836134bf565b9150612ee18261367a565b602082019050919050565b6000612ef9602f836134bf565b9150612f04826136a3565b604082019050919050565b6000612f1c6026836134bf565b9150612f27826136f2565b604082019050919050565b6000612f3f6024836134bf565b9150612f4a82613741565b604082019050919050565b6000612f62602c836134bf565b9150612f6d82613790565b604082019050919050565b6000612f85602c836134bf565b9150612f90826137df565b604082019050919050565b6000612fa86013836134bf565b9150612fb38261382e565b602082019050919050565b6000612fcb602e836134bf565b9150612fd682613857565b604082019050919050565b6000612fee6017836134bf565b9150612ff9826138a6565b602082019050919050565b6000613011601b836134bf565b915061301c826138cf565b602082019050919050565b60006130346013836134bf565b915061303f826138f8565b602082019050919050565b6000613057602d836134bf565b915061306282613921565b604082019050919050565b600061307a6020836134bf565b915061308582613970565b602082019050919050565b600061309d6019836134bf565b91506130a882613999565b602082019050919050565b60006130c06026836134bf565b91506130cb826139c2565b604082019050919050565b6130df81613560565b82525050565b6130ee8161358e565b82525050565b60006131008284612e5f565b915081905092915050565b60006020820190506131206000830184612e32565b92915050565b600060608201905061313b6000830186612e32565b6131486020830185612e32565b61315560408301846130e5565b949350505050565b60006040820190506131726000830185612e32565b61317f60208301846130e5565b9392505050565b600060208201905061319b6000830184612e41565b92915050565b600060208201905081810360008301526131bb8184612e90565b905092915050565b600060208201905081810360008301526131dc81612ec9565b9050919050565b600060208201905081810360008301526131fc81612eec565b9050919050565b6000602082019050818103600083015261321c81612f0f565b9050919050565b6000602082019050818103600083015261323c81612f32565b9050919050565b6000602082019050818103600083015261325c81612f55565b9050919050565b6000602082019050818103600083015261327c81612f78565b9050919050565b6000602082019050818103600083015261329c81612f9b565b9050919050565b600060208201905081810360008301526132bc81612fbe565b9050919050565b600060208201905081810360008301526132dc81612fe1565b9050919050565b600060208201905081810360008301526132fc81613004565b9050919050565b6000602082019050818103600083015261331c81613027565b9050919050565b6000602082019050818103600083015261333c8161304a565b9050919050565b6000602082019050818103600083015261335c8161306d565b9050919050565b6000602082019050818103600083015261337c81613090565b9050919050565b6000602082019050818103600083015261339c816130b3565b9050919050565b60006020820190506133b860008301846130e5565b92915050565b60006040820190506133d360008301856130e5565b6133e060208301846130d6565b9392505050565b600060c0820190506133fc60008301896130e5565b61340960208301886130e5565b6134166040830187612e32565b6134236060830186612e50565b61343060808301856130d6565b61343d60a0830184612e41565b979650505050505050565b6000613452613463565b905061345e82826135da565b919050565b6000604051905090565b600067ffffffffffffffff8211156134885761348761363a565b5b61349182613669565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006134db8261358e565b91506134e68361358e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561351b5761351a61360b565b5b828201905092915050565b60006135318261356e565b9050919050565b60006135438261356e565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156135c55780820151818401526020810190506135aa565b838111156135d4576000848401525b50505050565b6135e382613669565b810181811067ffffffffffffffff821117156136025761360161363a565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f556e737570706f7274656420636861696e000000000000000000000000000000600082015250565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f742074686520726567697374657265642072656c60008201527f6179657200000000000000000000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b7f4d697373696e6720736572766963652066656500000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d696e696d756d20616d6f756e74207265717569726564000000000000000000600082015250565b7f416c6c207472616e73666572732061726520636f6e6669726d65640000000000600082015250565b7f496e76616c6964207472616e7366657220696400000000000000000000000000600082015250565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4272696467652069732066726f7a656e2062792061646d696e00000000000000600082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b613a1a81613526565b8114613a2557600080fd5b50565b613a3181613538565b8114613a3c57600080fd5b50565b613a488161354a565b8114613a5357600080fd5b50565b613a5f81613556565b8114613a6a57600080fd5b50565b613a7681613560565b8114613a8157600080fd5b50565b613a8d8161358e565b8114613a9857600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a93382375ee84cfa04b7731c10a11de9523a9c8553d3a7633831cf6ffa9d2e8064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c8063609c951a11610102578063b6e5c6ca11610095578063eb9b93bc11610064578063eb9b93bc14610652578063f2fde38b1461066e578063f8b2cb4f14610697578063fed8c3a6146106d4576101d8565b8063b6e5c6ca146105ac578063b800f993146105d5578063d851f1f4146105ec578063eb990c5914610615576101d8565b8063882f3e16116100d1578063882f3e16146105045780638abdf5aa1461052d5780638da5cb5b1461055857806396d0a30314610583576101d8565b8063609c951a14610457578063715018a61461048057806372e39cc9146104975780637c033df7146104d9576101d8565b80633659cfe61161017a5780634f1ef286116101495780634f1ef286146103aa5780635300f841146103c65780635c385ba8146104035780635f8568cd1461042e576101d8565b80633659cfe6146103165780633c263d331461033f57806341b3d185146103565780634cd9bf5814610381576101d8565b80631a8fbf67116101b65780631a8fbf671461026e5780631e166f1c14610299578063215b1032146102c45780632c48e7db146102ed576101d8565b8063054f7d9c146101dd5780630e74015614610208578063116e354b14610231575b600080fd5b3480156101e957600080fd5b506101f26106fd565b6040516101ff9190613186565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a9190612dcf565b610710565b005b34801561023d57600080fd5b5061025860048036038101906102539190612d54565b610957565b6040516102659190613186565b60405180910390f35b34801561027a57600080fd5b50610283610977565b604051610290919061310b565b60405180910390f35b3480156102a557600080fd5b506102ae61099d565b6040516102bb91906133a3565b60405180910390f35b3480156102d057600080fd5b506102eb60048036038101906102e69190612d7d565b6109a3565b005b3480156102f957600080fd5b50610314600480360381019061030f9190612d7d565b610a29565b005b34801561032257600080fd5b5061033d60048036038101906103389190612bd3565b610ccb565b005b34801561034b57600080fd5b50610354610e7a565b005b34801561036257600080fd5b5061036b610f13565b60405161037891906133a3565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a39190612bfc565b610f19565b005b6103c460048036038101906103bf9190612c88565b610fdf565b005b3480156103d257600080fd5b506103ed60048036038101906103e89190612bd3565b61111c565b6040516103fa9190613186565b60405180910390f35b34801561040f57600080fd5b5061041861113c565b60405161042591906133a3565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190612bd3565b611142565b005b34801561046357600080fd5b5061047e60048036038101906104799190612d54565b611202565b005b34801561048c57600080fd5b506104956112b5565b005b3480156104a357600080fd5b506104be60048036038101906104b99190612d7d565b61133d565b6040516104d0969594939291906133e7565b60405180910390f35b3480156104e557600080fd5b506104ee6113b4565b6040516104fb91906133a3565b60405180910390f35b34801561051057600080fd5b5061052b60048036038101906105269190612bd3565b6113ba565b005b34801561053957600080fd5b50610542611593565b60405161054f91906133a3565b60405180910390f35b34801561056457600080fd5b5061056d611599565b60405161057a919061310b565b60405180910390f35b34801561058f57600080fd5b506105aa60048036038101906105a59190612d54565b6115c3565b005b3480156105b857600080fd5b506105d360048036038101906105ce9190612bd3565b611676565b005b3480156105e157600080fd5b506105ea61174d565b005b3480156105f857600080fd5b50610613600480360381019061060e9190612bd3565b6117e6565b005b34801561062157600080fd5b5061063c60048036038101906106379190612c25565b6118bd565b6040516106499190613186565b60405180910390f35b61066c60048036038101906106679190612d05565b611a09565b005b34801561067a57600080fd5b5061069560048036038101906106909190612bd3565b611daf565b005b3480156106a357600080fd5b506106be60048036038101906106b99190612bd3565b611ea7565b6040516106cb91906133a3565b60405180910390f35b3480156106e057600080fd5b506106fb60048036038101906106f69190612d7d565b611ec8565b005b60d160149054906101000a900460ff1681565b6001151560ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079a90613223565b60405180910390fd5b60d160149054906101000a900460ff16156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea90613363565b60405180910390fd5b60ce548414610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90613303565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161089492919061315d565b602060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190612cdc565b50600160ce60008282546108fa91906134d0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1683857f60c4bb98a247ace5183d5a5fa34a6cf34ce8101a7608d5edcd508cb5de5e222e8460405161094991906133a3565b60405180910390a450505050565b60cb6020528060005260406000206000915054906101000a900460ff1681565b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cc5481565b6109ab611f4e565b73ffffffffffffffffffffffffffffffffffffffff166109c9611599565b73ffffffffffffffffffffffffffffffffffffffff1614610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1690613343565b60405180910390fd5b8060cf8190555050565b6001151560ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390613223565b60405180910390fd5b60d160149054906101000a900460ff1615610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0390613363565b60405180910390fd5b60cc5460cd5410610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b49906132e3565b60405180910390fd5b8060cd5414610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d90613303565b60405180910390fd5b600060c960008381526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900461ffff1661ffff1661ffff1681526020016004820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff166108fc82602001519081150290604051600060405180830381858888f19350505050158015610cb1573d6000803e3d6000fd5b50600160cd54610cc191906134d0565b60cd819055505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610d5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5190613243565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d99611f56565b73ffffffffffffffffffffffffffffffffffffffff1614610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690613263565b60405180910390fd5b610df881611fad565b610e7781600067ffffffffffffffff811115610e3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610e6f5781602001600182028036833780820191505090505b50600061202c565b50565b610e82611f4e565b73ffffffffffffffffffffffffffffffffffffffff16610ea0611599565b73ffffffffffffffffffffffffffffffffffffffff1614610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed90613343565b60405180910390fd5b600060d160146101000a81548160ff021916908315150217905550565b60d05481565b610f21611f4e565b73ffffffffffffffffffffffffffffffffffffffff16610f3f611599565b73ffffffffffffffffffffffffffffffffffffffff1614610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c90613343565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610fdb573d6000803e3d6000fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590613243565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110ad611f56565b73ffffffffffffffffffffffffffffffffffffffff1614611103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fa90613263565b60405180910390fd5b61110c82611fad565b6111188282600161202c565b5050565b60ca6020528060005260406000206000915054906101000a900460ff1681565b60ce5481565b61114a611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611168611599565b73ffffffffffffffffffffffffffffffffffffffff16146111be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b590613343565b60405180910390fd5b8060d160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61120a611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611228611599565b73ffffffffffffffffffffffffffffffffffffffff161461127e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127590613343565b60405180910390fd5b600160cb60008361ffff1661ffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6112bd611f4e565b73ffffffffffffffffffffffffffffffffffffffff166112db611599565b73ffffffffffffffffffffffffffffffffffffffff1614611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132890613343565b60405180910390fd5b61133b60006121fd565b565b60c96020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900461ffff16908060040160029054906101000a900460ff16905086565b60cd5481565b6113c2611f4e565b73ffffffffffffffffffffffffffffffffffffffff166113e0611599565b73ffffffffffffffffffffffffffffffffffffffff1614611436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142d90613343565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114d0919061310b565b60206040518083038186803b1580156114e857600080fd5b505afa1580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190612da6565b6040518363ffffffff1660e01b815260040161153d92919061315d565b602060405180830381600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f9190612cdc565b5050565b60cf5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6115cb611f4e565b73ffffffffffffffffffffffffffffffffffffffff166115e9611599565b73ffffffffffffffffffffffffffffffffffffffff161461163f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163690613343565b60405180910390fd5b600060cb60008361ffff1661ffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61167e611f4e565b73ffffffffffffffffffffffffffffffffffffffff1661169c611599565b73ffffffffffffffffffffffffffffffffffffffff16146116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e990613343565b60405180910390fd5b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b611755611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611773611599565b73ffffffffffffffffffffffffffffffffffffffff16146117c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c090613343565b60405180910390fd5b600160d160146101000a81548160ff021916908315150217905550565b6117ee611f4e565b73ffffffffffffffffffffffffffffffffffffffff1661180c611599565b73ffffffffffffffffffffffffffffffffffffffff1614611862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185990613343565b60405180910390fd5b600160ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060019054906101000a900460ff16806118e4575060008054906101000a900460ff16155b611923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191a906132a3565b60405180910390fd5b60008060019054906101000a900460ff161590508015611973576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61197b6122c3565b6119836123ac565b8460d160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360cf819055508260d0819055506119db86611daf565b600191508015611a005760008060016101000a81548160ff0219169083151502179055505b50949350505050565b60d160149054906101000a900460ff1615611a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5090613363565b60405180910390fd5b60cb60008261ffff1661ffff16815260200190815260200160002060009054906101000a900460ff16611ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab8906131c3565b60405180910390fd5b60cf543414611b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afc90613283565b60405180910390fd5b60d054821015611b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b41906132c3565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611ba993929190613126565b602060405180830381600087803b158015611bc357600080fd5b505af1158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190612cdc565b50611c04612a83565b348160200181815250508281600001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381606001818152505081816080019061ffff16908161ffff168152505060018160a00190151590811515815250508060c9600060cc548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a81548160ff021916908315150217905550905050833373ffffffffffffffffffffffffffffffffffffffff1660cc547f6eda71a50ae771fd150241e0e84416fc65df5420a5513ddf916f82ed22eebaeb8686604051611d8c9291906133be565b60405180910390a4600160cc54611da391906134d0565b60cc8190555050505050565b611db7611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611dd5611599565b73ffffffffffffffffffffffffffffffffffffffff1614611e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2290613343565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9290613203565b60405180910390fd5b611ea4816121fd565b50565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b611ed0611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611eee611599565b73ffffffffffffffffffffffffffffffffffffffff1614611f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3b90613343565b60405180910390fd5b8060d08190555050565b600033905090565b6000611f847f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612495565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611fb5611f4e565b73ffffffffffffffffffffffffffffffffffffffff16611fd3611599565b73ffffffffffffffffffffffffffffffffffffffff1614612029576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202090613343565b60405180910390fd5b50565b6000612036611f56565b90506120418461249f565b60008351118061204e5750815b1561205f5761205d8484612558565b505b600061208d7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b61263c565b90508060000160009054906101000a900460ff166121f65760018160000160006101000a81548160ff02191690831515021790555061215985836040516024016120d7919061310b565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612558565b5060008160000160006101000a81548160ff02191690831515021790555061217f611f56565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146121ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e3906131e3565b60405180910390fd5b6121f585612646565b5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16806122e9575060008054906101000a900460ff16155b612328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231f906132a3565b60405180910390fd5b60008060019054906101000a900460ff161590508015612378576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612380612695565b61238861276e565b80156123a95760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806123d2575060008054906101000a900460ff16155b612411576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612408906132a3565b60405180910390fd5b60008060019054906101000a900460ff161590508015612461576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612469612857565b612471612930565b80156124925760008060016101000a81548160ff0219169083151502179055505b50565b6000819050919050565b6124a881612a09565b6124e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124de90613323565b60405180910390fd5b806125147f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612495565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061256383612a09565b6125a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259990613383565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516125ca91906130f4565b600060405180830381855af49150503d8060008114612605576040519150601f19603f3d011682016040523d82523d6000602084013e61260a565b606091505b50915091506126328282604051806060016040528060278152602001613a9c60279139612a1c565b9250505092915050565b6000819050919050565b61264f8161249f565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff16806126bb575060008054906101000a900460ff16155b6126fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f1906132a3565b60405180910390fd5b60008060019054906101000a900460ff16159050801561274a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561276b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612794575060008054906101000a900460ff16155b6127d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ca906132a3565b60405180910390fd5b60008060019054906101000a900460ff161590508015612823576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61283361282e611f4e565b6121fd565b80156128545760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061287d575060008054906101000a900460ff16155b6128bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b3906132a3565b60405180910390fd5b60008060019054906101000a900460ff16159050801561290c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561292d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612956575060008054906101000a900460ff16155b612995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298c906132a3565b60405180910390fd5b60008060019054906101000a900460ff1615905080156129e5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612a065760008060016101000a81548160ff0219169083151502179055505b50565b600080823b905060008111915050919050565b60608315612a2c57829050612a7c565b600083511115612a3f5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7391906131a1565b60405180910390fd5b9392505050565b6040518060c001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001600061ffff1681526020016000151581525090565b6000612aeb612ae68461346d565b613448565b905082815260208101848484011115612b0357600080fd5b612b0e848285613598565b509392505050565b600081359050612b2581613a11565b92915050565b600081359050612b3a81613a28565b92915050565b600081519050612b4f81613a3f565b92915050565b600081359050612b6481613a56565b92915050565b600082601f830112612b7b57600080fd5b8135612b8b848260208601612ad8565b91505092915050565b600081359050612ba381613a6d565b92915050565b600081359050612bb881613a84565b92915050565b600081519050612bcd81613a84565b92915050565b600060208284031215612be557600080fd5b6000612bf384828501612b16565b91505092915050565b600060208284031215612c0e57600080fd5b6000612c1c84828501612b2b565b91505092915050565b60008060008060808587031215612c3b57600080fd5b6000612c4987828801612b16565b9450506020612c5a87828801612b16565b9350506040612c6b87828801612ba9565b9250506060612c7c87828801612ba9565b91505092959194509250565b60008060408385031215612c9b57600080fd5b6000612ca985828601612b16565b925050602083013567ffffffffffffffff811115612cc657600080fd5b612cd285828601612b6a565b9150509250929050565b600060208284031215612cee57600080fd5b6000612cfc84828501612b40565b91505092915050565b600080600060608486031215612d1a57600080fd5b6000612d2886828701612b55565b9350506020612d3986828701612ba9565b9250506040612d4a86828701612b94565b9150509250925092565b600060208284031215612d6657600080fd5b6000612d7484828501612b94565b91505092915050565b600060208284031215612d8f57600080fd5b6000612d9d84828501612ba9565b91505092915050565b600060208284031215612db857600080fd5b6000612dc684828501612bbe565b91505092915050565b60008060008060808587031215612de557600080fd5b6000612df387828801612ba9565b9450506020612e0487828801612b55565b9350506040612e1587828801612b16565b9250506060612e2687828801612ba9565b91505092959194509250565b612e3b81613526565b82525050565b612e4a8161354a565b82525050565b612e5981613556565b82525050565b6000612e6a8261349e565b612e7481856134b4565b9350612e848185602086016135a7565b80840191505092915050565b6000612e9b826134a9565b612ea581856134bf565b9350612eb58185602086016135a7565b612ebe81613669565b840191505092915050565b6000612ed66011836134bf565b9150612ee18261367a565b602082019050919050565b6000612ef9602f836134bf565b9150612f04826136a3565b604082019050919050565b6000612f1c6026836134bf565b9150612f27826136f2565b604082019050919050565b6000612f3f6024836134bf565b9150612f4a82613741565b604082019050919050565b6000612f62602c836134bf565b9150612f6d82613790565b604082019050919050565b6000612f85602c836134bf565b9150612f90826137df565b604082019050919050565b6000612fa86013836134bf565b9150612fb38261382e565b602082019050919050565b6000612fcb602e836134bf565b9150612fd682613857565b604082019050919050565b6000612fee6017836134bf565b9150612ff9826138a6565b602082019050919050565b6000613011601b836134bf565b915061301c826138cf565b602082019050919050565b60006130346013836134bf565b915061303f826138f8565b602082019050919050565b6000613057602d836134bf565b915061306282613921565b604082019050919050565b600061307a6020836134bf565b915061308582613970565b602082019050919050565b600061309d6019836134bf565b91506130a882613999565b602082019050919050565b60006130c06026836134bf565b91506130cb826139c2565b604082019050919050565b6130df81613560565b82525050565b6130ee8161358e565b82525050565b60006131008284612e5f565b915081905092915050565b60006020820190506131206000830184612e32565b92915050565b600060608201905061313b6000830186612e32565b6131486020830185612e32565b61315560408301846130e5565b949350505050565b60006040820190506131726000830185612e32565b61317f60208301846130e5565b9392505050565b600060208201905061319b6000830184612e41565b92915050565b600060208201905081810360008301526131bb8184612e90565b905092915050565b600060208201905081810360008301526131dc81612ec9565b9050919050565b600060208201905081810360008301526131fc81612eec565b9050919050565b6000602082019050818103600083015261321c81612f0f565b9050919050565b6000602082019050818103600083015261323c81612f32565b9050919050565b6000602082019050818103600083015261325c81612f55565b9050919050565b6000602082019050818103600083015261327c81612f78565b9050919050565b6000602082019050818103600083015261329c81612f9b565b9050919050565b600060208201905081810360008301526132bc81612fbe565b9050919050565b600060208201905081810360008301526132dc81612fe1565b9050919050565b600060208201905081810360008301526132fc81613004565b9050919050565b6000602082019050818103600083015261331c81613027565b9050919050565b6000602082019050818103600083015261333c8161304a565b9050919050565b6000602082019050818103600083015261335c8161306d565b9050919050565b6000602082019050818103600083015261337c81613090565b9050919050565b6000602082019050818103600083015261339c816130b3565b9050919050565b60006020820190506133b860008301846130e5565b92915050565b60006040820190506133d360008301856130e5565b6133e060208301846130d6565b9392505050565b600060c0820190506133fc60008301896130e5565b61340960208301886130e5565b6134166040830187612e32565b6134236060830186612e50565b61343060808301856130d6565b61343d60a0830184612e41565b979650505050505050565b6000613452613463565b905061345e82826135da565b919050565b6000604051905090565b600067ffffffffffffffff8211156134885761348761363a565b5b61349182613669565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006134db8261358e565b91506134e68361358e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561351b5761351a61360b565b5b828201905092915050565b60006135318261356e565b9050919050565b60006135438261356e565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156135c55780820151818401526020810190506135aa565b838111156135d4576000848401525b50505050565b6135e382613669565b810181811067ffffffffffffffff821117156136025761360161363a565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f556e737570706f7274656420636861696e000000000000000000000000000000600082015250565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f742074686520726567697374657265642072656c60008201527f6179657200000000000000000000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b7f4d697373696e6720736572766963652066656500000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d696e696d756d20616d6f756e74207265717569726564000000000000000000600082015250565b7f416c6c207472616e73666572732061726520636f6e6669726d65640000000000600082015250565b7f496e76616c6964207472616e7366657220696400000000000000000000000000600082015250565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4272696467652069732066726f7a656e2062792061646d696e00000000000000600082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b613a1a81613526565b8114613a2557600080fd5b50565b613a3181613538565b8114613a3c57600080fd5b50565b613a488161354a565b8114613a5357600080fd5b50565b613a5f81613556565b8114613a6a57600080fd5b50565b613a7681613560565b8114613a8157600080fd5b50565b613a8d8161358e565b8114613a9857600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a93382375ee84cfa04b7731c10a11de9523a9c8553d3a7633831cf6ffa9d2e8064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 977,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 521,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 688,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1065,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "outboundTransfers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_struct(TransferInfo)1060_storage)"
      },
      {
        "astId": 1069,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "relayers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1073,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "chains",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint16,t_bool)"
      },
      {
        "astId": 1075,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "nextOutboundTransferId",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 1077,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "nextConfirmOutboundTransferId",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 1079,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "nextInboundTransferId",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 1081,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "serviceFee",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 1083,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "minDeposit",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 1085,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "bholdusToken",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 1087,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "frozen",
        "offset": 20,
        "slot": "209",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(TransferInfo)1060_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bridge.TransferInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TransferInfo)1060_storage"
      },
      "t_struct(TransferInfo)1060_storage": {
        "encoding": "inplace",
        "label": "struct Bridge.TransferInfo",
        "members": [
          {
            "astId": 1049,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1051,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "serviceFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1053,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "from",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1055,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "to",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 1057,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "targetChain",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 1059,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "isExist",
            "offset": 2,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}