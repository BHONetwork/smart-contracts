{
  "address": "0x41C25f27C3BA916888CDA995CC962a5Ea4a6E1de",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transfer_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "from",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transfer_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "targetChain",
          "type": "uint16"
        }
      ],
      "name": "TransferInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bholdusToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transfer_id",
          "type": "uint256"
        }
      ],
      "name": "confirmTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceFreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chain",
          "type": "uint16"
        }
      ],
      "name": "forceRegisterChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "forceRegisterRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "forceRegisterToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "forceSetMinDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "forceSetPlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "forceSetServiceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceUnfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chain",
          "type": "uint16"
        }
      ],
      "name": "forceUnregisterChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "forceUnregisterRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "forceWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "forceWithdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDeposit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "targetChain",
          "type": "uint16"
        }
      ],
      "name": "initiateTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextConfirmOutboundTransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextInboundTransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOutboundTransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outboundTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "serviceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "targetChain",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "relayers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transfer_id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "from",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0de5c17e7d121063aac86ce674d62a2581fb907be1c48a8ec63fb5432c734568",
  "receipt": {
    "to": null,
    "from": "0x08687a0b65F5d33C374C98aBaC17010d1640C7FD",
    "contractAddress": "0x41C25f27C3BA916888CDA995CC962a5Ea4a6E1de",
    "transactionIndex": 1,
    "gasUsed": "3349664",
    "logsBloom": "0x
    "blockHash": "0xfa0b5fcc894e31d551977fb0336ad0b7337a2e058e34184da3db215bea3bc1d6",
    "transactionHash": "0x0de5c17e7d121063aac86ce674d62a2581fb907be1c48a8ec63fb5432c734568",
    "logs": [],
    "blockNumber": 14770720,
    "cumulativeGasUsed": "4612033",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "69c13e6198c769c5a605a64d32d4b40a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transfer_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transfer_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"TransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bholdusToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transfer_id\",\"type\":\"uint256\"}],\"name\":\"confirmTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"}],\"name\":\"forceRegisterChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"forceRegisterRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"forceRegisterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forceSetMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"forceSetPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"forceSetServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUnfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chain\",\"type\":\"uint16\"}],\"name\":\"forceUnregisterChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"forceUnregisterRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"forceWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"}],\"name\":\"initiateTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextConfirmOutboundTransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextInboundTransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOutboundTransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outboundTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transfer_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6eecf5abec3cd10b2e9234936b80b6cb7c174e926542a2fe690a0186558deb40\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"contracts/bridge/Bridge.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../token/BEP20/IBEP20.sol\\\";\\n\\ncontract Bridge is OwnableUpgradeable, UUPSUpgradeable {\\n    struct TransferInfo {\\n        uint256 amount;\\n        uint256 serviceFee;\\n        address from;\\n        bytes32 to;\\n        uint16 targetChain;\\n        bool isExist;\\n    }\\n\\n    mapping(uint256 => TransferInfo) public outboundTransfers;\\n    mapping(address => bool) public relayers;\\n    mapping(uint16 => bool) public chains;\\n    uint256 public nextOutboundTransferId;\\n    uint256 public nextConfirmOutboundTransferId;\\n    uint256 public nextInboundTransferId;\\n    uint256 public serviceFee;\\n    uint256 public minDeposit;\\n    address public bholdusToken;\\n    bool public frozen;\\n    uint256 public platformFee;\\n\\n    event TransferInitiated(\\n        uint256 indexed transfer_id,\\n        address indexed from,\\n        bytes32 indexed to,\\n        uint256 amount,\\n        uint16 targetChain\\n    );\\n\\n    event TokensReleased(\\n        uint256 indexed transfer_id,\\n        bytes32 indexed from,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    function initialize(\\n        address _admin,\\n        address _token,\\n        uint256 _fee,\\n        uint256 _minDeposit\\n    ) public initializer returns (bool) {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        bholdusToken = _token;\\n        serviceFee = _fee;\\n        minDeposit = _minDeposit;\\n\\n        transferOwnership(_admin);\\n\\n        return true;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyOwner\\n    {}\\n\\n    function initiateTransfer(\\n        bytes32 to,\\n        uint256 amount,\\n        uint16 targetChain\\n    ) public payable {\\n        require(!frozen, \\\"Bridge is frozen by admin\\\");\\n        require(chains[targetChain], \\\"Unsupported chain\\\");\\n        require(msg.value == serviceFee + platformFee, \\\"Missing service fee\\\");\\n        require(amount >= minDeposit, \\\"Minimum amount required\\\");\\n\\n        IBEP20(bholdusToken).transferFrom(msg.sender, address(this), amount);\\n\\n        //set transfer info\\n        TransferInfo memory transferInfo;\\n        transferInfo.serviceFee = msg.value;\\n        transferInfo.amount = amount;\\n        transferInfo.from = msg.sender;\\n        transferInfo.to = to;\\n        transferInfo.targetChain = targetChain;\\n        transferInfo.isExist = true;\\n        outboundTransfers[nextOutboundTransferId] = transferInfo;\\n\\n        emit TransferInitiated(\\n            nextOutboundTransferId,\\n            msg.sender,\\n            to,\\n            amount,\\n            targetChain\\n        );\\n        nextOutboundTransferId = nextOutboundTransferId + 1;\\n    }\\n\\n    function confirmTransfer(uint256 transfer_id) public onlyRelayer {\\n        require(!frozen, \\\"Bridge is frozen by admin\\\");\\n        require(\\n            nextConfirmOutboundTransferId < nextOutboundTransferId,\\n            \\\"All transfers are confirmed\\\"\\n        );\\n\\n        require(\\n            nextConfirmOutboundTransferId == transfer_id,\\n            \\\"Invalid transfer id\\\"\\n        );\\n\\n        TransferInfo memory transferInfo = outboundTransfers[transfer_id];\\n        payable(address(msg.sender)).transfer(transferInfo.serviceFee);\\n\\n        nextConfirmOutboundTransferId = nextConfirmOutboundTransferId + 1;\\n    }\\n\\n    function releaseToken(\\n        uint256 transfer_id,\\n        bytes32 from,\\n        address to,\\n        uint256 amount\\n    ) public onlyRelayer {\\n        require(!frozen, \\\"Bridge is frozen by admin\\\");\\n        require(transfer_id == nextInboundTransferId, \\\"Invalid transfer id\\\");\\n        IBEP20(bholdusToken).transfer(to, amount);\\n        nextInboundTransferId += 1;\\n        emit TokensReleased(transfer_id, from, to, amount);\\n    }\\n\\n    function getBalance(address addr) public view returns (uint256) {\\n        return addr.balance;\\n    }\\n\\n    function forceRegisterRelayer(address _relayer) public onlyOwner {\\n        relayers[_relayer] = true;\\n    }\\n\\n    function forceUnregisterRelayer(address _relayer) public onlyOwner {\\n        relayers[_relayer] = false;\\n    }\\n\\n    function forceRegisterToken(address _token) public onlyOwner {\\n        bholdusToken = _token;\\n    }\\n\\n    function forceSetServiceFee(uint256 _fee) public onlyOwner {\\n        serviceFee = _fee;\\n    }\\n\\n    function forceSetPlatformFee(uint256 _fee) public onlyOwner {\\n        platformFee = _fee;\\n    }\\n\\n    function forceWithdrawNative(address payable to) public onlyOwner {\\n        to.transfer(address(this).balance);\\n    }\\n\\n    function forceWithdraw(address to) public onlyOwner {\\n        IBEP20(bholdusToken).transfer(\\n            to,\\n            IBEP20(bholdusToken).balanceOf(address(this))\\n        );\\n    }\\n\\n    function forceRegisterChain(uint16 chain) public onlyOwner {\\n        chains[chain] = true;\\n    }\\n\\n    function forceUnregisterChain(uint16 chain) public onlyOwner {\\n        chains[chain] = false;\\n    }\\n\\n    function forceSetMinDeposit(uint256 amount) public onlyOwner {\\n        minDeposit = amount;\\n    }\\n\\n    function forceFreeze() public onlyOwner {\\n        frozen = true;\\n    }\\n\\n    function forceUnfreeze() public onlyOwner {\\n        frozen = false;\\n    }\\n\\n    modifier onlyRelayer() {\\n        require(\\n            relayers[msg.sender] == true,\\n            \\\"Caller is not the registered relayer\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6639128e5c60a22df17368d3579eb0e3c406efd3425d654724752a60050ba094\",\"license\":\"MIT\"},\"contracts/token/BEP20/IBEP20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x36d3e404bfb1e4f60fb1f40f639661c3f036b2d17eca85a4d47d256b6c468fb6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1660601b81525034801561004657600080fd5b5060805160601c613bfb61007a60003960008181610d3d01528181610dcc0152818161105101526110e00152613bfb6000f3fe6080604052600436106101ee5760003560e01c8063609c951a1161010d57806396d0a303116100a0578063eb990c591161006f578063eb990c591461067f578063eb9b93bc146106bc578063f2fde38b146106d8578063f8b2cb4f14610701578063fed8c3a61461073e576101ee565b806396d0a303146105ed578063b6e5c6ca14610616578063b800f9931461063f578063d851f1f414610656576101ee565b80637c033df7116100dc5780637c033df714610543578063882f3e161461056e5780638abdf5aa146105975780638da5cb5b146105c2576101ee565b8063609c951a14610498578063616497a1146104c1578063715018a6146104ea57806372e39cc914610501576101ee565b80633659cfe6116101855780634f1ef286116101545780634f1ef286146103eb5780635300f841146104075780635c385ba8146104445780635f8568cd1461046f576101ee565b80633659cfe6146103575780633c263d331461038057806341b3d185146103975780634cd9bf58146103c2576101ee565b80631e166f1c116101c15780631e166f1c146102af57806326232a2e146102da5780632c48e7db146103055780632e34147c1461032e576101ee565b8063054f7d9c146101f35780630e7401561461021e578063116e354b146102475780631a8fbf6714610284575b600080fd5b3480156101ff57600080fd5b50610208610767565b6040516102159190613289565b60405180910390f35b34801561022a57600080fd5b5061024560048036038101906102409190612ed2565b61077a565b005b34801561025357600080fd5b5061026e60048036038101906102699190612e57565b6109c1565b60405161027b9190613289565b60405180910390f35b34801561029057600080fd5b506102996109e1565b6040516102a6919061320e565b60405180910390f35b3480156102bb57600080fd5b506102c4610a07565b6040516102d191906134a6565b60405180910390f35b3480156102e657600080fd5b506102ef610a0d565b6040516102fc91906134a6565b60405180910390f35b34801561031157600080fd5b5061032c60048036038101906103279190612e80565b610a13565b005b34801561033a57600080fd5b5061035560048036038101906103509190612e80565b610cb5565b005b34801561036357600080fd5b5061037e60048036038101906103799190612cd6565b610d3b565b005b34801561038c57600080fd5b50610395610eea565b005b3480156103a357600080fd5b506103ac610f83565b6040516103b991906134a6565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190612cff565b610f89565b005b61040560048036038101906104009190612d8b565b61104f565b005b34801561041357600080fd5b5061042e60048036038101906104299190612cd6565b61118c565b60405161043b9190613289565b60405180910390f35b34801561045057600080fd5b506104596111ac565b60405161046691906134a6565b60405180910390f35b34801561047b57600080fd5b5061049660048036038101906104919190612cd6565b6111b2565b005b3480156104a457600080fd5b506104bf60048036038101906104ba9190612e57565b611272565b005b3480156104cd57600080fd5b506104e860048036038101906104e39190612e80565b611325565b005b3480156104f657600080fd5b506104ff6113ab565b005b34801561050d57600080fd5b5061052860048036038101906105239190612e80565b611433565b60405161053a969594939291906134ea565b60405180910390f35b34801561054f57600080fd5b506105586114aa565b60405161056591906134a6565b60405180910390f35b34801561057a57600080fd5b5061059560048036038101906105909190612cd6565b6114b0565b005b3480156105a357600080fd5b506105ac611689565b6040516105b991906134a6565b60405180910390f35b3480156105ce57600080fd5b506105d761168f565b6040516105e4919061320e565b60405180910390f35b3480156105f957600080fd5b50610614600480360381019061060f9190612e57565b6116b9565b005b34801561062257600080fd5b5061063d60048036038101906106389190612cd6565b61176c565b005b34801561064b57600080fd5b50610654611843565b005b34801561066257600080fd5b5061067d60048036038101906106789190612cd6565b6118dc565b005b34801561068b57600080fd5b506106a660048036038101906106a19190612d28565b6119b3565b6040516106b39190613289565b60405180910390f35b6106d660048036038101906106d19190612e08565b611aff565b005b3480156106e457600080fd5b506106ff60048036038101906106fa9190612cd6565b611eb2565b005b34801561070d57600080fd5b5061072860048036038101906107239190612cd6565b611faa565b60405161073591906134a6565b60405180910390f35b34801561074a57600080fd5b5061076560048036038101906107609190612e80565b611fcb565b005b60d160149054906101000a900460ff1681565b6001151560ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080490613326565b60405180910390fd5b60d160149054906101000a900460ff161561085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085490613466565b60405180910390fd5b60ce5484146108a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089890613406565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016108fe929190613260565b602060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190612ddf565b50600160ce600082825461096491906135d3565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1683857f60c4bb98a247ace5183d5a5fa34a6cf34ce8101a7608d5edcd508cb5de5e222e846040516109b391906134a6565b60405180910390a450505050565b60cb6020528060005260406000206000915054906101000a900460ff1681565b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cc5481565b60d25481565b6001151560ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9d90613326565b60405180910390fd5b60d160149054906101000a900460ff1615610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90613466565b60405180910390fd5b60cc5460cd5410610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b33906133e6565b60405180910390fd5b8060cd5414610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790613406565b60405180910390fd5b600060c960008381526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900461ffff1661ffff1661ffff1681526020016004820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff166108fc82602001519081150290604051600060405180830381858888f19350505050158015610c9b573d6000803e3d6000fd5b50600160cd54610cab91906135d3565b60cd819055505050565b610cbd612051565b73ffffffffffffffffffffffffffffffffffffffff16610cdb61168f565b73ffffffffffffffffffffffffffffffffffffffff1614610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890613446565b60405180910390fd5b8060cf8190555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc190613346565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e09612059565b73ffffffffffffffffffffffffffffffffffffffff1614610e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5690613366565b60405180910390fd5b610e68816120b0565b610ee781600067ffffffffffffffff811115610ead577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610edf5781602001600182028036833780820191505090505b50600061212f565b50565b610ef2612051565b73ffffffffffffffffffffffffffffffffffffffff16610f1061168f565b73ffffffffffffffffffffffffffffffffffffffff1614610f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5d90613446565b60405180910390fd5b600060d160146101000a81548160ff021916908315150217905550565b60d05481565b610f91612051565b73ffffffffffffffffffffffffffffffffffffffff16610faf61168f565b73ffffffffffffffffffffffffffffffffffffffff1614611005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffc90613446565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561104b573d6000803e3d6000fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d590613346565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661111d612059565b73ffffffffffffffffffffffffffffffffffffffff1614611173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116a90613366565b60405180910390fd5b61117c826120b0565b6111888282600161212f565b5050565b60ca6020528060005260406000206000915054906101000a900460ff1681565b60ce5481565b6111ba612051565b73ffffffffffffffffffffffffffffffffffffffff166111d861168f565b73ffffffffffffffffffffffffffffffffffffffff161461122e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122590613446565b60405180910390fd5b8060d160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61127a612051565b73ffffffffffffffffffffffffffffffffffffffff1661129861168f565b73ffffffffffffffffffffffffffffffffffffffff16146112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e590613446565b60405180910390fd5b600160cb60008361ffff1661ffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61132d612051565b73ffffffffffffffffffffffffffffffffffffffff1661134b61168f565b73ffffffffffffffffffffffffffffffffffffffff16146113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139890613446565b60405180910390fd5b8060d28190555050565b6113b3612051565b73ffffffffffffffffffffffffffffffffffffffff166113d161168f565b73ffffffffffffffffffffffffffffffffffffffff1614611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e90613446565b60405180910390fd5b6114316000612300565b565b60c96020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900461ffff16908060040160029054906101000a900460ff16905086565b60cd5481565b6114b8612051565b73ffffffffffffffffffffffffffffffffffffffff166114d661168f565b73ffffffffffffffffffffffffffffffffffffffff161461152c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152390613446565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115c6919061320e565b60206040518083038186803b1580156115de57600080fd5b505afa1580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116169190612ea9565b6040518363ffffffff1660e01b8152600401611633929190613260565b602060405180830381600087803b15801561164d57600080fd5b505af1158015611661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116859190612ddf565b5050565b60cf5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6116c1612051565b73ffffffffffffffffffffffffffffffffffffffff166116df61168f565b73ffffffffffffffffffffffffffffffffffffffff1614611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c90613446565b60405180910390fd5b600060cb60008361ffff1661ffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b611774612051565b73ffffffffffffffffffffffffffffffffffffffff1661179261168f565b73ffffffffffffffffffffffffffffffffffffffff16146117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117df90613446565b60405180910390fd5b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61184b612051565b73ffffffffffffffffffffffffffffffffffffffff1661186961168f565b73ffffffffffffffffffffffffffffffffffffffff16146118bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b690613446565b60405180910390fd5b600160d160146101000a81548160ff021916908315150217905550565b6118e4612051565b73ffffffffffffffffffffffffffffffffffffffff1661190261168f565b73ffffffffffffffffffffffffffffffffffffffff1614611958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194f90613446565b60405180910390fd5b600160ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060019054906101000a900460ff16806119da575060008054906101000a900460ff16155b611a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a10906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015611a69576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611a716123c6565b611a796124af565b8460d160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360cf819055508260d081905550611ad186611eb2565b600191508015611af65760008060016101000a81548160ff0219169083151502179055505b50949350505050565b60d160149054906101000a900460ff1615611b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4690613466565b60405180910390fd5b60cb60008261ffff1661ffff16815260200190815260200160002060009054906101000a900460ff16611bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae906132c6565b60405180910390fd5b60d25460cf54611bc791906135d3565b3414611c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bff90613386565b60405180910390fd5b60d054821015611c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c44906133c6565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611cac93929190613229565b602060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190612ddf565b50611d07612b86565b348160200181815250508281600001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381606001818152505081816080019061ffff16908161ffff168152505060018160a00190151590811515815250508060c9600060cc548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a81548160ff021916908315150217905550905050833373ffffffffffffffffffffffffffffffffffffffff1660cc547f6eda71a50ae771fd150241e0e84416fc65df5420a5513ddf916f82ed22eebaeb8686604051611e8f9291906134c1565b60405180910390a4600160cc54611ea691906135d3565b60cc8190555050505050565b611eba612051565b73ffffffffffffffffffffffffffffffffffffffff16611ed861168f565b73ffffffffffffffffffffffffffffffffffffffff1614611f2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2590613446565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9590613306565b60405180910390fd5b611fa781612300565b50565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b611fd3612051565b73ffffffffffffffffffffffffffffffffffffffff16611ff161168f565b73ffffffffffffffffffffffffffffffffffffffff1614612047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203e90613446565b60405180910390fd5b8060d08190555050565b600033905090565b60006120877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612598565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6120b8612051565b73ffffffffffffffffffffffffffffffffffffffff166120d661168f565b73ffffffffffffffffffffffffffffffffffffffff161461212c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212390613446565b60405180910390fd5b50565b6000612139612059565b9050612144846125a2565b6000835111806121515750815b1561216257612160848461265b565b505b60006121907f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b61273f565b90508060000160009054906101000a900460ff166122f95760018160000160006101000a81548160ff02191690831515021790555061225c85836040516024016121da919061320e565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061265b565b5060008160000160006101000a81548160ff021916908315150217905550612282612059565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146122ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e6906132e6565b60405180910390fd5b6122f885612749565b5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16806123ec575060008054906101000a900460ff16155b61242b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612422906133a6565b60405180910390fd5b60008060019054906101000a900460ff16159050801561247b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612483612798565b61248b612871565b80156124ac5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806124d5575060008054906101000a900460ff16155b612514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250b906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015612564576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61256c61295a565b612574612a33565b80156125955760008060016101000a81548160ff0219169083151502179055505b50565b6000819050919050565b6125ab81612b0c565b6125ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e190613426565b60405180910390fd5b806126177f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612598565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061266683612b0c565b6126a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269c90613486565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516126cd91906131f7565b600060405180830381855af49150503d8060008114612708576040519150601f19603f3d011682016040523d82523d6000602084013e61270d565b606091505b50915091506127358282604051806060016040528060278152602001613b9f60279139612b1f565b9250505092915050565b6000819050919050565b612752816125a2565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff16806127be575060008054906101000a900460ff16155b6127fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f4906133a6565b60405180910390fd5b60008060019054906101000a900460ff16159050801561284d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561286e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612897575060008054906101000a900460ff16155b6128d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cd906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015612926576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612936612931612051565b612300565b80156129575760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612980575060008054906101000a900460ff16155b6129bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b6906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015612a0f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612a305760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612a59575060008054906101000a900460ff16155b612a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8f906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015612ae8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612b095760008060016101000a81548160ff0219169083151502179055505b50565b600080823b905060008111915050919050565b60608315612b2f57829050612b7f565b600083511115612b425782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7691906132a4565b60405180910390fd5b9392505050565b6040518060c001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001600061ffff1681526020016000151581525090565b6000612bee612be984613570565b61354b565b905082815260208101848484011115612c0657600080fd5b612c1184828561369b565b509392505050565b600081359050612c2881613b14565b92915050565b600081359050612c3d81613b2b565b92915050565b600081519050612c5281613b42565b92915050565b600081359050612c6781613b59565b92915050565b600082601f830112612c7e57600080fd5b8135612c8e848260208601612bdb565b91505092915050565b600081359050612ca681613b70565b92915050565b600081359050612cbb81613b87565b92915050565b600081519050612cd081613b87565b92915050565b600060208284031215612ce857600080fd5b6000612cf684828501612c19565b91505092915050565b600060208284031215612d1157600080fd5b6000612d1f84828501612c2e565b91505092915050565b60008060008060808587031215612d3e57600080fd5b6000612d4c87828801612c19565b9450506020612d5d87828801612c19565b9350506040612d6e87828801612cac565b9250506060612d7f87828801612cac565b91505092959194509250565b60008060408385031215612d9e57600080fd5b6000612dac85828601612c19565b925050602083013567ffffffffffffffff811115612dc957600080fd5b612dd585828601612c6d565b9150509250929050565b600060208284031215612df157600080fd5b6000612dff84828501612c43565b91505092915050565b600080600060608486031215612e1d57600080fd5b6000612e2b86828701612c58565b9350506020612e3c86828701612cac565b9250506040612e4d86828701612c97565b9150509250925092565b600060208284031215612e6957600080fd5b6000612e7784828501612c97565b91505092915050565b600060208284031215612e9257600080fd5b6000612ea084828501612cac565b91505092915050565b600060208284031215612ebb57600080fd5b6000612ec984828501612cc1565b91505092915050565b60008060008060808587031215612ee857600080fd5b6000612ef687828801612cac565b9450506020612f0787828801612c58565b9350506040612f1887828801612c19565b9250506060612f2987828801612cac565b91505092959194509250565b612f3e81613629565b82525050565b612f4d8161364d565b82525050565b612f5c81613659565b82525050565b6000612f6d826135a1565b612f7781856135b7565b9350612f878185602086016136aa565b80840191505092915050565b6000612f9e826135ac565b612fa881856135c2565b9350612fb88185602086016136aa565b612fc18161376c565b840191505092915050565b6000612fd96011836135c2565b9150612fe48261377d565b602082019050919050565b6000612ffc602f836135c2565b9150613007826137a6565b604082019050919050565b600061301f6026836135c2565b915061302a826137f5565b604082019050919050565b60006130426024836135c2565b915061304d82613844565b604082019050919050565b6000613065602c836135c2565b915061307082613893565b604082019050919050565b6000613088602c836135c2565b9150613093826138e2565b604082019050919050565b60006130ab6013836135c2565b91506130b682613931565b602082019050919050565b60006130ce602e836135c2565b91506130d98261395a565b604082019050919050565b60006130f16017836135c2565b91506130fc826139a9565b602082019050919050565b6000613114601b836135c2565b915061311f826139d2565b602082019050919050565b60006131376013836135c2565b9150613142826139fb565b602082019050919050565b600061315a602d836135c2565b915061316582613a24565b604082019050919050565b600061317d6020836135c2565b915061318882613a73565b602082019050919050565b60006131a06019836135c2565b91506131ab82613a9c565b602082019050919050565b60006131c36026836135c2565b91506131ce82613ac5565b604082019050919050565b6131e281613663565b82525050565b6131f181613691565b82525050565b60006132038284612f62565b915081905092915050565b60006020820190506132236000830184612f35565b92915050565b600060608201905061323e6000830186612f35565b61324b6020830185612f35565b61325860408301846131e8565b949350505050565b60006040820190506132756000830185612f35565b61328260208301846131e8565b9392505050565b600060208201905061329e6000830184612f44565b92915050565b600060208201905081810360008301526132be8184612f93565b905092915050565b600060208201905081810360008301526132df81612fcc565b9050919050565b600060208201905081810360008301526132ff81612fef565b9050919050565b6000602082019050818103600083015261331f81613012565b9050919050565b6000602082019050818103600083015261333f81613035565b9050919050565b6000602082019050818103600083015261335f81613058565b9050919050565b6000602082019050818103600083015261337f8161307b565b9050919050565b6000602082019050818103600083015261339f8161309e565b9050919050565b600060208201905081810360008301526133bf816130c1565b9050919050565b600060208201905081810360008301526133df816130e4565b9050919050565b600060208201905081810360008301526133ff81613107565b9050919050565b6000602082019050818103600083015261341f8161312a565b9050919050565b6000602082019050818103600083015261343f8161314d565b9050919050565b6000602082019050818103600083015261345f81613170565b9050919050565b6000602082019050818103600083015261347f81613193565b9050919050565b6000602082019050818103600083015261349f816131b6565b9050919050565b60006020820190506134bb60008301846131e8565b92915050565b60006040820190506134d660008301856131e8565b6134e360208301846131d9565b9392505050565b600060c0820190506134ff60008301896131e8565b61350c60208301886131e8565b6135196040830187612f35565b6135266060830186612f53565b61353360808301856131d9565b61354060a0830184612f44565b979650505050505050565b6000613555613566565b905061356182826136dd565b919050565b6000604051905090565b600067ffffffffffffffff82111561358b5761358a61373d565b5b6135948261376c565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006135de82613691565b91506135e983613691565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561361e5761361d61370e565b5b828201905092915050565b600061363482613671565b9050919050565b600061364682613671565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156136c85780820151818401526020810190506136ad565b838111156136d7576000848401525b50505050565b6136e68261376c565b810181811067ffffffffffffffff821117156137055761370461373d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f556e737570706f7274656420636861696e000000000000000000000000000000600082015250565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f742074686520726567697374657265642072656c60008201527f6179657200000000000000000000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b7f4d697373696e6720736572766963652066656500000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d696e696d756d20616d6f756e74207265717569726564000000000000000000600082015250565b7f416c6c207472616e73666572732061726520636f6e6669726d65640000000000600082015250565b7f496e76616c6964207472616e7366657220696400000000000000000000000000600082015250565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4272696467652069732066726f7a656e2062792061646d696e00000000000000600082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b613b1d81613629565b8114613b2857600080fd5b50565b613b348161363b565b8114613b3f57600080fd5b50565b613b4b8161364d565b8114613b5657600080fd5b50565b613b6281613659565b8114613b6d57600080fd5b50565b613b7981613663565b8114613b8457600080fd5b50565b613b9081613691565b8114613b9b57600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209bd29db259dcd6e666bfa3b3970d3d7cc1b7152772455d28d02669369c244b8a64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c8063609c951a1161010d57806396d0a303116100a0578063eb990c591161006f578063eb990c591461067f578063eb9b93bc146106bc578063f2fde38b146106d8578063f8b2cb4f14610701578063fed8c3a61461073e576101ee565b806396d0a303146105ed578063b6e5c6ca14610616578063b800f9931461063f578063d851f1f414610656576101ee565b80637c033df7116100dc5780637c033df714610543578063882f3e161461056e5780638abdf5aa146105975780638da5cb5b146105c2576101ee565b8063609c951a14610498578063616497a1146104c1578063715018a6146104ea57806372e39cc914610501576101ee565b80633659cfe6116101855780634f1ef286116101545780634f1ef286146103eb5780635300f841146104075780635c385ba8146104445780635f8568cd1461046f576101ee565b80633659cfe6146103575780633c263d331461038057806341b3d185146103975780634cd9bf58146103c2576101ee565b80631e166f1c116101c15780631e166f1c146102af57806326232a2e146102da5780632c48e7db146103055780632e34147c1461032e576101ee565b8063054f7d9c146101f35780630e7401561461021e578063116e354b146102475780631a8fbf6714610284575b600080fd5b3480156101ff57600080fd5b50610208610767565b6040516102159190613289565b60405180910390f35b34801561022a57600080fd5b5061024560048036038101906102409190612ed2565b61077a565b005b34801561025357600080fd5b5061026e60048036038101906102699190612e57565b6109c1565b60405161027b9190613289565b60405180910390f35b34801561029057600080fd5b506102996109e1565b6040516102a6919061320e565b60405180910390f35b3480156102bb57600080fd5b506102c4610a07565b6040516102d191906134a6565b60405180910390f35b3480156102e657600080fd5b506102ef610a0d565b6040516102fc91906134a6565b60405180910390f35b34801561031157600080fd5b5061032c60048036038101906103279190612e80565b610a13565b005b34801561033a57600080fd5b5061035560048036038101906103509190612e80565b610cb5565b005b34801561036357600080fd5b5061037e60048036038101906103799190612cd6565b610d3b565b005b34801561038c57600080fd5b50610395610eea565b005b3480156103a357600080fd5b506103ac610f83565b6040516103b991906134a6565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190612cff565b610f89565b005b61040560048036038101906104009190612d8b565b61104f565b005b34801561041357600080fd5b5061042e60048036038101906104299190612cd6565b61118c565b60405161043b9190613289565b60405180910390f35b34801561045057600080fd5b506104596111ac565b60405161046691906134a6565b60405180910390f35b34801561047b57600080fd5b5061049660048036038101906104919190612cd6565b6111b2565b005b3480156104a457600080fd5b506104bf60048036038101906104ba9190612e57565b611272565b005b3480156104cd57600080fd5b506104e860048036038101906104e39190612e80565b611325565b005b3480156104f657600080fd5b506104ff6113ab565b005b34801561050d57600080fd5b5061052860048036038101906105239190612e80565b611433565b60405161053a969594939291906134ea565b60405180910390f35b34801561054f57600080fd5b506105586114aa565b60405161056591906134a6565b60405180910390f35b34801561057a57600080fd5b5061059560048036038101906105909190612cd6565b6114b0565b005b3480156105a357600080fd5b506105ac611689565b6040516105b991906134a6565b60405180910390f35b3480156105ce57600080fd5b506105d761168f565b6040516105e4919061320e565b60405180910390f35b3480156105f957600080fd5b50610614600480360381019061060f9190612e57565b6116b9565b005b34801561062257600080fd5b5061063d60048036038101906106389190612cd6565b61176c565b005b34801561064b57600080fd5b50610654611843565b005b34801561066257600080fd5b5061067d60048036038101906106789190612cd6565b6118dc565b005b34801561068b57600080fd5b506106a660048036038101906106a19190612d28565b6119b3565b6040516106b39190613289565b60405180910390f35b6106d660048036038101906106d19190612e08565b611aff565b005b3480156106e457600080fd5b506106ff60048036038101906106fa9190612cd6565b611eb2565b005b34801561070d57600080fd5b5061072860048036038101906107239190612cd6565b611faa565b60405161073591906134a6565b60405180910390f35b34801561074a57600080fd5b5061076560048036038101906107609190612e80565b611fcb565b005b60d160149054906101000a900460ff1681565b6001151560ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080490613326565b60405180910390fd5b60d160149054906101000a900460ff161561085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085490613466565b60405180910390fd5b60ce5484146108a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089890613406565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016108fe929190613260565b602060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190612ddf565b50600160ce600082825461096491906135d3565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1683857f60c4bb98a247ace5183d5a5fa34a6cf34ce8101a7608d5edcd508cb5de5e222e846040516109b391906134a6565b60405180910390a450505050565b60cb6020528060005260406000206000915054906101000a900460ff1681565b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60cc5481565b60d25481565b6001151560ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9d90613326565b60405180910390fd5b60d160149054906101000a900460ff1615610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90613466565b60405180910390fd5b60cc5460cd5410610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b33906133e6565b60405180910390fd5b8060cd5414610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790613406565b60405180910390fd5b600060c960008381526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900461ffff1661ffff1661ffff1681526020016004820160029054906101000a900460ff16151515158152505090503373ffffffffffffffffffffffffffffffffffffffff166108fc82602001519081150290604051600060405180830381858888f19350505050158015610c9b573d6000803e3d6000fd5b50600160cd54610cab91906135d3565b60cd819055505050565b610cbd612051565b73ffffffffffffffffffffffffffffffffffffffff16610cdb61168f565b73ffffffffffffffffffffffffffffffffffffffff1614610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890613446565b60405180910390fd5b8060cf8190555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc190613346565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e09612059565b73ffffffffffffffffffffffffffffffffffffffff1614610e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5690613366565b60405180910390fd5b610e68816120b0565b610ee781600067ffffffffffffffff811115610ead577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610edf5781602001600182028036833780820191505090505b50600061212f565b50565b610ef2612051565b73ffffffffffffffffffffffffffffffffffffffff16610f1061168f565b73ffffffffffffffffffffffffffffffffffffffff1614610f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5d90613446565b60405180910390fd5b600060d160146101000a81548160ff021916908315150217905550565b60d05481565b610f91612051565b73ffffffffffffffffffffffffffffffffffffffff16610faf61168f565b73ffffffffffffffffffffffffffffffffffffffff1614611005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffc90613446565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561104b573d6000803e3d6000fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d590613346565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661111d612059565b73ffffffffffffffffffffffffffffffffffffffff1614611173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116a90613366565b60405180910390fd5b61117c826120b0565b6111888282600161212f565b5050565b60ca6020528060005260406000206000915054906101000a900460ff1681565b60ce5481565b6111ba612051565b73ffffffffffffffffffffffffffffffffffffffff166111d861168f565b73ffffffffffffffffffffffffffffffffffffffff161461122e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122590613446565b60405180910390fd5b8060d160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61127a612051565b73ffffffffffffffffffffffffffffffffffffffff1661129861168f565b73ffffffffffffffffffffffffffffffffffffffff16146112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e590613446565b60405180910390fd5b600160cb60008361ffff1661ffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61132d612051565b73ffffffffffffffffffffffffffffffffffffffff1661134b61168f565b73ffffffffffffffffffffffffffffffffffffffff16146113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139890613446565b60405180910390fd5b8060d28190555050565b6113b3612051565b73ffffffffffffffffffffffffffffffffffffffff166113d161168f565b73ffffffffffffffffffffffffffffffffffffffff1614611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e90613446565b60405180910390fd5b6114316000612300565b565b60c96020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900461ffff16908060040160029054906101000a900460ff16905086565b60cd5481565b6114b8612051565b73ffffffffffffffffffffffffffffffffffffffff166114d661168f565b73ffffffffffffffffffffffffffffffffffffffff161461152c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152390613446565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115c6919061320e565b60206040518083038186803b1580156115de57600080fd5b505afa1580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116169190612ea9565b6040518363ffffffff1660e01b8152600401611633929190613260565b602060405180830381600087803b15801561164d57600080fd5b505af1158015611661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116859190612ddf565b5050565b60cf5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6116c1612051565b73ffffffffffffffffffffffffffffffffffffffff166116df61168f565b73ffffffffffffffffffffffffffffffffffffffff1614611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c90613446565b60405180910390fd5b600060cb60008361ffff1661ffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b611774612051565b73ffffffffffffffffffffffffffffffffffffffff1661179261168f565b73ffffffffffffffffffffffffffffffffffffffff16146117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117df90613446565b60405180910390fd5b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61184b612051565b73ffffffffffffffffffffffffffffffffffffffff1661186961168f565b73ffffffffffffffffffffffffffffffffffffffff16146118bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b690613446565b60405180910390fd5b600160d160146101000a81548160ff021916908315150217905550565b6118e4612051565b73ffffffffffffffffffffffffffffffffffffffff1661190261168f565b73ffffffffffffffffffffffffffffffffffffffff1614611958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194f90613446565b60405180910390fd5b600160ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060019054906101000a900460ff16806119da575060008054906101000a900460ff16155b611a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a10906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015611a69576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611a716123c6565b611a796124af565b8460d160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360cf819055508260d081905550611ad186611eb2565b600191508015611af65760008060016101000a81548160ff0219169083151502179055505b50949350505050565b60d160149054906101000a900460ff1615611b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4690613466565b60405180910390fd5b60cb60008261ffff1661ffff16815260200190815260200160002060009054906101000a900460ff16611bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae906132c6565b60405180910390fd5b60d25460cf54611bc791906135d3565b3414611c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bff90613386565b60405180910390fd5b60d054821015611c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c44906133c6565b60405180910390fd5b60d160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611cac93929190613229565b602060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190612ddf565b50611d07612b86565b348160200181815250508281600001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381606001818152505081816080019061ffff16908161ffff168152505060018160a00190151590811515815250508060c9600060cc548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548161ffff021916908361ffff16021790555060a08201518160040160026101000a81548160ff021916908315150217905550905050833373ffffffffffffffffffffffffffffffffffffffff1660cc547f6eda71a50ae771fd150241e0e84416fc65df5420a5513ddf916f82ed22eebaeb8686604051611e8f9291906134c1565b60405180910390a4600160cc54611ea691906135d3565b60cc8190555050505050565b611eba612051565b73ffffffffffffffffffffffffffffffffffffffff16611ed861168f565b73ffffffffffffffffffffffffffffffffffffffff1614611f2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2590613446565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9590613306565b60405180910390fd5b611fa781612300565b50565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b611fd3612051565b73ffffffffffffffffffffffffffffffffffffffff16611ff161168f565b73ffffffffffffffffffffffffffffffffffffffff1614612047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203e90613446565b60405180910390fd5b8060d08190555050565b600033905090565b60006120877f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612598565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6120b8612051565b73ffffffffffffffffffffffffffffffffffffffff166120d661168f565b73ffffffffffffffffffffffffffffffffffffffff161461212c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212390613446565b60405180910390fd5b50565b6000612139612059565b9050612144846125a2565b6000835111806121515750815b1561216257612160848461265b565b505b60006121907f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b61273f565b90508060000160009054906101000a900460ff166122f95760018160000160006101000a81548160ff02191690831515021790555061225c85836040516024016121da919061320e565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061265b565b5060008160000160006101000a81548160ff021916908315150217905550612282612059565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146122ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e6906132e6565b60405180910390fd5b6122f885612749565b5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16806123ec575060008054906101000a900460ff16155b61242b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612422906133a6565b60405180910390fd5b60008060019054906101000a900460ff16159050801561247b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612483612798565b61248b612871565b80156124ac5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806124d5575060008054906101000a900460ff16155b612514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250b906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015612564576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61256c61295a565b612574612a33565b80156125955760008060016101000a81548160ff0219169083151502179055505b50565b6000819050919050565b6125ab81612b0c565b6125ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e190613426565b60405180910390fd5b806126177f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612598565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061266683612b0c565b6126a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269c90613486565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516126cd91906131f7565b600060405180830381855af49150503d8060008114612708576040519150601f19603f3d011682016040523d82523d6000602084013e61270d565b606091505b50915091506127358282604051806060016040528060278152602001613b9f60279139612b1f565b9250505092915050565b6000819050919050565b612752816125a2565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff16806127be575060008054906101000a900460ff16155b6127fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f4906133a6565b60405180910390fd5b60008060019054906101000a900460ff16159050801561284d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561286e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612897575060008054906101000a900460ff16155b6128d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cd906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015612926576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612936612931612051565b612300565b80156129575760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612980575060008054906101000a900460ff16155b6129bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b6906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015612a0f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612a305760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612a59575060008054906101000a900460ff16155b612a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8f906133a6565b60405180910390fd5b60008060019054906101000a900460ff161590508015612ae8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612b095760008060016101000a81548160ff0219169083151502179055505b50565b600080823b905060008111915050919050565b60608315612b2f57829050612b7f565b600083511115612b425782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7691906132a4565b60405180910390fd5b9392505050565b6040518060c001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001600061ffff1681526020016000151581525090565b6000612bee612be984613570565b61354b565b905082815260208101848484011115612c0657600080fd5b612c1184828561369b565b509392505050565b600081359050612c2881613b14565b92915050565b600081359050612c3d81613b2b565b92915050565b600081519050612c5281613b42565b92915050565b600081359050612c6781613b59565b92915050565b600082601f830112612c7e57600080fd5b8135612c8e848260208601612bdb565b91505092915050565b600081359050612ca681613b70565b92915050565b600081359050612cbb81613b87565b92915050565b600081519050612cd081613b87565b92915050565b600060208284031215612ce857600080fd5b6000612cf684828501612c19565b91505092915050565b600060208284031215612d1157600080fd5b6000612d1f84828501612c2e565b91505092915050565b60008060008060808587031215612d3e57600080fd5b6000612d4c87828801612c19565b9450506020612d5d87828801612c19565b9350506040612d6e87828801612cac565b9250506060612d7f87828801612cac565b91505092959194509250565b60008060408385031215612d9e57600080fd5b6000612dac85828601612c19565b925050602083013567ffffffffffffffff811115612dc957600080fd5b612dd585828601612c6d565b9150509250929050565b600060208284031215612df157600080fd5b6000612dff84828501612c43565b91505092915050565b600080600060608486031215612e1d57600080fd5b6000612e2b86828701612c58565b9350506020612e3c86828701612cac565b9250506040612e4d86828701612c97565b9150509250925092565b600060208284031215612e6957600080fd5b6000612e7784828501612c97565b91505092915050565b600060208284031215612e9257600080fd5b6000612ea084828501612cac565b91505092915050565b600060208284031215612ebb57600080fd5b6000612ec984828501612cc1565b91505092915050565b60008060008060808587031215612ee857600080fd5b6000612ef687828801612cac565b9450506020612f0787828801612c58565b9350506040612f1887828801612c19565b9250506060612f2987828801612cac565b91505092959194509250565b612f3e81613629565b82525050565b612f4d8161364d565b82525050565b612f5c81613659565b82525050565b6000612f6d826135a1565b612f7781856135b7565b9350612f878185602086016136aa565b80840191505092915050565b6000612f9e826135ac565b612fa881856135c2565b9350612fb88185602086016136aa565b612fc18161376c565b840191505092915050565b6000612fd96011836135c2565b9150612fe48261377d565b602082019050919050565b6000612ffc602f836135c2565b9150613007826137a6565b604082019050919050565b600061301f6026836135c2565b915061302a826137f5565b604082019050919050565b60006130426024836135c2565b915061304d82613844565b604082019050919050565b6000613065602c836135c2565b915061307082613893565b604082019050919050565b6000613088602c836135c2565b9150613093826138e2565b604082019050919050565b60006130ab6013836135c2565b91506130b682613931565b602082019050919050565b60006130ce602e836135c2565b91506130d98261395a565b604082019050919050565b60006130f16017836135c2565b91506130fc826139a9565b602082019050919050565b6000613114601b836135c2565b915061311f826139d2565b602082019050919050565b60006131376013836135c2565b9150613142826139fb565b602082019050919050565b600061315a602d836135c2565b915061316582613a24565b604082019050919050565b600061317d6020836135c2565b915061318882613a73565b602082019050919050565b60006131a06019836135c2565b91506131ab82613a9c565b602082019050919050565b60006131c36026836135c2565b91506131ce82613ac5565b604082019050919050565b6131e281613663565b82525050565b6131f181613691565b82525050565b60006132038284612f62565b915081905092915050565b60006020820190506132236000830184612f35565b92915050565b600060608201905061323e6000830186612f35565b61324b6020830185612f35565b61325860408301846131e8565b949350505050565b60006040820190506132756000830185612f35565b61328260208301846131e8565b9392505050565b600060208201905061329e6000830184612f44565b92915050565b600060208201905081810360008301526132be8184612f93565b905092915050565b600060208201905081810360008301526132df81612fcc565b9050919050565b600060208201905081810360008301526132ff81612fef565b9050919050565b6000602082019050818103600083015261331f81613012565b9050919050565b6000602082019050818103600083015261333f81613035565b9050919050565b6000602082019050818103600083015261335f81613058565b9050919050565b6000602082019050818103600083015261337f8161307b565b9050919050565b6000602082019050818103600083015261339f8161309e565b9050919050565b600060208201905081810360008301526133bf816130c1565b9050919050565b600060208201905081810360008301526133df816130e4565b9050919050565b600060208201905081810360008301526133ff81613107565b9050919050565b6000602082019050818103600083015261341f8161312a565b9050919050565b6000602082019050818103600083015261343f8161314d565b9050919050565b6000602082019050818103600083015261345f81613170565b9050919050565b6000602082019050818103600083015261347f81613193565b9050919050565b6000602082019050818103600083015261349f816131b6565b9050919050565b60006020820190506134bb60008301846131e8565b92915050565b60006040820190506134d660008301856131e8565b6134e360208301846131d9565b9392505050565b600060c0820190506134ff60008301896131e8565b61350c60208301886131e8565b6135196040830187612f35565b6135266060830186612f53565b61353360808301856131d9565b61354060a0830184612f44565b979650505050505050565b6000613555613566565b905061356182826136dd565b919050565b6000604051905090565b600067ffffffffffffffff82111561358b5761358a61373d565b5b6135948261376c565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006135de82613691565b91506135e983613691565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561361e5761361d61370e565b5b828201905092915050565b600061363482613671565b9050919050565b600061364682613671565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156136c85780820151818401526020810190506136ad565b838111156136d7576000848401525b50505050565b6136e68261376c565b810181811067ffffffffffffffff821117156137055761370461373d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f556e737570706f7274656420636861696e000000000000000000000000000000600082015250565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f742074686520726567697374657265642072656c60008201527f6179657200000000000000000000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b7f4d697373696e6720736572766963652066656500000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d696e696d756d20616d6f756e74207265717569726564000000000000000000600082015250565b7f416c6c207472616e73666572732061726520636f6e6669726d65640000000000600082015250565b7f496e76616c6964207472616e7366657220696400000000000000000000000000600082015250565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4272696467652069732066726f7a656e2062792061646d696e00000000000000600082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b613b1d81613629565b8114613b2857600080fd5b50565b613b348161363b565b8114613b3f57600080fd5b50565b613b4b8161364d565b8114613b5657600080fd5b50565b613b6281613659565b8114613b6d57600080fd5b50565b613b7981613663565b8114613b8457600080fd5b50565b613b9081613691565b8114613b9b57600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209bd29db259dcd6e666bfa3b3970d3d7cc1b7152772455d28d02669369c244b8a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 977,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 521,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 688,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1065,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "outboundTransfers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_struct(TransferInfo)1060_storage)"
      },
      {
        "astId": 1069,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "relayers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1073,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "chains",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint16,t_bool)"
      },
      {
        "astId": 1075,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "nextOutboundTransferId",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 1077,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "nextConfirmOutboundTransferId",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 1079,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "nextInboundTransferId",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 1081,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "serviceFee",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 1083,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "minDeposit",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 1085,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "bholdusToken",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 1087,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "frozen",
        "offset": 20,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 1089,
        "contract": "contracts/bridge/Bridge.sol:Bridge",
        "label": "platformFee",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(TransferInfo)1060_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bridge.TransferInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TransferInfo)1060_storage"
      },
      "t_struct(TransferInfo)1060_storage": {
        "encoding": "inplace",
        "label": "struct Bridge.TransferInfo",
        "members": [
          {
            "astId": 1049,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1051,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "serviceFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1053,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "from",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1055,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "to",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 1057,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "targetChain",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 1059,
            "contract": "contracts/bridge/Bridge.sol:Bridge",
            "label": "isExist",
            "offset": 2,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}