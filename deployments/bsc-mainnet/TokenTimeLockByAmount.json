{
  "address": "0xFA35a8236b85Cf93A015f573cFefD80d92C5802A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "phaseReleasedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReleasedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fromIdx",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "toIdx",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "date",
          "type": "uint64"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "lockDurations_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64",
          "name": "startDate_",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockData",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releasedAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startDate_",
          "type": "uint64"
        },
        {
          "internalType": "uint32[]",
          "name": "lockDurations_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64[]",
          "name": "releaseDates_",
          "type": "uint64[]"
        },
        {
          "internalType": "uint32",
          "name": "nextReleaseIdx_",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDurations",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextReleaseIdx",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseDates",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startDate",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b308f3de24816eb21fadd253dceb0039b7d7b948a5078f4685f3f74296e5b51",
  "receipt": {
    "to": null,
    "from": "0x00D67Ca05f2BD1Bb8b899795b4F8D5b17F6f473b",
    "contractAddress": "0xFA35a8236b85Cf93A015f573cFefD80d92C5802A",
    "transactionIndex": 1373,
    "gasUsed": "2079578",
    "logsBloom": "0x
    "blockHash": "0xb26ad7f3b75c3a3127035cf2cf87650774c87c707465a108362e528a54af707b",
    "transactionHash": "0x3b308f3de24816eb21fadd253dceb0039b7d7b948a5078f4685f3f74296e5b51",
    "logs": [],
    "blockNumber": 11480867,
    "cumulativeGasUsed": "85209151",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fe733fa7331b76caeafd76981298a34d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseReleasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReleasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fromIdx\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"toIdx\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"lockDurations_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"startDate_\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate_\",\"type\":\"uint64\"},{\"internalType\":\"uint32[]\",\"name\":\"lockDurations_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64[]\",\"name\":\"releaseDates_\",\"type\":\"uint64[]\"},{\"internalType\":\"uint32\",\"name\":\"nextReleaseIdx_\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDurations\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReleaseIdx\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseDates\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"release()\":{\"details\":\"User (sender) can release unlocked tokens by calling this function. This function will release locked tokens from multiple lock phases that meets unlock requirements Reverts in the following cases: - No tokens to be withdrawn including:     + All lock phases are already released     + Do not meet next unlock requirements - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\",\"returns\":{\"_0\":\"Return `true` if succeeds, otherwise `false`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address,uint32[],uint256[],uint64)\":{\"notice\":\"Register a new lock for a user Reverts in the following cases: - Duplicated lock id for a user. - `lockDurations` and `releaseAmounts` length don't match.\"},\"release()\":{\"notice\":\"Release unlocked tokens to user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TokenTimeLockByAmount.sol\":\"TokenTimeLockByAmount\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/math/SafeMathX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary SafeMathX {\\n    // Calculate x * y / scale rounding down.\\n    function mulScale(\\n        uint256 x,\\n        uint256 y,\\n        uint128 scale\\n    ) internal pure returns (uint256) {\\n        uint256 a = x / scale;\\n        uint256 b = x % scale;\\n        uint256 c = y / scale;\\n        uint256 d = y % scale;\\n\\n        return a * c * scale + a * d + b * c + (b * d) / scale;\\n    }\\n}\\n\",\"keccak256\":\"0x077baccbb8cca0ce4027c9f212fcefede74b89a2d6990d06b54ba4b59d2f12a1\",\"license\":\"MIT\"},\"contracts/token/BEP20/IBEP20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x36d3e404bfb1e4f60fb1f40f639661c3f036b2d17eca85a4d47d256b6c468fb6\",\"license\":\"MIT\"},\"contracts/token/BEP20/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeBEP20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeBEP20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ac96e6e883a038e6488b6ea5b651ced32b786b53a6964de629b6fca98630428\",\"license\":\"MIT\"},\"contracts/token/TokenTimeLockByAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./BEP20/IBEP20.sol\\\";\\nimport \\\"./BEP20/SafeBEP20.sol\\\";\\nimport \\\"../math/SafeMathX.sol\\\";\\n\\ncontract TokenTimeLockByAmount is Initializable {\\n    using SafeBEP20 for IBEP20;\\n    using SafeMathX for uint256;\\n\\n    /// Release amounts of each phase\\n    uint256[] private _releaseAmounts;\\n\\n    /// Total locked tokens\\n    uint256 private _amount;\\n\\n    /// Total released amount to user\\n    uint256 private _releasedAmount;\\n\\n    /// Beneficiary\\n    address private _user;\\n\\n    /// Token address\\n    address private _token;\\n\\n    /// Factory address\\n    address private _factory;\\n\\n    /// Release date that user initiates a release of each phase\\n    uint64[] private _releaseDates;\\n\\n    /// Start date of the lock\\n    uint64 private _startDate;\\n\\n    /// Lock duration (in seconds) of each phase\\n    uint32[] private _lockDurations;\\n\\n    /// Next release phase\\n    uint32 private _nextReleaseIdx;\\n\\n    event Released(\\n        uint256 phaseReleasedAmount,\\n        uint256 totalReleasedAmount,\\n        uint32 fromIdx,\\n        uint32 toIdx,\\n        uint64 date\\n    );\\n\\n    function token() public view returns (IBEP20) {\\n        return IBEP20(_token);\\n    }\\n\\n    function beneficiary() public view returns (address) {\\n        return _user;\\n    }\\n\\n    function amount() public view returns (uint256) {\\n        return _amount;\\n    }\\n\\n    function releasedAmount() public view returns (uint256) {\\n        return _releasedAmount;\\n    }\\n\\n    function startDate() public view returns (uint64) {\\n        return _startDate;\\n    }\\n\\n    function lockDurations() public view returns (uint32[] memory) {\\n        return _lockDurations;\\n    }\\n\\n    function releaseAmounts() public view returns (uint256[] memory) {\\n        return _releaseAmounts;\\n    }\\n\\n    function releaseDates() public view returns (uint64[] memory) {\\n        return _releaseDates;\\n    }\\n\\n    function nextReleaseIdx() public view returns (uint32) {\\n        return _nextReleaseIdx;\\n    }\\n\\n    function factory() public view returns (address) {\\n        return _factory;\\n    }\\n\\n    function lockData()\\n        public\\n        view\\n        returns (\\n            address user,\\n            address token_,\\n            uint256 amount_,\\n            uint256 releasedAmount_,\\n            uint64 startDate_,\\n            uint32[] memory lockDurations_,\\n            uint256[] memory releaseAmounts_,\\n            uint64[] memory releaseDates_,\\n            uint32 nextReleaseIdx_,\\n            address factory_\\n        )\\n    {\\n        return (\\n            beneficiary(),\\n            address(token()),\\n            amount(),\\n            releasedAmount(),\\n            startDate(),\\n            lockDurations(),\\n            releaseAmounts(),\\n            releaseDates(),\\n            nextReleaseIdx(),\\n            factory()\\n        );\\n    }\\n\\n    /// @notice Register a new lock for a user\\n    /// Reverts in the following cases:\\n    /// - Duplicated lock id for a user.\\n    /// - `lockDurations` and `releaseAmounts` length don't match.\\n    function initialize(\\n        address factory_,\\n        address user_,\\n        address token_,\\n        uint32[] calldata lockDurations_,\\n        uint256[] calldata releaseAmounts_,\\n        uint64 startDate_\\n    ) public initializer returns (bool) {\\n        require(\\n            lockDurations_.length == releaseAmounts_.length,\\n            \\\"TokenTimeLockByAmount: unlock length not match\\\"\\n        );\\n\\n        uint256 _sum = 0;\\n        for (uint256 i = 0; i < releaseAmounts_.length; ++i) {\\n            _sum += releaseAmounts_[i];\\n        }\\n\\n        require(\\n            user_ != address(0),\\n            \\\"TokenTimeLockByAmount: user address is zero\\\"\\n        );\\n\\n        require(\\n            token_ != address(0),\\n            \\\"TokenTimeLockByAmount: token address is zero\\\"\\n        );\\n\\n        require(\\n            factory_ != address(0),\\n            \\\"TokenTimeLockByAmount: factory address is zero\\\"\\n        );\\n\\n        _factory = factory_;\\n        _user = user_;\\n        _token = token_;\\n        _startDate = startDate_;\\n        _lockDurations = lockDurations_;\\n        _releaseAmounts = releaseAmounts_;\\n        _amount = _sum;\\n        _releasedAmount = 0;\\n        _nextReleaseIdx = 0;\\n        _releaseDates = new uint64[](_lockDurations.length);\\n\\n        return true;\\n    }\\n\\n    /// @notice Release unlocked tokens to user.\\n    /// @dev User (sender) can release unlocked tokens by calling this function.\\n    /// This function will release locked tokens from multiple lock phases that meets unlock requirements\\n    /// Reverts in the following cases:\\n    /// - No tokens to be withdrawn including:\\n    ///     + All lock phases are already released\\n    ///     + Do not meet next unlock requirements\\n    /// - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\\n    /// @return Return `true` if succeeds, otherwise `false`\\n    function release() public returns (bool) {\\n        uint256 numOfPhases = _lockDurations.length;\\n\\n        require(\\n            _nextReleaseIdx < numOfPhases,\\n            \\\"TokenTimeLockByAmount: all phases are released\\\"\\n        );\\n        require(\\n            block.timestamp >=\\n                _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds,\\n            \\\"TokenTimeLockByAmount: next phase unavailable\\\"\\n        );\\n\\n        uint256 prevReleaseIdx = _nextReleaseIdx;\\n\\n        uint256 availableReleaseAmount = 0;\\n        while (\\n            _nextReleaseIdx < numOfPhases &&\\n            block.timestamp >=\\n            _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds\\n        ) {\\n            uint256 stepReleaseAmount = 0;\\n            stepReleaseAmount = _releaseAmounts[_nextReleaseIdx];\\n\\n            availableReleaseAmount += stepReleaseAmount;\\n            _nextReleaseIdx++;\\n        }\\n\\n        uint256 balance = token().balanceOf(address(this));\\n        require(\\n            balance >= availableReleaseAmount,\\n            \\\"TokenTimeLockByAmount: insufficient balance\\\"\\n        );\\n        _releasedAmount += availableReleaseAmount;\\n        token().safeTransfer(beneficiary(), availableReleaseAmount);\\n\\n        uint64 releaseDate = uint64(block.timestamp);\\n\\n        for (uint256 i = prevReleaseIdx; i < _nextReleaseIdx; ++i) {\\n            _releaseDates[i] = releaseDate;\\n        }\\n\\n        emit Released(\\n            availableReleaseAmount,\\n            _releasedAmount,\\n            uint32(prevReleaseIdx),\\n            _nextReleaseIdx - 1,\\n            releaseDate\\n        );\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xfeb86439ab89b4d58d79e0fcfff2ba3fab6b06a6e43402ca23faab88f3edb80e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124d5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c00de5fc1161008c578063e090008011610066578063e0900080146101f4578063edca9f0e14610212578063f8fcd15614610230578063fc0c546a14610257576100cf565b8063c00de5fc1461019a578063c45a0155146101b8578063d6ec5270146101d6576100cf565b80630b97bc86146100d457806338af3eed146100f257806345d30a171461011057806386d1a69f1461012e578063aa8c217c1461014c578063bf8626821461016a575b600080fd5b6100dc610275565b6040516100e99190611d8d565b60405180910390f35b6100fa610293565b60405161010791906119f1565b60405180910390f35b6101186102bd565b6040516101259190611d04565b60405180910390f35b6101366102c7565b6040516101439190611b4c565b60405180910390f35b610154610820565b6040516101619190611d04565b60405180910390f35b610184600480360381019061017f91906114f1565b61082a565b6040516101919190611b4c565b60405180910390f35b6101a2610ce4565b6040516101af9190611b2a565b60405180910390f35b6101c0610d70565b6040516101cd91906119f1565b60405180910390f35b6101de610d9a565b6040516101eb9190611d72565b60405180910390f35b6101fc610db4565b6040516102099190611b08565b60405180910390f35b61021a610e38565b6040516102279190611ae6565b60405180910390f35b610238610e90565b60405161024e9a99989796959493929190611a0c565b60405180910390f35b61025f610f10565b60405161026c9190611b67565b60405180910390f35b6000600860009054906101000a900467ffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b600080600980549050905080600a60009054906101000a900463ffffffff1663ffffffff161061032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390611c84565b60405180910390fd5b60016009600a60009054906101000a900463ffffffff1663ffffffff1681548110610380577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff166103b09190611f19565b63ffffffff16600860009054906101000a900467ffffffffffffffff166103d79190611edb565b67ffffffffffffffff16421015610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041a90611c44565b60405180910390fd5b6000600a60009054906101000a900463ffffffff1663ffffffff16905060005b82600a60009054906101000a900463ffffffff1663ffffffff1610801561051e575060016009600a60009054906101000a900463ffffffff1663ffffffff16815481106104b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff166104e99190611f19565b63ffffffff16600860009054906101000a900467ffffffffffffffff166105109190611edb565b67ffffffffffffffff164210155b156105d95760006001600a60009054906101000a900463ffffffff1663ffffffff1681548110610577577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080826105909190611e85565b9150600a600081819054906101000a900463ffffffff16809291906105b490612097565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050610443565b60006105e3610f10565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161061b91906119f1565b60206040518083038186803b15801561063357600080fd5b505afa158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b91906115dd565b9050818110156106b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a790611bc4565b60405180910390fd5b81600360008282546106c29190611e85565b925050819055506107026106d4610293565b836106dd610f10565b73ffffffffffffffffffffffffffffffffffffffff16610f3a9092919063ffffffff16565b600042905060008490505b600a60009054906101000a900463ffffffff1663ffffffff168110156107b4578160078281548110610768577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806107ad9061204e565b905061070d565b507f76264100b4b20aa06c294636c2e40aaf398c3490112488330659f4577010713f83600354866001600a60009054906101000a900463ffffffff166107fa9190611f57565b8560405161080c959493929190611d1f565b60405180910390a160019550505050505090565b6000600254905090565b60008060019054906101000a900460ff1680610851575060008054906101000a900460ff16155b610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088790611c64565b60405180910390fd5b60008060019054906101000a900460ff1615905080156108e0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b848490508787905014610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091f90611c04565b60405180910390fd5b6000805b8686905081101561099557868682818110610970577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135826109829190611e85565b91508061098e9061204e565b905061092c565b50600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd90611ce4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6d90611be4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add90611cc4565b60405180910390fd5b8a600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550878760099190610be392919061122d565b50858560019190610bf59291906112e3565b508060028190555060006003819055506000600a60006101000a81548163ffffffff021916908363ffffffff16021790555060098054905067ffffffffffffffff811115610c6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610c9a5781602001602082028036833780820191505090505b5060079080519060200190610cb0929190611330565b5060019250508015610cd75760008060016101000a81548160ff0219169083151502179055505b5098975050505050505050565b60606007805480602002602001604051908101604052809291908181526020018280548015610d6657602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610d215790505b5050505050905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60009054906101000a900463ffffffff16905090565b60606009805480602002602001604051908101604052809291908181526020018280548015610e2e57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610df15790505b5050505050905090565b60606001805480602002602001604051908101604052809291908181526020018280548015610e8657602002820191906000526020600020905b815481526020019060010190808311610e72575b5050505050905090565b60008060008060006060806060600080610ea8610293565b610eb0610f10565b610eb8610820565b610ec06102bd565b610ec8610275565b610ed0610db4565b610ed8610e38565b610ee0610ce4565b610ee8610d9a565b610ef0610d70565b995099509950995099509950995099509950995090919293949596979899565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fbb8363a9059cbb60e01b8484604051602401610f59929190611abd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fc0565b505050565b6000611022826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110879092919063ffffffff16565b9050600081511115611082578080602001905181019061104291906115b4565b611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890611ba4565b60405180910390fd5b5b505050565b6060611096848460008561109f565b90509392505050565b6060824710156110e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110db90611c24565b60405180910390fd5b6110ed856111b3565b61112c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112390611ca4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161115591906119da565b60006040518083038185875af1925050503d8060008114611192576040519150601f19603f3d011682016040523d82523d6000602084013e611197565b606091505b50915091506111a78282866111c6565b92505050949350505050565b600080823b905060008111915050919050565b606083156111d657829050611226565b6000835111156111e95782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121d9190611b82565b60405180910390fd5b9392505050565b828054828255906000526020600020906007016008900481019282156112d25791602002820160005b838211156112a057833563ffffffff1683826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611256565b80156112d05782816101000a81549063ffffffff02191690556004016020816003010492830192600103026112a0565b505b5090506112df91906113ec565b5090565b82805482825590600052602060002090810192821561131f579160200282015b8281111561131e578235825591602001919060010190611303565b5b50905061132c91906113ec565b5090565b828054828255906000526020600020906003016004900481019282156113db5791602002820160005b838211156113a557835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302611359565b80156113d95782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026113a5565b505b5090506113e891906113ec565b5090565b5b808211156114055760008160009055506001016113ed565b5090565b60008135905061141881612443565b92915050565b60008083601f84011261143057600080fd5b8235905067ffffffffffffffff81111561144957600080fd5b60208301915083602082028301111561146157600080fd5b9250929050565b60008083601f84011261147a57600080fd5b8235905067ffffffffffffffff81111561149357600080fd5b6020830191508360208202830111156114ab57600080fd5b9250929050565b6000815190506114c18161245a565b92915050565b6000815190506114d681612471565b92915050565b6000813590506114eb81612488565b92915050565b60008060008060008060008060c0898b03121561150d57600080fd5b600061151b8b828c01611409565b985050602061152c8b828c01611409565b975050604061153d8b828c01611409565b965050606089013567ffffffffffffffff81111561155a57600080fd5b6115668b828c01611468565b9550955050608089013567ffffffffffffffff81111561158557600080fd5b6115918b828c0161141e565b935093505060a06115a48b828c016114dc565b9150509295985092959890939650565b6000602082840312156115c657600080fd5b60006115d4848285016114b2565b91505092915050565b6000602082840312156115ef57600080fd5b60006115fd848285016114c7565b91505092915050565b60006116128383611980565b60208301905092915050565b600061162a838361199e565b60208301905092915050565b600061164283836119bc565b60208301905092915050565b61165781611f8b565b82525050565b600061166882611dd8565b6116728185611e36565b935061167d83611da8565b8060005b838110156116ae5781516116958882611606565b97506116a083611e0f565b925050600181019050611681565b5085935050505092915050565b60006116c682611de3565b6116d08185611e47565b93506116db83611db8565b8060005b8381101561170c5781516116f3888261161e565b97506116fe83611e1c565b9250506001810190506116df565b5085935050505092915050565b600061172482611dee565b61172e8185611e58565b935061173983611dc8565b8060005b8381101561176a5781516117518882611636565b975061175c83611e29565b92505060018101905061173d565b5085935050505092915050565b61178081611f9d565b82525050565b600061179182611df9565b61179b8185611e69565b93506117ab81856020860161201b565b80840191505092915050565b6117c081611ff7565b82525050565b60006117d182611e04565b6117db8185611e74565b93506117eb81856020860161201b565b6117f4816120f3565b840191505092915050565b600061180c602a83611e74565b915061181782612104565b604082019050919050565b600061182f602b83611e74565b915061183a82612153565b604082019050919050565b6000611852602c83611e74565b915061185d826121a2565b604082019050919050565b6000611875602e83611e74565b9150611880826121f1565b604082019050919050565b6000611898602683611e74565b91506118a382612240565b604082019050919050565b60006118bb602d83611e74565b91506118c68261228f565b604082019050919050565b60006118de602e83611e74565b91506118e9826122de565b604082019050919050565b6000611901602e83611e74565b915061190c8261232d565b604082019050919050565b6000611924601d83611e74565b915061192f8261237c565b602082019050919050565b6000611947602e83611e74565b9150611952826123a5565b604082019050919050565b600061196a602b83611e74565b9150611975826123f4565b604082019050919050565b61198981611fc9565b82525050565b61199881611fc9565b82525050565b6119a781611fd3565b82525050565b6119b681611fd3565b82525050565b6119c581611fe3565b82525050565b6119d481611fe3565b82525050565b60006119e68284611786565b915081905092915050565b6000602082019050611a06600083018461164e565b92915050565b600061014082019050611a22600083018d61164e565b611a2f602083018c61164e565b611a3c604083018b61198f565b611a49606083018a61198f565b611a5660808301896119cb565b81810360a0830152611a6881886116bb565b905081810360c0830152611a7c818761165d565b905081810360e0830152611a908186611719565b9050611aa06101008301856119ad565b611aae61012083018461164e565b9b9a5050505050505050505050565b6000604082019050611ad2600083018561164e565b611adf602083018461198f565b9392505050565b60006020820190508181036000830152611b00818461165d565b905092915050565b60006020820190508181036000830152611b2281846116bb565b905092915050565b60006020820190508181036000830152611b448184611719565b905092915050565b6000602082019050611b616000830184611777565b92915050565b6000602082019050611b7c60008301846117b7565b92915050565b60006020820190508181036000830152611b9c81846117c6565b905092915050565b60006020820190508181036000830152611bbd816117ff565b9050919050565b60006020820190508181036000830152611bdd81611822565b9050919050565b60006020820190508181036000830152611bfd81611845565b9050919050565b60006020820190508181036000830152611c1d81611868565b9050919050565b60006020820190508181036000830152611c3d8161188b565b9050919050565b60006020820190508181036000830152611c5d816118ae565b9050919050565b60006020820190508181036000830152611c7d816118d1565b9050919050565b60006020820190508181036000830152611c9d816118f4565b9050919050565b60006020820190508181036000830152611cbd81611917565b9050919050565b60006020820190508181036000830152611cdd8161193a565b9050919050565b60006020820190508181036000830152611cfd8161195d565b9050919050565b6000602082019050611d19600083018461198f565b92915050565b600060a082019050611d34600083018861198f565b611d41602083018761198f565b611d4e60408301866119ad565b611d5b60608301856119ad565b611d6860808301846119cb565b9695505050505050565b6000602082019050611d8760008301846119ad565b92915050565b6000602082019050611da260008301846119cb565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611e9082611fc9565b9150611e9b83611fc9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ed057611ecf6120c4565b5b828201905092915050565b6000611ee682611fe3565b9150611ef183611fe3565b92508267ffffffffffffffff03821115611f0e57611f0d6120c4565b5b828201905092915050565b6000611f2482611fd3565b9150611f2f83611fd3565b92508163ffffffff0483118215151615611f4c57611f4b6120c4565b5b828202905092915050565b6000611f6282611fd3565b9150611f6d83611fd3565b925082821015611f8057611f7f6120c4565b5b828203905092915050565b6000611f9682611fa9565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061200282612009565b9050919050565b600061201482611fa9565b9050919050565b60005b8381101561203957808201518184015260208101905061201e565b83811115612048576000848401525b50505050565b600061205982611fc9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561208c5761208b6120c4565b5b600182019050919050565b60006120a282611fd3565b915063ffffffff8214156120b9576120b86120c4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20696e7375666669636960008201527f656e742062616c616e6365000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20746f6b656e2061646460008201527f72657373206973207a65726f0000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20756e6c6f636b206c6560008201527f6e677468206e6f74206d61746368000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a206e657874207068617360008201527f6520756e617661696c61626c6500000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20616c6c20706861736560008201527f73206172652072656c6561736564000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20666163746f7279206160008201527f646472657373206973207a65726f000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a2075736572206164647260008201527f657373206973207a65726f000000000000000000000000000000000000000000602082015250565b61244c81611f8b565b811461245757600080fd5b50565b61246381611f9d565b811461246e57600080fd5b50565b61247a81611fc9565b811461248557600080fd5b50565b61249181611fe3565b811461249c57600080fd5b5056fea2646970667358221220a9b98171c542c8d3a9941420f5f834bacea346857180ad4b04c2ccb11e7dde8e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c00de5fc1161008c578063e090008011610066578063e0900080146101f4578063edca9f0e14610212578063f8fcd15614610230578063fc0c546a14610257576100cf565b8063c00de5fc1461019a578063c45a0155146101b8578063d6ec5270146101d6576100cf565b80630b97bc86146100d457806338af3eed146100f257806345d30a171461011057806386d1a69f1461012e578063aa8c217c1461014c578063bf8626821461016a575b600080fd5b6100dc610275565b6040516100e99190611d8d565b60405180910390f35b6100fa610293565b60405161010791906119f1565b60405180910390f35b6101186102bd565b6040516101259190611d04565b60405180910390f35b6101366102c7565b6040516101439190611b4c565b60405180910390f35b610154610820565b6040516101619190611d04565b60405180910390f35b610184600480360381019061017f91906114f1565b61082a565b6040516101919190611b4c565b60405180910390f35b6101a2610ce4565b6040516101af9190611b2a565b60405180910390f35b6101c0610d70565b6040516101cd91906119f1565b60405180910390f35b6101de610d9a565b6040516101eb9190611d72565b60405180910390f35b6101fc610db4565b6040516102099190611b08565b60405180910390f35b61021a610e38565b6040516102279190611ae6565b60405180910390f35b610238610e90565b60405161024e9a99989796959493929190611a0c565b60405180910390f35b61025f610f10565b60405161026c9190611b67565b60405180910390f35b6000600860009054906101000a900467ffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b600080600980549050905080600a60009054906101000a900463ffffffff1663ffffffff161061032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390611c84565b60405180910390fd5b60016009600a60009054906101000a900463ffffffff1663ffffffff1681548110610380577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff166103b09190611f19565b63ffffffff16600860009054906101000a900467ffffffffffffffff166103d79190611edb565b67ffffffffffffffff16421015610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041a90611c44565b60405180910390fd5b6000600a60009054906101000a900463ffffffff1663ffffffff16905060005b82600a60009054906101000a900463ffffffff1663ffffffff1610801561051e575060016009600a60009054906101000a900463ffffffff1663ffffffff16815481106104b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff166104e99190611f19565b63ffffffff16600860009054906101000a900467ffffffffffffffff166105109190611edb565b67ffffffffffffffff164210155b156105d95760006001600a60009054906101000a900463ffffffff1663ffffffff1681548110610577577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080826105909190611e85565b9150600a600081819054906101000a900463ffffffff16809291906105b490612097565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050610443565b60006105e3610f10565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161061b91906119f1565b60206040518083038186803b15801561063357600080fd5b505afa158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b91906115dd565b9050818110156106b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a790611bc4565b60405180910390fd5b81600360008282546106c29190611e85565b925050819055506107026106d4610293565b836106dd610f10565b73ffffffffffffffffffffffffffffffffffffffff16610f3a9092919063ffffffff16565b600042905060008490505b600a60009054906101000a900463ffffffff1663ffffffff168110156107b4578160078281548110610768577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806107ad9061204e565b905061070d565b507f76264100b4b20aa06c294636c2e40aaf398c3490112488330659f4577010713f83600354866001600a60009054906101000a900463ffffffff166107fa9190611f57565b8560405161080c959493929190611d1f565b60405180910390a160019550505050505090565b6000600254905090565b60008060019054906101000a900460ff1680610851575060008054906101000a900460ff16155b610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088790611c64565b60405180910390fd5b60008060019054906101000a900460ff1615905080156108e0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b848490508787905014610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091f90611c04565b60405180910390fd5b6000805b8686905081101561099557868682818110610970577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135826109829190611e85565b91508061098e9061204e565b905061092c565b50600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd90611ce4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6d90611be4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add90611cc4565b60405180910390fd5b8a600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550878760099190610be392919061122d565b50858560019190610bf59291906112e3565b508060028190555060006003819055506000600a60006101000a81548163ffffffff021916908363ffffffff16021790555060098054905067ffffffffffffffff811115610c6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610c9a5781602001602082028036833780820191505090505b5060079080519060200190610cb0929190611330565b5060019250508015610cd75760008060016101000a81548160ff0219169083151502179055505b5098975050505050505050565b60606007805480602002602001604051908101604052809291908181526020018280548015610d6657602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610d215790505b5050505050905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60009054906101000a900463ffffffff16905090565b60606009805480602002602001604051908101604052809291908181526020018280548015610e2e57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610df15790505b5050505050905090565b60606001805480602002602001604051908101604052809291908181526020018280548015610e8657602002820191906000526020600020905b815481526020019060010190808311610e72575b5050505050905090565b60008060008060006060806060600080610ea8610293565b610eb0610f10565b610eb8610820565b610ec06102bd565b610ec8610275565b610ed0610db4565b610ed8610e38565b610ee0610ce4565b610ee8610d9a565b610ef0610d70565b995099509950995099509950995099509950995090919293949596979899565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fbb8363a9059cbb60e01b8484604051602401610f59929190611abd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fc0565b505050565b6000611022826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110879092919063ffffffff16565b9050600081511115611082578080602001905181019061104291906115b4565b611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107890611ba4565b60405180910390fd5b5b505050565b6060611096848460008561109f565b90509392505050565b6060824710156110e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110db90611c24565b60405180910390fd5b6110ed856111b3565b61112c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112390611ca4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161115591906119da565b60006040518083038185875af1925050503d8060008114611192576040519150601f19603f3d011682016040523d82523d6000602084013e611197565b606091505b50915091506111a78282866111c6565b92505050949350505050565b600080823b905060008111915050919050565b606083156111d657829050611226565b6000835111156111e95782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121d9190611b82565b60405180910390fd5b9392505050565b828054828255906000526020600020906007016008900481019282156112d25791602002820160005b838211156112a057833563ffffffff1683826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611256565b80156112d05782816101000a81549063ffffffff02191690556004016020816003010492830192600103026112a0565b505b5090506112df91906113ec565b5090565b82805482825590600052602060002090810192821561131f579160200282015b8281111561131e578235825591602001919060010190611303565b5b50905061132c91906113ec565b5090565b828054828255906000526020600020906003016004900481019282156113db5791602002820160005b838211156113a557835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302611359565b80156113d95782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026113a5565b505b5090506113e891906113ec565b5090565b5b808211156114055760008160009055506001016113ed565b5090565b60008135905061141881612443565b92915050565b60008083601f84011261143057600080fd5b8235905067ffffffffffffffff81111561144957600080fd5b60208301915083602082028301111561146157600080fd5b9250929050565b60008083601f84011261147a57600080fd5b8235905067ffffffffffffffff81111561149357600080fd5b6020830191508360208202830111156114ab57600080fd5b9250929050565b6000815190506114c18161245a565b92915050565b6000815190506114d681612471565b92915050565b6000813590506114eb81612488565b92915050565b60008060008060008060008060c0898b03121561150d57600080fd5b600061151b8b828c01611409565b985050602061152c8b828c01611409565b975050604061153d8b828c01611409565b965050606089013567ffffffffffffffff81111561155a57600080fd5b6115668b828c01611468565b9550955050608089013567ffffffffffffffff81111561158557600080fd5b6115918b828c0161141e565b935093505060a06115a48b828c016114dc565b9150509295985092959890939650565b6000602082840312156115c657600080fd5b60006115d4848285016114b2565b91505092915050565b6000602082840312156115ef57600080fd5b60006115fd848285016114c7565b91505092915050565b60006116128383611980565b60208301905092915050565b600061162a838361199e565b60208301905092915050565b600061164283836119bc565b60208301905092915050565b61165781611f8b565b82525050565b600061166882611dd8565b6116728185611e36565b935061167d83611da8565b8060005b838110156116ae5781516116958882611606565b97506116a083611e0f565b925050600181019050611681565b5085935050505092915050565b60006116c682611de3565b6116d08185611e47565b93506116db83611db8565b8060005b8381101561170c5781516116f3888261161e565b97506116fe83611e1c565b9250506001810190506116df565b5085935050505092915050565b600061172482611dee565b61172e8185611e58565b935061173983611dc8565b8060005b8381101561176a5781516117518882611636565b975061175c83611e29565b92505060018101905061173d565b5085935050505092915050565b61178081611f9d565b82525050565b600061179182611df9565b61179b8185611e69565b93506117ab81856020860161201b565b80840191505092915050565b6117c081611ff7565b82525050565b60006117d182611e04565b6117db8185611e74565b93506117eb81856020860161201b565b6117f4816120f3565b840191505092915050565b600061180c602a83611e74565b915061181782612104565b604082019050919050565b600061182f602b83611e74565b915061183a82612153565b604082019050919050565b6000611852602c83611e74565b915061185d826121a2565b604082019050919050565b6000611875602e83611e74565b9150611880826121f1565b604082019050919050565b6000611898602683611e74565b91506118a382612240565b604082019050919050565b60006118bb602d83611e74565b91506118c68261228f565b604082019050919050565b60006118de602e83611e74565b91506118e9826122de565b604082019050919050565b6000611901602e83611e74565b915061190c8261232d565b604082019050919050565b6000611924601d83611e74565b915061192f8261237c565b602082019050919050565b6000611947602e83611e74565b9150611952826123a5565b604082019050919050565b600061196a602b83611e74565b9150611975826123f4565b604082019050919050565b61198981611fc9565b82525050565b61199881611fc9565b82525050565b6119a781611fd3565b82525050565b6119b681611fd3565b82525050565b6119c581611fe3565b82525050565b6119d481611fe3565b82525050565b60006119e68284611786565b915081905092915050565b6000602082019050611a06600083018461164e565b92915050565b600061014082019050611a22600083018d61164e565b611a2f602083018c61164e565b611a3c604083018b61198f565b611a49606083018a61198f565b611a5660808301896119cb565b81810360a0830152611a6881886116bb565b905081810360c0830152611a7c818761165d565b905081810360e0830152611a908186611719565b9050611aa06101008301856119ad565b611aae61012083018461164e565b9b9a5050505050505050505050565b6000604082019050611ad2600083018561164e565b611adf602083018461198f565b9392505050565b60006020820190508181036000830152611b00818461165d565b905092915050565b60006020820190508181036000830152611b2281846116bb565b905092915050565b60006020820190508181036000830152611b448184611719565b905092915050565b6000602082019050611b616000830184611777565b92915050565b6000602082019050611b7c60008301846117b7565b92915050565b60006020820190508181036000830152611b9c81846117c6565b905092915050565b60006020820190508181036000830152611bbd816117ff565b9050919050565b60006020820190508181036000830152611bdd81611822565b9050919050565b60006020820190508181036000830152611bfd81611845565b9050919050565b60006020820190508181036000830152611c1d81611868565b9050919050565b60006020820190508181036000830152611c3d8161188b565b9050919050565b60006020820190508181036000830152611c5d816118ae565b9050919050565b60006020820190508181036000830152611c7d816118d1565b9050919050565b60006020820190508181036000830152611c9d816118f4565b9050919050565b60006020820190508181036000830152611cbd81611917565b9050919050565b60006020820190508181036000830152611cdd8161193a565b9050919050565b60006020820190508181036000830152611cfd8161195d565b9050919050565b6000602082019050611d19600083018461198f565b92915050565b600060a082019050611d34600083018861198f565b611d41602083018761198f565b611d4e60408301866119ad565b611d5b60608301856119ad565b611d6860808301846119cb565b9695505050505050565b6000602082019050611d8760008301846119ad565b92915050565b6000602082019050611da260008301846119cb565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611e9082611fc9565b9150611e9b83611fc9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ed057611ecf6120c4565b5b828201905092915050565b6000611ee682611fe3565b9150611ef183611fe3565b92508267ffffffffffffffff03821115611f0e57611f0d6120c4565b5b828201905092915050565b6000611f2482611fd3565b9150611f2f83611fd3565b92508163ffffffff0483118215151615611f4c57611f4b6120c4565b5b828202905092915050565b6000611f6282611fd3565b9150611f6d83611fd3565b925082821015611f8057611f7f6120c4565b5b828203905092915050565b6000611f9682611fa9565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061200282612009565b9050919050565b600061201482611fa9565b9050919050565b60005b8381101561203957808201518184015260208101905061201e565b83811115612048576000848401525b50505050565b600061205982611fc9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561208c5761208b6120c4565b5b600182019050919050565b60006120a282611fd3565b915063ffffffff8214156120b9576120b86120c4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20696e7375666669636960008201527f656e742062616c616e6365000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20746f6b656e2061646460008201527f72657373206973207a65726f0000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20756e6c6f636b206c6560008201527f6e677468206e6f74206d61746368000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a206e657874207068617360008201527f6520756e617661696c61626c6500000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20616c6c20706861736560008201527f73206172652072656c6561736564000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20666163746f7279206160008201527f646472657373206973207a65726f000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a2075736572206164647260008201527f657373206973207a65726f000000000000000000000000000000000000000000602082015250565b61244c81611f8b565b811461245757600080fd5b50565b61246381611f9d565b811461246e57600080fd5b50565b61247a81611fc9565b811461248557600080fd5b50565b61249181611fe3565b811461249c57600080fd5b5056fea2646970667358221220a9b98171c542c8d3a9941420f5f834bacea346857180ad4b04c2ccb11e7dde8e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "release()": {
        "details": "User (sender) can release unlocked tokens by calling this function. This function will release locked tokens from multiple lock phases that meets unlock requirements Reverts in the following cases: - No tokens to be withdrawn including:     + All lock phases are already released     + Do not meet next unlock requirements - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.",
        "returns": {
          "_0": "Return `true` if succeeds, otherwise `false`"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address,uint32[],uint256[],uint64)": {
        "notice": "Register a new lock for a user Reverts in the following cases: - Duplicated lock id for a user. - `lockDurations` and `releaseAmounts` length don't match."
      },
      "release()": {
        "notice": "Release unlocked tokens to user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1337,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_releaseAmounts",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1340,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_amount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1343,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_releasedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1346,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_user",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1349,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_token",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1352,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_factory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1356,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_releaseDates",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 1359,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_startDate",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 1363,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_lockDurations",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 1366,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_nextReleaseIdx",
        "offset": 0,
        "slot": "10",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}