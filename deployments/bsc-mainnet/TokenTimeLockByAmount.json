{
  "address": "0x74B18E053aFe79D6Db354b177fb96BFaA1162A6D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "phaseReleasedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReleasedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fromIdx",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "toIdx",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "date",
          "type": "uint64"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "date",
          "type": "uint64"
        }
      ],
      "name": "SafetyReleaseActivated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "lockDurations_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64",
          "name": "startDate_",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockData",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releasedAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startDate_",
          "type": "uint64"
        },
        {
          "internalType": "uint32[]",
          "name": "lockDurations_",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64[]",
          "name": "releaseDates_",
          "type": "uint64[]"
        },
        {
          "internalType": "uint32",
          "name": "nextReleaseIdx_",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDurations",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextReleaseIdx",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseDates",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safetyRelease",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startDate",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x820a98bc34a9e8a76dac9d16d38def1870fc1c406d256b85f1f07a335541e893",
  "receipt": {
    "to": null,
    "from": "0x00D67Ca05f2BD1Bb8b899795b4F8D5b17F6f473b",
    "contractAddress": "0x74B18E053aFe79D6Db354b177fb96BFaA1162A6D",
    "transactionIndex": 92,
    "gasUsed": "2426357",
    "logsBloom": "0x
    "blockHash": "0x9e530f257c2531375a64946d63564d3e0e6790d65e5f7d292fcf1d91017b3cf2",
    "transactionHash": "0x820a98bc34a9e8a76dac9d16d38def1870fc1c406d256b85f1f07a335541e893",
    "logs": [],
    "blockNumber": 11307453,
    "cumulativeGasUsed": "27573057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "010a011ea4e8da41a26858e4dac2ddab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseReleasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReleasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fromIdx\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"toIdx\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"date\",\"type\":\"uint64\"}],\"name\":\"SafetyReleaseActivated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"lockDurations_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"startDate_\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate_\",\"type\":\"uint64\"},{\"internalType\":\"uint32[]\",\"name\":\"lockDurations_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64[]\",\"name\":\"releaseDates_\",\"type\":\"uint64[]\"},{\"internalType\":\"uint32\",\"name\":\"nextReleaseIdx_\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDurations\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReleaseIdx\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseDates\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"release()\":{\"details\":\"User (sender) can release unlocked tokens by calling this function. This function will release locked tokens from multiple lock phases that meets unlock requirements Reverts in the following cases: - No tokens to be withdrawn including:     + All lock phases are already released     + Do not meet next unlock requirements - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\",\"returns\":{\"_0\":\"Return `true` if succeeds, otherwise `false`\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safetyRelease()\":{\"details\":\"This is for safety. For example, when someone setup the contract with wrong data and accidentally transfer token to the lockup contract. The owner can get the token back by calling this function\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address,uint32[],uint256[],uint64)\":{\"notice\":\"Register a new lock for a user Reverts in the following cases: - Duplicated lock id for a user. - `lockDurations` and `releaseAmounts` length don't match.\"},\"release()\":{\"notice\":\"Release unlocked tokens to user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TokenTimeLockByAmount.sol\":\"TokenTimeLockByAmount\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/math/SafeMathX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary SafeMathX {\\n    // Calculate x * y / scale rounding down.\\n    function mulScale(\\n        uint256 x,\\n        uint256 y,\\n        uint128 scale\\n    ) internal pure returns (uint256) {\\n        uint256 a = x / scale;\\n        uint256 b = x % scale;\\n        uint256 c = y / scale;\\n        uint256 d = y % scale;\\n\\n        return a * c * scale + a * d + b * c + (b * d) / scale;\\n    }\\n}\\n\",\"keccak256\":\"0x077baccbb8cca0ce4027c9f212fcefede74b89a2d6990d06b54ba4b59d2f12a1\",\"license\":\"MIT\"},\"contracts/token/BEP20/IBEP20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x36d3e404bfb1e4f60fb1f40f639661c3f036b2d17eca85a4d47d256b6c468fb6\",\"license\":\"MIT\"},\"contracts/token/BEP20/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeBEP20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeBEP20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ac96e6e883a038e6488b6ea5b651ced32b786b53a6964de629b6fca98630428\",\"license\":\"MIT\"},\"contracts/token/TokenTimeLockByAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./BEP20/IBEP20.sol\\\";\\nimport \\\"./BEP20/SafeBEP20.sol\\\";\\nimport \\\"../math/SafeMathX.sol\\\";\\n\\ncontract TokenTimeLockByAmount is OwnableUpgradeable {\\n    using SafeBEP20 for IBEP20;\\n    using SafeMathX for uint256;\\n\\n    /// Release amounts of each phase\\n    uint256[] private _releaseAmounts;\\n\\n    /// Total locked tokens\\n    uint256 private _amount;\\n\\n    /// Total released amount to user\\n    uint256 private _releasedAmount;\\n\\n    /// Beneficiary\\n    address private _user;\\n\\n    /// Token address\\n    address private _token;\\n\\n    /// Release date that user initiates a release of each phase\\n    uint64[] private _releaseDates;\\n\\n    /// Start date of the lock\\n    uint64 private _startDate;\\n\\n    /// Lock duration (in seconds) of each phase\\n    uint32[] private _lockDurations;\\n\\n    /// Next release phase\\n    uint32 private _nextReleaseIdx;\\n\\n    event Released(\\n        uint256 phaseReleasedAmount,\\n        uint256 totalReleasedAmount,\\n        uint32 fromIdx,\\n        uint32 toIdx,\\n        uint64 date\\n    );\\n\\n    event SafetyReleaseActivated(uint256 amount, address to, uint64 date);\\n\\n    function token() public view returns (IBEP20) {\\n        return IBEP20(_token);\\n    }\\n\\n    function beneficiary() public view returns (address) {\\n        return _user;\\n    }\\n\\n    function amount() public view returns (uint256) {\\n        return _amount;\\n    }\\n\\n    function releasedAmount() public view returns (uint256) {\\n        return _releasedAmount;\\n    }\\n\\n    function startDate() public view returns (uint64) {\\n        return _startDate;\\n    }\\n\\n    function lockDurations() public view returns (uint32[] memory) {\\n        return _lockDurations;\\n    }\\n\\n    function releaseAmounts() public view returns (uint256[] memory) {\\n        return _releaseAmounts;\\n    }\\n\\n    function releaseDates() public view returns (uint64[] memory) {\\n        return _releaseDates;\\n    }\\n\\n    function nextReleaseIdx() public view returns (uint32) {\\n        return _nextReleaseIdx;\\n    }\\n\\n    function lockData()\\n        public\\n        view\\n        returns (\\n            address user,\\n            address token_,\\n            uint256 amount_,\\n            uint256 releasedAmount_,\\n            uint64 startDate_,\\n            uint32[] memory lockDurations_,\\n            uint256[] memory releaseAmounts_,\\n            uint64[] memory releaseDates_,\\n            uint32 nextReleaseIdx_\\n        )\\n    {\\n        return (\\n            beneficiary(),\\n            address(token()),\\n            amount(),\\n            releasedAmount(),\\n            startDate(),\\n            lockDurations(),\\n            releaseAmounts(),\\n            releaseDates(),\\n            nextReleaseIdx()\\n        );\\n    }\\n\\n    /// @notice Register a new lock for a user\\n    /// Reverts in the following cases:\\n    /// - Duplicated lock id for a user.\\n    /// - `lockDurations` and `releaseAmounts` length don't match.\\n    function initialize(\\n        address owner_,\\n        address user_,\\n        address token_,\\n        uint32[] calldata lockDurations_,\\n        uint256[] calldata releaseAmounts_,\\n        uint64 startDate_\\n    ) public initializer returns (bool) {\\n        __Ownable_init();\\n\\n        require(\\n            lockDurations_.length == releaseAmounts_.length,\\n            \\\"TokenTimeLockByAmount: unlock length not match\\\"\\n        );\\n\\n        uint256 _sum = 0;\\n        for (uint256 i = 0; i < releaseAmounts_.length; ++i) {\\n            _sum += releaseAmounts_[i];\\n        }\\n\\n        _user = user_;\\n        _token = token_;\\n        _startDate = startDate_;\\n        _lockDurations = lockDurations_;\\n        _releaseAmounts = releaseAmounts_;\\n        _amount = _sum;\\n        _releasedAmount = 0;\\n        _nextReleaseIdx = 0;\\n        _releaseDates = new uint64[](_lockDurations.length);\\n\\n        transferOwnership(owner_);\\n\\n        return true;\\n    }\\n\\n    /// @notice Release unlocked tokens to user.\\n    /// @dev User (sender) can release unlocked tokens by calling this function.\\n    /// This function will release locked tokens from multiple lock phases that meets unlock requirements\\n    /// Reverts in the following cases:\\n    /// - No tokens to be withdrawn including:\\n    ///     + All lock phases are already released\\n    ///     + Do not meet next unlock requirements\\n    /// - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.\\n    /// @return Return `true` if succeeds, otherwise `false`\\n    function release() public returns (bool) {\\n        uint256 numOfPhases = _lockDurations.length;\\n\\n        require(\\n            _nextReleaseIdx < numOfPhases,\\n            \\\"TokenTimeLockByAmount: all phases are released\\\"\\n        );\\n        require(\\n            block.timestamp >=\\n                _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds,\\n            \\\"TokenTimeLockByAmount: next phase unavailable\\\"\\n        );\\n\\n        uint256 prevReleaseIdx = _nextReleaseIdx;\\n\\n        uint256 availableReleaseAmount = 0;\\n        while (\\n            _nextReleaseIdx < numOfPhases &&\\n            block.timestamp >=\\n            _startDate + _lockDurations[_nextReleaseIdx] * 1 seconds\\n        ) {\\n            uint256 stepReleaseAmount = 0;\\n            stepReleaseAmount = _releaseAmounts[_nextReleaseIdx];\\n\\n            availableReleaseAmount += stepReleaseAmount;\\n            _nextReleaseIdx++;\\n        }\\n\\n        uint256 balance = token().balanceOf(address(this));\\n        require(\\n            balance >= availableReleaseAmount,\\n            \\\"TokenTimeLockByAmount: insufficient balance\\\"\\n        );\\n        _releasedAmount += availableReleaseAmount;\\n        token().safeTransfer(beneficiary(), availableReleaseAmount);\\n\\n        uint64 releaseDate = uint64(block.timestamp);\\n\\n        for (uint256 i = prevReleaseIdx; i < _nextReleaseIdx; ++i) {\\n            _releaseDates[i] = releaseDate;\\n        }\\n\\n        emit Released(\\n            availableReleaseAmount,\\n            _releasedAmount,\\n            uint32(prevReleaseIdx),\\n            _nextReleaseIdx - 1,\\n            releaseDate\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This is for safety.\\n    /// For example, when someone setup the contract with wrong data and accidentally transfer token to the lockup contract.\\n    /// The owner can get the token back by calling this function\\n    function safetyRelease() public onlyOwner returns (bool) {\\n        uint256 balance = token().balanceOf(address(this));\\n        token().safeTransfer(owner(), balance);\\n        emit SafetyReleaseActivated(balance, owner(), uint64(block.timestamp));\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x43fc19870daaf60040058244a9f35182257210672780bae01d353587a72ba59f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612b20806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063c00de5fc11610097578063edca9f0e11610066578063edca9f0e1461026b578063f2fde38b14610289578063f8fcd156146102a5578063fc0c546a146102cb57610100565b8063c00de5fc146101f3578063d6ec527014610211578063e09000801461022f578063e654a5bf1461024d57610100565b806386d1a69f116100d357806386d1a69f146101695780638da5cb5b14610187578063aa8c217c146101a5578063bf862682146101c357610100565b80630b97bc861461010557806338af3eed1461012357806345d30a1714610141578063715018a61461015f575b600080fd5b61010d6102e9565b60405161011a919061244d565b60405180910390f35b61012b610307565b60405161013891906120a9565b60405180910390f35b610149610331565b604051610156919061238d565b60405180910390f35b61016761033b565b005b610171610478565b60405161017e91906121f5565b60405180910390f35b61018f6109d1565b60405161019c91906120a9565b60405180910390f35b6101ad6109fb565b6040516101ba919061238d565b60405180910390f35b6101dd60048036038101906101d89190611bcc565b610a05565b6040516101ea91906121f5565b60405180910390f35b6101fb610d3f565b60405161020891906121d3565b60405180910390f35b610219610dcb565b6040516102269190612432565b60405180910390f35b610237610de5565b60405161024491906121b1565b60405180910390f35b610255610e69565b60405161026291906121f5565b60405180910390f35b610273610ffe565b604051610280919061218f565b60405180910390f35b6102a3600480360381019061029e9190611ba3565b611056565b005b6102ad611202565b6040516102c2999897969594939291906120c4565b60405180910390f35b6102d3611276565b6040516102e09190612210565b60405180910390f35b6000606b60009054906101000a900467ffffffffffffffff16905090565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606754905090565b6103436112a0565b73ffffffffffffffffffffffffffffffffffffffff166103616109d1565b73ffffffffffffffffffffffffffffffffffffffff16146103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae9061234d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080606c80549050905080606d60009054906101000a900463ffffffff1663ffffffff16106104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d49061232d565b60405180910390fd5b6001606c606d60009054906101000a900463ffffffff1663ffffffff1681548110610531577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661056191906125d9565b63ffffffff16606b60009054906101000a900467ffffffffffffffff16610588919061259b565b67ffffffffffffffff164210156105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb906122ed565b60405180910390fd5b6000606d60009054906101000a900463ffffffff1663ffffffff16905060005b82606d60009054906101000a900463ffffffff1663ffffffff161080156106cf57506001606c606d60009054906101000a900463ffffffff1663ffffffff168154811061066a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661069a91906125d9565b63ffffffff16606b60009054906101000a900467ffffffffffffffff166106c1919061259b565b67ffffffffffffffff164210155b1561078a5760006065606d60009054906101000a900463ffffffff1663ffffffff1681548110610728577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080826107419190612545565b9150606d600081819054906101000a900463ffffffff168092919061076590612757565b91906101000a81548163ffffffff021916908363ffffffff16021790555050506105f4565b6000610794611276565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107cc91906120a9565b60206040518083038186803b1580156107e457600080fd5b505afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190611cb8565b905081811015610861576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108589061228d565b60405180910390fd5b81606760008282546108739190612545565b925050819055506108b3610885610307565b8361088e611276565b73ffffffffffffffffffffffffffffffffffffffff166112a89092919063ffffffff16565b600042905060008490505b606d60009054906101000a900463ffffffff1663ffffffff168110156109655781606a8281548110610919577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508061095e9061270e565b90506108be565b507f76264100b4b20aa06c294636c2e40aaf398c3490112488330659f4577010713f83606754866001606d60009054906101000a900463ffffffff166109ab9190612617565b856040516109bd9594939291906123df565b60405180910390a160019550505050505090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606654905090565b60008060019054906101000a900460ff1680610a2c575060008054906101000a900460ff16155b610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a629061230d565b60405180910390fd5b60008060019054906101000a900460ff161590508015610abb576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610ac361132e565b848490508787905014610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b02906122ad565b60405180910390fd5b6000805b86869050811015610b7857868682818110610b53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013582610b659190612545565b915080610b719061270e565b9050610b0f565b5089606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083606b60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508787606c9190610c359291906118df565b50858560659190610c47929190611995565b508060668190555060006067819055506000606d60006101000a81548163ffffffff021916908363ffffffff160217905550606c8054905067ffffffffffffffff811115610cbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610cec5781602001602082028036833780820191505090505b50606a9080519060200190610d029291906119e2565b50610d0c8b611056565b60019250508015610d325760008060016101000a81548160ff0219169083151502179055505b5098975050505050505050565b6060606a805480602002602001604051908101604052809291908181526020018280548015610dc157602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610d7c5790505b5050505050905090565b6000606d60009054906101000a900463ffffffff16905090565b6060606c805480602002602001604051908101604052809291908181526020018280548015610e5f57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610e225790505b5050505050905090565b6000610e736112a0565b73ffffffffffffffffffffffffffffffffffffffff16610e916109d1565b73ffffffffffffffffffffffffffffffffffffffff1614610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede9061234d565b60405180910390fd5b6000610ef1611276565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f2991906120a9565b60206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f799190611cb8565b9050610fb4610f866109d1565b82610f8f611276565b73ffffffffffffffffffffffffffffffffffffffff166112a89092919063ffffffff16565b7fc7dd30278c9650b860dfb93b5ff70512f9f45c7f415e061846777b1303a2141981610fde6109d1565b42604051610fee939291906123a8565b60405180910390a1600191505090565b6060606580548060200260200160405190810160405280929190818152602001828054801561104c57602002820191906000526020600020905b815481526020019060010190808311611038575b5050505050905090565b61105e6112a0565b73ffffffffffffffffffffffffffffffffffffffff1661107c6109d1565b73ffffffffffffffffffffffffffffffffffffffff16146110d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c99061234d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611142576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111399061226d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600060608060606000611219610307565b611221611276565b6112296109fb565b611231610331565b6112396102e9565b611241610de5565b611249610ffe565b611251610d3f565b611259610dcb565b985098509850985098509850985098509850909192939495969798565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b6113298363a9059cbb60e01b84846040516024016112c7929190612166565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611417565b505050565b600060019054906101000a900460ff1680611354575060008054906101000a900460ff16155b611393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138a9061230d565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113e3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6113eb6114de565b6113f36115b7565b80156114145760008060016101000a81548160ff0219169083151502179055505b50565b6000611479826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117399092919063ffffffff16565b90506000815111156114d957808060200190518101906114999190611c8f565b6114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cf9061224d565b60405180910390fd5b5b505050565b600060019054906101000a900460ff1680611504575060008054906101000a900460ff16155b611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a9061230d565b60405180910390fd5b60008060019054906101000a900460ff161590508015611593576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156115b45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806115dd575060008054906101000a900460ff16155b61161c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116139061230d565b60405180910390fd5b60008060019054906101000a900460ff16159050801561166c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006116766112a0565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156117365760008060016101000a81548160ff0219169083151502179055505b50565b60606117488484600085611751565b90509392505050565b606082471015611796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178d906122cd565b60405180910390fd5b61179f85611865565b6117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d59061236d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516118079190612092565b60006040518083038185875af1925050503d8060008114611844576040519150601f19603f3d011682016040523d82523d6000602084013e611849565b606091505b5091509150611859828286611878565b92505050949350505050565b600080823b905060008111915050919050565b60608315611888578290506118d8565b60008351111561189b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf919061222b565b60405180910390fd5b9392505050565b828054828255906000526020600020906007016008900481019282156119845791602002820160005b8382111561195257833563ffffffff1683826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611908565b80156119825782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611952565b505b5090506119919190611a9e565b5090565b8280548282559060005260206000209081019282156119d1579160200282015b828111156119d05782358255916020019190600101906119b5565b5b5090506119de9190611a9e565b5090565b82805482825590600052602060002090600301600490048101928215611a8d5791602002820160005b83821115611a5757835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302611a0b565b8015611a8b5782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302611a57565b505b509050611a9a9190611a9e565b5090565b5b80821115611ab7576000816000905550600101611a9f565b5090565b600081359050611aca81612a8e565b92915050565b60008083601f840112611ae257600080fd5b8235905067ffffffffffffffff811115611afb57600080fd5b602083019150836020820283011115611b1357600080fd5b9250929050565b60008083601f840112611b2c57600080fd5b8235905067ffffffffffffffff811115611b4557600080fd5b602083019150836020820283011115611b5d57600080fd5b9250929050565b600081519050611b7381612aa5565b92915050565b600081519050611b8881612abc565b92915050565b600081359050611b9d81612ad3565b92915050565b600060208284031215611bb557600080fd5b6000611bc384828501611abb565b91505092915050565b60008060008060008060008060c0898b031215611be857600080fd5b6000611bf68b828c01611abb565b9850506020611c078b828c01611abb565b9750506040611c188b828c01611abb565b965050606089013567ffffffffffffffff811115611c3557600080fd5b611c418b828c01611b1a565b9550955050608089013567ffffffffffffffff811115611c6057600080fd5b611c6c8b828c01611ad0565b935093505060a0611c7f8b828c01611b8e565b9150509295985092959890939650565b600060208284031215611ca157600080fd5b6000611caf84828501611b64565b91505092915050565b600060208284031215611cca57600080fd5b6000611cd884828501611b79565b91505092915050565b6000611ced8383612038565b60208301905092915050565b6000611d058383612056565b60208301905092915050565b6000611d1d8383612074565b60208301905092915050565b611d328161264b565b82525050565b6000611d4382612498565b611d4d81856124f6565b9350611d5883612468565b8060005b83811015611d89578151611d708882611ce1565b9750611d7b836124cf565b925050600181019050611d5c565b5085935050505092915050565b6000611da1826124a3565b611dab8185612507565b9350611db683612478565b8060005b83811015611de7578151611dce8882611cf9565b9750611dd9836124dc565b925050600181019050611dba565b5085935050505092915050565b6000611dff826124ae565b611e098185612518565b9350611e1483612488565b8060005b83811015611e45578151611e2c8882611d11565b9750611e37836124e9565b925050600181019050611e18565b5085935050505092915050565b611e5b8161265d565b82525050565b6000611e6c826124b9565b611e768185612529565b9350611e868185602086016126db565b80840191505092915050565b611e9b816126b7565b82525050565b6000611eac826124c4565b611eb68185612534565b9350611ec68185602086016126db565b611ecf816127b3565b840191505092915050565b6000611ee7602a83612534565b9150611ef2826127c4565b604082019050919050565b6000611f0a602683612534565b9150611f1582612813565b604082019050919050565b6000611f2d602b83612534565b9150611f3882612862565b604082019050919050565b6000611f50602e83612534565b9150611f5b826128b1565b604082019050919050565b6000611f73602683612534565b9150611f7e82612900565b604082019050919050565b6000611f96602d83612534565b9150611fa18261294f565b604082019050919050565b6000611fb9602e83612534565b9150611fc48261299e565b604082019050919050565b6000611fdc602e83612534565b9150611fe7826129ed565b604082019050919050565b6000611fff602083612534565b915061200a82612a3c565b602082019050919050565b6000612022601d83612534565b915061202d82612a65565b602082019050919050565b61204181612689565b82525050565b61205081612689565b82525050565b61205f81612693565b82525050565b61206e81612693565b82525050565b61207d816126a3565b82525050565b61208c816126a3565b82525050565b600061209e8284611e61565b915081905092915050565b60006020820190506120be6000830184611d29565b92915050565b6000610120820190506120da600083018c611d29565b6120e7602083018b611d29565b6120f4604083018a612047565b6121016060830189612047565b61210e6080830188612083565b81810360a08301526121208187611d96565b905081810360c08301526121348186611d38565b905081810360e08301526121488185611df4565b9050612158610100830184612065565b9a9950505050505050505050565b600060408201905061217b6000830185611d29565b6121886020830184612047565b9392505050565b600060208201905081810360008301526121a98184611d38565b905092915050565b600060208201905081810360008301526121cb8184611d96565b905092915050565b600060208201905081810360008301526121ed8184611df4565b905092915050565b600060208201905061220a6000830184611e52565b92915050565b60006020820190506122256000830184611e92565b92915050565b600060208201905081810360008301526122458184611ea1565b905092915050565b6000602082019050818103600083015261226681611eda565b9050919050565b6000602082019050818103600083015261228681611efd565b9050919050565b600060208201905081810360008301526122a681611f20565b9050919050565b600060208201905081810360008301526122c681611f43565b9050919050565b600060208201905081810360008301526122e681611f66565b9050919050565b6000602082019050818103600083015261230681611f89565b9050919050565b6000602082019050818103600083015261232681611fac565b9050919050565b6000602082019050818103600083015261234681611fcf565b9050919050565b6000602082019050818103600083015261236681611ff2565b9050919050565b6000602082019050818103600083015261238681612015565b9050919050565b60006020820190506123a26000830184612047565b92915050565b60006060820190506123bd6000830186612047565b6123ca6020830185611d29565b6123d76040830184612083565b949350505050565b600060a0820190506123f46000830188612047565b6124016020830187612047565b61240e6040830186612065565b61241b6060830185612065565b6124286080830184612083565b9695505050505050565b60006020820190506124476000830184612065565b92915050565b60006020820190506124626000830184612083565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061255082612689565b915061255b83612689565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156125905761258f612784565b5b828201905092915050565b60006125a6826126a3565b91506125b1836126a3565b92508267ffffffffffffffff038211156125ce576125cd612784565b5b828201905092915050565b60006125e482612693565b91506125ef83612693565b92508163ffffffff048311821515161561260c5761260b612784565b5b828202905092915050565b600061262282612693565b915061262d83612693565b9250828210156126405761263f612784565b5b828203905092915050565b600061265682612669565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006126c2826126c9565b9050919050565b60006126d482612669565b9050919050565b60005b838110156126f95780820151818401526020810190506126de565b83811115612708576000848401525b50505050565b600061271982612689565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561274c5761274b612784565b5b600182019050919050565b600061276282612693565b915063ffffffff82141561277957612778612784565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20696e7375666669636960008201527f656e742062616c616e6365000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20756e6c6f636b206c6560008201527f6e677468206e6f74206d61746368000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a206e657874207068617360008201527f6520756e617661696c61626c6500000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20616c6c20706861736560008201527f73206172652072656c6561736564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b612a978161264b565b8114612aa257600080fd5b50565b612aae8161265d565b8114612ab957600080fd5b50565b612ac581612689565b8114612ad057600080fd5b50565b612adc816126a3565b8114612ae757600080fd5b5056fea2646970667358221220a90577d512afed609314706f8d935c98892dadcb94e01b1929e41e2467331a4664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063c00de5fc11610097578063edca9f0e11610066578063edca9f0e1461026b578063f2fde38b14610289578063f8fcd156146102a5578063fc0c546a146102cb57610100565b8063c00de5fc146101f3578063d6ec527014610211578063e09000801461022f578063e654a5bf1461024d57610100565b806386d1a69f116100d357806386d1a69f146101695780638da5cb5b14610187578063aa8c217c146101a5578063bf862682146101c357610100565b80630b97bc861461010557806338af3eed1461012357806345d30a1714610141578063715018a61461015f575b600080fd5b61010d6102e9565b60405161011a919061244d565b60405180910390f35b61012b610307565b60405161013891906120a9565b60405180910390f35b610149610331565b604051610156919061238d565b60405180910390f35b61016761033b565b005b610171610478565b60405161017e91906121f5565b60405180910390f35b61018f6109d1565b60405161019c91906120a9565b60405180910390f35b6101ad6109fb565b6040516101ba919061238d565b60405180910390f35b6101dd60048036038101906101d89190611bcc565b610a05565b6040516101ea91906121f5565b60405180910390f35b6101fb610d3f565b60405161020891906121d3565b60405180910390f35b610219610dcb565b6040516102269190612432565b60405180910390f35b610237610de5565b60405161024491906121b1565b60405180910390f35b610255610e69565b60405161026291906121f5565b60405180910390f35b610273610ffe565b604051610280919061218f565b60405180910390f35b6102a3600480360381019061029e9190611ba3565b611056565b005b6102ad611202565b6040516102c2999897969594939291906120c4565b60405180910390f35b6102d3611276565b6040516102e09190612210565b60405180910390f35b6000606b60009054906101000a900467ffffffffffffffff16905090565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606754905090565b6103436112a0565b73ffffffffffffffffffffffffffffffffffffffff166103616109d1565b73ffffffffffffffffffffffffffffffffffffffff16146103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae9061234d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080606c80549050905080606d60009054906101000a900463ffffffff1663ffffffff16106104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d49061232d565b60405180910390fd5b6001606c606d60009054906101000a900463ffffffff1663ffffffff1681548110610531577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661056191906125d9565b63ffffffff16606b60009054906101000a900467ffffffffffffffff16610588919061259b565b67ffffffffffffffff164210156105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb906122ed565b60405180910390fd5b6000606d60009054906101000a900463ffffffff1663ffffffff16905060005b82606d60009054906101000a900463ffffffff1663ffffffff161080156106cf57506001606c606d60009054906101000a900463ffffffff1663ffffffff168154811061066a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661069a91906125d9565b63ffffffff16606b60009054906101000a900467ffffffffffffffff166106c1919061259b565b67ffffffffffffffff164210155b1561078a5760006065606d60009054906101000a900463ffffffff1663ffffffff1681548110610728577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080826107419190612545565b9150606d600081819054906101000a900463ffffffff168092919061076590612757565b91906101000a81548163ffffffff021916908363ffffffff16021790555050506105f4565b6000610794611276565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107cc91906120a9565b60206040518083038186803b1580156107e457600080fd5b505afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190611cb8565b905081811015610861576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108589061228d565b60405180910390fd5b81606760008282546108739190612545565b925050819055506108b3610885610307565b8361088e611276565b73ffffffffffffffffffffffffffffffffffffffff166112a89092919063ffffffff16565b600042905060008490505b606d60009054906101000a900463ffffffff1663ffffffff168110156109655781606a8281548110610919577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508061095e9061270e565b90506108be565b507f76264100b4b20aa06c294636c2e40aaf398c3490112488330659f4577010713f83606754866001606d60009054906101000a900463ffffffff166109ab9190612617565b856040516109bd9594939291906123df565b60405180910390a160019550505050505090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606654905090565b60008060019054906101000a900460ff1680610a2c575060008054906101000a900460ff16155b610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a629061230d565b60405180910390fd5b60008060019054906101000a900460ff161590508015610abb576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610ac361132e565b848490508787905014610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b02906122ad565b60405180910390fd5b6000805b86869050811015610b7857868682818110610b53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013582610b659190612545565b915080610b719061270e565b9050610b0f565b5089606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083606b60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508787606c9190610c359291906118df565b50858560659190610c47929190611995565b508060668190555060006067819055506000606d60006101000a81548163ffffffff021916908363ffffffff160217905550606c8054905067ffffffffffffffff811115610cbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610cec5781602001602082028036833780820191505090505b50606a9080519060200190610d029291906119e2565b50610d0c8b611056565b60019250508015610d325760008060016101000a81548160ff0219169083151502179055505b5098975050505050505050565b6060606a805480602002602001604051908101604052809291908181526020018280548015610dc157602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610d7c5790505b5050505050905090565b6000606d60009054906101000a900463ffffffff16905090565b6060606c805480602002602001604051908101604052809291908181526020018280548015610e5f57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610e225790505b5050505050905090565b6000610e736112a0565b73ffffffffffffffffffffffffffffffffffffffff16610e916109d1565b73ffffffffffffffffffffffffffffffffffffffff1614610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede9061234d565b60405180910390fd5b6000610ef1611276565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f2991906120a9565b60206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f799190611cb8565b9050610fb4610f866109d1565b82610f8f611276565b73ffffffffffffffffffffffffffffffffffffffff166112a89092919063ffffffff16565b7fc7dd30278c9650b860dfb93b5ff70512f9f45c7f415e061846777b1303a2141981610fde6109d1565b42604051610fee939291906123a8565b60405180910390a1600191505090565b6060606580548060200260200160405190810160405280929190818152602001828054801561104c57602002820191906000526020600020905b815481526020019060010190808311611038575b5050505050905090565b61105e6112a0565b73ffffffffffffffffffffffffffffffffffffffff1661107c6109d1565b73ffffffffffffffffffffffffffffffffffffffff16146110d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c99061234d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611142576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111399061226d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600060608060606000611219610307565b611221611276565b6112296109fb565b611231610331565b6112396102e9565b611241610de5565b611249610ffe565b611251610d3f565b611259610dcb565b985098509850985098509850985098509850909192939495969798565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600033905090565b6113298363a9059cbb60e01b84846040516024016112c7929190612166565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611417565b505050565b600060019054906101000a900460ff1680611354575060008054906101000a900460ff16155b611393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138a9061230d565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113e3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6113eb6114de565b6113f36115b7565b80156114145760008060016101000a81548160ff0219169083151502179055505b50565b6000611479826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117399092919063ffffffff16565b90506000815111156114d957808060200190518101906114999190611c8f565b6114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cf9061224d565b60405180910390fd5b5b505050565b600060019054906101000a900460ff1680611504575060008054906101000a900460ff16155b611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a9061230d565b60405180910390fd5b60008060019054906101000a900460ff161590508015611593576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156115b45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806115dd575060008054906101000a900460ff16155b61161c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116139061230d565b60405180910390fd5b60008060019054906101000a900460ff16159050801561166c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60006116766112a0565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080156117365760008060016101000a81548160ff0219169083151502179055505b50565b60606117488484600085611751565b90509392505050565b606082471015611796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178d906122cd565b60405180910390fd5b61179f85611865565b6117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d59061236d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516118079190612092565b60006040518083038185875af1925050503d8060008114611844576040519150601f19603f3d011682016040523d82523d6000602084013e611849565b606091505b5091509150611859828286611878565b92505050949350505050565b600080823b905060008111915050919050565b60608315611888578290506118d8565b60008351111561189b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf919061222b565b60405180910390fd5b9392505050565b828054828255906000526020600020906007016008900481019282156119845791602002820160005b8382111561195257833563ffffffff1683826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611908565b80156119825782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611952565b505b5090506119919190611a9e565b5090565b8280548282559060005260206000209081019282156119d1579160200282015b828111156119d05782358255916020019190600101906119b5565b5b5090506119de9190611a9e565b5090565b82805482825590600052602060002090600301600490048101928215611a8d5791602002820160005b83821115611a5757835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302611a0b565b8015611a8b5782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302611a57565b505b509050611a9a9190611a9e565b5090565b5b80821115611ab7576000816000905550600101611a9f565b5090565b600081359050611aca81612a8e565b92915050565b60008083601f840112611ae257600080fd5b8235905067ffffffffffffffff811115611afb57600080fd5b602083019150836020820283011115611b1357600080fd5b9250929050565b60008083601f840112611b2c57600080fd5b8235905067ffffffffffffffff811115611b4557600080fd5b602083019150836020820283011115611b5d57600080fd5b9250929050565b600081519050611b7381612aa5565b92915050565b600081519050611b8881612abc565b92915050565b600081359050611b9d81612ad3565b92915050565b600060208284031215611bb557600080fd5b6000611bc384828501611abb565b91505092915050565b60008060008060008060008060c0898b031215611be857600080fd5b6000611bf68b828c01611abb565b9850506020611c078b828c01611abb565b9750506040611c188b828c01611abb565b965050606089013567ffffffffffffffff811115611c3557600080fd5b611c418b828c01611b1a565b9550955050608089013567ffffffffffffffff811115611c6057600080fd5b611c6c8b828c01611ad0565b935093505060a0611c7f8b828c01611b8e565b9150509295985092959890939650565b600060208284031215611ca157600080fd5b6000611caf84828501611b64565b91505092915050565b600060208284031215611cca57600080fd5b6000611cd884828501611b79565b91505092915050565b6000611ced8383612038565b60208301905092915050565b6000611d058383612056565b60208301905092915050565b6000611d1d8383612074565b60208301905092915050565b611d328161264b565b82525050565b6000611d4382612498565b611d4d81856124f6565b9350611d5883612468565b8060005b83811015611d89578151611d708882611ce1565b9750611d7b836124cf565b925050600181019050611d5c565b5085935050505092915050565b6000611da1826124a3565b611dab8185612507565b9350611db683612478565b8060005b83811015611de7578151611dce8882611cf9565b9750611dd9836124dc565b925050600181019050611dba565b5085935050505092915050565b6000611dff826124ae565b611e098185612518565b9350611e1483612488565b8060005b83811015611e45578151611e2c8882611d11565b9750611e37836124e9565b925050600181019050611e18565b5085935050505092915050565b611e5b8161265d565b82525050565b6000611e6c826124b9565b611e768185612529565b9350611e868185602086016126db565b80840191505092915050565b611e9b816126b7565b82525050565b6000611eac826124c4565b611eb68185612534565b9350611ec68185602086016126db565b611ecf816127b3565b840191505092915050565b6000611ee7602a83612534565b9150611ef2826127c4565b604082019050919050565b6000611f0a602683612534565b9150611f1582612813565b604082019050919050565b6000611f2d602b83612534565b9150611f3882612862565b604082019050919050565b6000611f50602e83612534565b9150611f5b826128b1565b604082019050919050565b6000611f73602683612534565b9150611f7e82612900565b604082019050919050565b6000611f96602d83612534565b9150611fa18261294f565b604082019050919050565b6000611fb9602e83612534565b9150611fc48261299e565b604082019050919050565b6000611fdc602e83612534565b9150611fe7826129ed565b604082019050919050565b6000611fff602083612534565b915061200a82612a3c565b602082019050919050565b6000612022601d83612534565b915061202d82612a65565b602082019050919050565b61204181612689565b82525050565b61205081612689565b82525050565b61205f81612693565b82525050565b61206e81612693565b82525050565b61207d816126a3565b82525050565b61208c816126a3565b82525050565b600061209e8284611e61565b915081905092915050565b60006020820190506120be6000830184611d29565b92915050565b6000610120820190506120da600083018c611d29565b6120e7602083018b611d29565b6120f4604083018a612047565b6121016060830189612047565b61210e6080830188612083565b81810360a08301526121208187611d96565b905081810360c08301526121348186611d38565b905081810360e08301526121488185611df4565b9050612158610100830184612065565b9a9950505050505050505050565b600060408201905061217b6000830185611d29565b6121886020830184612047565b9392505050565b600060208201905081810360008301526121a98184611d38565b905092915050565b600060208201905081810360008301526121cb8184611d96565b905092915050565b600060208201905081810360008301526121ed8184611df4565b905092915050565b600060208201905061220a6000830184611e52565b92915050565b60006020820190506122256000830184611e92565b92915050565b600060208201905081810360008301526122458184611ea1565b905092915050565b6000602082019050818103600083015261226681611eda565b9050919050565b6000602082019050818103600083015261228681611efd565b9050919050565b600060208201905081810360008301526122a681611f20565b9050919050565b600060208201905081810360008301526122c681611f43565b9050919050565b600060208201905081810360008301526122e681611f66565b9050919050565b6000602082019050818103600083015261230681611f89565b9050919050565b6000602082019050818103600083015261232681611fac565b9050919050565b6000602082019050818103600083015261234681611fcf565b9050919050565b6000602082019050818103600083015261236681611ff2565b9050919050565b6000602082019050818103600083015261238681612015565b9050919050565b60006020820190506123a26000830184612047565b92915050565b60006060820190506123bd6000830186612047565b6123ca6020830185611d29565b6123d76040830184612083565b949350505050565b600060a0820190506123f46000830188612047565b6124016020830187612047565b61240e6040830186612065565b61241b6060830185612065565b6124286080830184612083565b9695505050505050565b60006020820190506124476000830184612065565b92915050565b60006020820190506124626000830184612083565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061255082612689565b915061255b83612689565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156125905761258f612784565b5b828201905092915050565b60006125a6826126a3565b91506125b1836126a3565b92508267ffffffffffffffff038211156125ce576125cd612784565b5b828201905092915050565b60006125e482612693565b91506125ef83612693565b92508163ffffffff048311821515161561260c5761260b612784565b5b828202905092915050565b600061262282612693565b915061262d83612693565b9250828210156126405761263f612784565b5b828203905092915050565b600061265682612669565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006126c2826126c9565b9050919050565b60006126d482612669565b9050919050565b60005b838110156126f95780820151818401526020810190506126de565b83811115612708576000848401525b50505050565b600061271982612689565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561274c5761274b612784565b5b600182019050919050565b600061276282612693565b915063ffffffff82141561277957612778612784565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20696e7375666669636960008201527f656e742062616c616e6365000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20756e6c6f636b206c6560008201527f6e677468206e6f74206d61746368000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a206e657874207068617360008201527f6520756e617661696c61626c6500000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f6b656e54696d654c6f636b4279416d6f756e743a20616c6c20706861736560008201527f73206172652072656c6561736564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b612a978161264b565b8114612aa257600080fd5b50565b612aae8161265d565b8114612ab957600080fd5b50565b612ac581612689565b8114612ad057600080fd5b50565b612adc816126a3565b8114612ae757600080fd5b5056fea2646970667358221220a90577d512afed609314706f8d935c98892dadcb94e01b1929e41e2467331a4664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "release()": {
        "details": "User (sender) can release unlocked tokens by calling this function. This function will release locked tokens from multiple lock phases that meets unlock requirements Reverts in the following cases: - No tokens to be withdrawn including:     + All lock phases are already released     + Do not meet next unlock requirements - Amount of tokens that this smart contract holds is insufficient. In this case, users should contact the owner of the token.",
        "returns": {
          "_0": "Return `true` if succeeds, otherwise `false`"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safetyRelease()": {
        "details": "This is for safety. For example, when someone setup the contract with wrong data and accidentally transfer token to the lockup contract. The owner can get the token back by calling this function"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address,uint32[],uint256[],uint64)": {
        "notice": "Register a new lock for a user Reverts in the following cases: - Duplicated lock id for a user. - `lockDurations` and `releaseAmounts` length don't match."
      },
      "release()": {
        "notice": "Release unlocked tokens to user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 976,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 979,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1378,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 525,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4568,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_releaseAmounts",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4571,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_amount",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 4574,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_releasedAmount",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 4577,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_user",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 4580,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_token",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 4584,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_releaseDates",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 4587,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_startDate",
        "offset": 0,
        "slot": "107",
        "type": "t_uint64"
      },
      {
        "astId": 4591,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_lockDurations",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 4594,
        "contract": "contracts/token/TokenTimeLockByAmount.sol:TokenTimeLockByAmount",
        "label": "_nextReleaseIdx",
        "offset": 0,
        "slot": "109",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}